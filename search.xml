<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Welcome</title>
    <url>/9102/11/21/hello/</url>
    <content><![CDATA[<blockquote>
<p>再次感谢原作者创作出这么精美的主题 <a href="https://github.com/Fechin/hexo-theme-diaspora" target="_blank" rel="noopener">@Fechin</a> <a href="https://github.com/LoeiFy/Diaspora" target="_blank" rel="noopener">@LoeiFy</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>酷Q HTTP API Flask</title>
    <url>/2020/02/03/coolq_http_api/</url>
    <content><![CDATA[<p><a href="https://richardchien.gitee.io/coolq-http-api/docs/4.12/#/" target="_blank" rel="noopener">HTTP API 文档</a></p>
<p>NoneBot挂不稳 转而使用Fask版的SDK<br>其实什么版本都差不多<br>酷Q登录后 收到消息 就会通过HTTP POST上报<br>上报地址就是插件配置文件的 post_url<br>有个服务器接收这个事件 处理过后返回就ok</p>
<p><img src="http://hotobun.gitee.io/hexo/img/archive_img/coolq_http_api.png" alt=""></p>
<hr>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul>
<li>CentOS 7</li>
<li>Python 3.7.5 </li>
<li>NoneBot 1.3.1</li>
<li>Python 必须 &gt;= 3.6 其他好像无所谓</li>
</ul>
<hr>
<h2 id="配置Docker"><a href="#配置Docker" class="headerlink" title="配置Docker"></a>配置Docker</h2><p>安装Docker 略..</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 使用 HTTP API 作者制作的镜像 内含插件</span></pre></td></tr><tr><td class="code"><pre><span class="line">$ docker pull richardchien&#x2F;cqhttp:latest </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"># 或者 酷Q官方镜像 无插件 </span></pre></td></tr><tr><td class="code"><pre><span class="line">$ docker pull coolq&#x2F;wine-coolq:latest</span></pre></td></tr></table></figure>

<p>注意<br>    成功登录一次后会有配置文件出来 也可以先创建文件填入<br>    作者制作的镜像 HTTP API插件的配置文件在 coolq/app/io.githubxxxx/config/<user_qq>.ini<br>    官方镜像没有插件 需要到文档下载 配置文件在 coolq/data/app/io.githunxxx/config/<user_qq>.json</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装酷Q容器</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -d --name coolq -d -p 9000:9000 -p 5700:5700 -v /home/Hoto/coolq:/home/user/coolq -e VNC_PASSWD=password -e COOLQ_ACCOUNT=12345678  -e CQHTTP_POST_URL=http://171.18.0.1:8080  -e CQHTTP_SERVE_DATA_FILES=yes coolq/wine-coolq</span></span></pre></td></tr></table></figure>

<p>浏览器打开 服务器ip或域名:9000端口 可以看到noVNC 输入密码 就是刚刚的VNC_PASSWD<br>进入后一顿操作 登录一次 开启一次http模块然后退出来    </p>
<p>回到服务器shell<br>打开酷Q配置文件夹 一般在coolq/data/app/io.github.richardchien.coolqhttpapi/config/<br>里面有刚刚登录过的 QQ号.json 打开修改下面3行 其他按需求填    </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"host"</span>: <span class="string">"[::]"</span>, </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"port"</span>: <span class="number">5700</span>,   <span class="comment">// 酷Q监听的端口 </span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"use_http"</span>: <span class="literal">true</span>, <span class="comment">// 开启http</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"ws_host"</span>: <span class="string">"[::]"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"ws_port"</span>: <span class="number">6700</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"use_ws"</span>: <span class="literal">false</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// "ws_reverse_url": "",    //  ws 开头的可以注释或者 false </span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// "ws_reverse_api_url": "ws://172.18.0.1:8080/ws/api/",    </span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// "ws_reverse_event_url": "ws://172.18.0.1:8080/ws/event/", </span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// "ws_reverse_reconnect_interval": 3000,</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// "ws_reverse_reconnect_on_code_1000": true,</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"use_ws_reverse"</span>: <span class="literal">false</span>,   </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"post_url"</span>: <span class="string">"http://172.18.0.1:22222:/coolq/"</span>, <span class="comment">// 注意填这里 酷Q有消息时 事件上报的地址 </span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"access_token"</span>: <span class="string">""</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"secret"</span>: <span class="string">""</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"post_message_format"</span>: <span class="string">"string"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"serve_data_files"</span>: <span class="literal">false</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"update_source"</span>: <span class="string">"china"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"update_channel"</span>: <span class="string">"stable"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"auto_check_update"</span>: <span class="literal">false</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"auto_perform_update"</span>: <span class="literal">false</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"show_log_console"</span>: <span class="literal">true</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"log_level"</span>: <span class="string">"info"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<hr>
<h2 id="配置Flask"><a href="#配置Flask" class="headerlink" title="配置Flask"></a>配置Flask</h2><p><a href="https://github.com/Hotobun/CoolqHttpApi-Flask" target="_blank" rel="noopener">github</a>  </p>
<p>目录结构 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">│  main.py  # 项目入口</span></pre></td></tr><tr><td class="code"><pre><span class="line">|</span></pre></td></tr><tr><td class="code"><pre><span class="line">└─app</span></pre></td></tr><tr><td class="code"><pre><span class="line">    │  __init__.py</span></pre></td></tr><tr><td class="code"><pre><span class="line">    │</span></pre></td></tr><tr><td class="code"><pre><span class="line">    └─coolq</span></pre></td></tr><tr><td class="code"><pre><span class="line">       │  coolq_sdk.py  # 几个文件都整到这里来了 直接调用里面class</span></pre></td></tr><tr><td class="code"><pre><span class="line">       │  process.py    # 所有消息都在这里处理  </span></pre></td></tr><tr><td class="code"><pre><span class="line">       │  __init__.py</span></pre></td></tr><tr><td class="code"><pre><span class="line">       │</span></pre></td></tr><tr><td class="code"><pre><span class="line">       └─plugins    # 按命令执行代码</span></pre></td></tr><tr><td class="code"><pre><span class="line">             daily.py</span></pre></td></tr><tr><td class="code"><pre><span class="line">             sina_ncov.py</span></pre></td></tr><tr><td class="code"><pre><span class="line">             weather.py</span></pre></td></tr></table></figure>

<p>这里只是给了coolq_sdk一个蓝图 在这个url处理酷Q信息 <code>http://172.18.0.1:22222:/coolq/</code><br>其他与官方文档差不多    </p>
<p>修改URL 可以编辑 coolq_sdk.py  url_prefix参数   </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">coolq_bp = Blueprint(<span class="string">'coolq'</span>,__name__,url_prefix=<span class="string">'/coolq'</span>)</span></pre></td></tr></table></figure>

<p>app/coolq/coolq_sdk.py 在86行注释了个拦截<br>请求ip不等于本机容器 就404   </p>
<p>修改 app/coolq/coolq_sdk.py 里面的 CQHttp类 api_root参数<br>这个是酷Q监听的地址 比如flask主动发消息 是发送到这个地址<br>默认端口5700 ip看情况填   </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查看ip命令 </span></pre></td></tr><tr><td class="code"><pre><span class="line">$ ifconfig</span></pre></td></tr><tr><td class="code"><pre><span class="line">$ ip addr</span></pre></td></tr></table></figure>

<hr>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><h4 id="确认酷Q配置文件-最起码填入下面两个参数"><a href="#确认酷Q配置文件-最起码填入下面两个参数" class="headerlink" title="确认酷Q配置文件 最起码填入下面两个参数"></a>确认酷Q配置文件 最起码填入下面两个参数</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;use_http&quot; : true,</span></pre></td></tr><tr><td class="code"><pre><span class="line">&quot;post_url&quot; : &quot;http:&#x2F;&#x2F;172.18.0.1:22222:&#x2F;coolq&#x2F;&quot;,</span></pre></td></tr></table></figure>

<h4 id="配置flask-uwsgi-ini-自行改用户-端口-目录"><a href="#配置flask-uwsgi-ini-自行改用户-端口-目录" class="headerlink" title="配置flask_uwsgi.ini 自行改用户 端口 目录"></a>配置flask_uwsgi.ini 自行改用户 端口 目录</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[uwsgi]</span></pre></td></tr><tr><td class="code"><pre><span class="line">master &#x3D; true   </span></pre></td></tr><tr><td class="code"><pre><span class="line">home &#x3D; &#x2F;home&#x2F;user&#x2F;venv  # 虚拟环境目录</span></pre></td></tr><tr><td class="code"><pre><span class="line">wsgi-file &#x3D; &#x2F;home&#x2F;user&#x2F;flask&#x2F;main.py    # flask app入口文件</span></pre></td></tr><tr><td class="code"><pre><span class="line">callable &#x3D; app  # 入口文件中的 Flask 实例 就是个变量 官方配置使用的 bot</span></pre></td></tr><tr><td class="code"><pre><span class="line">http &#x3D; :22222   # http监听端口 必须配置 此处大坑 只写socket是收不到的 </span></pre></td></tr><tr><td class="code"><pre><span class="line">socket &#x3D; :23456 # socket监听端口 没有socket项目可以删掉</span></pre></td></tr><tr><td class="code"><pre><span class="line">processes &#x3D; 4   </span></pre></td></tr><tr><td class="code"><pre><span class="line">threads &#x3D; 2         # 其他没注释都无所谓了 看情况填</span></pre></td></tr><tr><td class="code"><pre><span class="line">buffer-size &#x3D; 32768</span></pre></td></tr><tr><td class="code"><pre><span class="line">daemonize &#x3D; &#x2F;home&#x2F;user&#x2F;flask&#x2F;log&#x2F;uwsgi.log</span></pre></td></tr><tr><td class="code"><pre><span class="line">pidfile&#x3D; &#x2F;home&#x2F;user&#x2F;flask&#x2F;uwsgi.pid     # 这个文件用于 停止 和 重启 uwsgi</span></pre></td></tr></table></figure>

<h4 id="uwsgi"><a href="#uwsgi" class="headerlink" title="uwsgi"></a>uwsgi</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 启动 重启 停止</span></pre></td></tr><tr><td class="code"><pre><span class="line">$ uwsgi --ini flask_uwsgi.ini</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line">$ uwsgi --reload &#x2F;home&#x2F;user&#x2F;flask&#x2F;uwsgi.pid</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ uwsgi --stop &#x2F;home&#x2F;user&#x2F;flask&#x2F;uwsgi.pid</span></pre></td></tr></table></figure>

<h4 id="配置完毕"><a href="#配置完毕" class="headerlink" title="配置完毕"></a>配置完毕</h4><p>开启uwsgi 监听22222端口<br>登录 ip:9000 进入noVNC 界面<br>登录酷Q 开启http 插件<br>查看uwsgi.log 日志 上报成功就ok  </p>
<hr>
<h2 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h2><h2 id="无法收到事件上报"><a href="#无法收到事件上报" class="headerlink" title="无法收到事件上报"></a>无法收到事件上报</h2><p>酷Q上报后 Flask没有收到  </p>
<ul>
<li>ip没配置好 </li>
<li>uwsgi 必须填写 http端口 只写socket是收不到的</li>
</ul>
<p>uwsgi 没有填写 http端口之前尝试了<br>酷Q插件配置填写 域名:80 走公网 也是收不到上报数据<br>酷Q -&gt; nginx -&gt; uwsgi -&gt; Flask<br>这样的请求 只有GET 而且没有数据带过来 正常上报是POST  </p>
]]></content>
      <tags>
        <tag>coolq</tag>
        <tag>Python</tag>
        <tag>Flask</tag>
      </tags>
  </entry>
  <entry>
    <title>酷Q机器人 NoneBot</title>
    <url>/2020/01/30/coolq_nonebot/</url>
    <content><![CDATA[<h2 id="使用几天后"><a href="#使用几天后" class="headerlink" title="使用几天后"></a>使用几天后</h2><p>不稳 可能是我内存不够<br>服务器才1G内存 NoneBot占用 10% 开启debug 18% 略吃紧<br>白天挂云服务器还正常 第二天早上就假死<br>酷Q有上报 但是NoneBot没有接收到任何信息<br>重启居然又能用 一万个问号<br>暂时放弃NoneBot 使用另一个coolq-http-api<br>同样使用flask与博客共存  </p>
<h2 id="为什么使用NoneBot"><a href="#为什么使用NoneBot" class="headerlink" title="为什么使用NoneBot"></a>为什么使用NoneBot</h2><blockquote>
<p>人生苦短 我用python   </p>
</blockquote>
<ul>
<li>NoneBot : 基于酷Q的Python异步QQ机器人框架 简介 易扩展 高性能</li>
<li>官方CQP sdk : 非法占用内存 估计也是数组越界 不是python的锅 不懂dll 已弃</li>
<li>原生易语言模块: 做界面很快 逻辑处理就一脸懵逼 语法贼复杂 习惯英文编程 看不懂中文语法 思路转不过来 已弃</li>
</ul>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul>
<li>CentOS 7</li>
<li>Python 3.7.5 </li>
<li>NoneBot 1.3.1</li>
<li>Python 必须 &gt;= 3.6 其他好像无所谓</li>
</ul>
<h2 id="原理如图"><a href="#原理如图" class="headerlink" title="原理如图"></a>原理如图</h2><p>酷Q从服务器接收QQ消息 转发给NoneBot 处理过后再传给酷Q返回给腾讯  </p>
<p><img src="http://hotobun.gitee.io/hexo/img/archive_img/coolq_nonebot_flow_chart.png" alt=""></p>
<h2 id="配置Docker"><a href="#配置Docker" class="headerlink" title="配置Docker"></a>配置Docker</h2><p>安装Docker 略..</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载酷Q官方docker镜像</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker pull coolq/wine-coolq</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建项目映射目录 备用</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir coolq</span></span></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装酷Q容器</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -d --name coolq -d -p 9000:9000 -p 5700:5700 -v /home/Hoto/coolq:/home/user/coolq -e VNC_PASSWD=password -e COOLQ_ACCOUNT=12345678  -e CQHTTP_POST_URL=http://171.18.0.1:8080  -e CQHTTP_SERVE_DATA_FILES=yes coolq/wine-coolq</span></span></pre></td></tr></table></figure>

<p>浏览器打开 服务器ip或域名:9000端口 可以看到noVNC 输入密码 就是刚刚的VNC_PASSWD<br>进入后一顿操作 登录一次 开启一次http模块然后退出来    </p>
<p>回到服务器shell<br>打开酷Q配置文件夹 一般在coolq/data/app/io.github.richardchien.coolqhttpapi/config/<br>里面有刚刚登录过的 QQ号.json 打开修改下面3行 其他按需求填    </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"host"</span>: <span class="string">"[::]"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"port"</span>: <span class="number">5700</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"use_http"</span>: <span class="literal">true</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"ws_host"</span>: <span class="string">"[::]"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"ws_port"</span>: <span class="number">6700</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"use_ws"</span>: <span class="literal">false</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"ws_reverse_url"</span>: <span class="string">""</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"ws_reverse_api_url"</span>: <span class="string">"ws://172.18.0.1:8080/ws/api/"</span>,    <span class="comment">// 这里</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"ws_reverse_event_url"</span>: <span class="string">"ws://172.18.0.1:8080/ws/event/"</span>,<span class="comment">// 这里</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"ws_reverse_reconnect_interval"</span>: <span class="number">3000</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"ws_reverse_reconnect_on_code_1000"</span>: <span class="literal">true</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"use_ws_reverse"</span>: <span class="literal">true</span>,   <span class="comment">// 这里</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"post_url"</span>: <span class="string">""</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"access_token"</span>: <span class="string">""</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"secret"</span>: <span class="string">""</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"post_message_format"</span>: <span class="string">"string"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"serve_data_files"</span>: <span class="literal">false</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"update_source"</span>: <span class="string">"china"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"update_channel"</span>: <span class="string">"stable"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"auto_check_update"</span>: <span class="literal">false</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"auto_perform_update"</span>: <span class="literal">false</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"show_log_console"</span>: <span class="literal">true</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"log_level"</span>: <span class="string">"info"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<h4 id="重点-要考的"><a href="#重点-要考的" class="headerlink" title="重点 要考的"></a>重点 要考的</h4><p>ip如果不通 记得先测试 哪个ip通网填哪个 官方配置在linux是行不通的     </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用下面两条命令都可以查看ip</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ ifocnfig</span></pre></td></tr><tr><td class="code"><pre><span class="line">$ ip addr</span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 容器ip 172.18.0.2   </span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 主机ip 172.18.0.1</span></span></pre></td></tr></table></figure>
<p>这里填的是酷Q向Nonebot请求的ip NoneBot部署在172.18.0.1   </p>
<p>配置过后 再次浏览器打开 ip:9000 进入noNVC<br>运行酷Q 登录 启用http插件  </p>
<h2 id="git相关"><a href="#git相关" class="headerlink" title="git相关"></a>git相关</h2><p>ssh免密码 略..  不需要git的略..</p>
<p>服务器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 视情况该路径</span></pre></td></tr><tr><td class="code"><pre><span class="line"># 创建裸仓库</span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git init --bare nonebot.git</span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line"># 创建钩子文件 nonebot.git是仓库 mybot是本地push后文件映射到服务器的路径 </span></pre></td></tr><tr><td class="code"><pre><span class="line">$ vim nonebot.git&#x2F;hooks&#x2F;post-receive</span></pre></td></tr><tr><td class="code"><pre><span class="line"># &#x2F;bin&#x2F;sh</span></pre></td></tr><tr><td class="code"><pre><span class="line">git --work-tree&#x3D;&#x2F;home&#x2F;Hoto&#x2F;cocoa&#x2F;mybot --git-dir&#x3D;&#x2F;home&#x2F;Hoto&#x2F;cocoa&#x2F;nonebot.git checkout -f</span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line"># 添加执行权限</span></pre></td></tr><tr><td class="code"><pre><span class="line">$ chmod +x nonebot.git&#x2F;hooks&#x2F;post-receive</span></pre></td></tr></table></figure>
<p>本地Windows </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 创建仓库 已有就略..</span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git init</span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git add .</span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git commit -m &quot;firsh commit&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line"># user视情况填 不是全都用git用户 这里踩了个坑 以为是git语法 </span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git remote add origin Hoto@hotococoa.com:&#x2F;home&#x2F;Hoto&#x2F;cocoa&#x2F;nonebot.git</span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git push -u origin master</span></pre></td></tr></table></figure>

<h2 id="NoneBot"><a href="#NoneBot" class="headerlink" title="NoneBot"></a>NoneBot</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装虚拟环境 这里使用pipenv</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 命令行直接装 详细配置查看官网</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip install pipenv </span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入mybot目录 创建环境 </span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> mybot</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pipenv install</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装依赖 有几个需要的库不会自动装 </span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 报warning再弄吧 也不出错 弄不懂到底需不需要 反正能用</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pipenv install msgpack</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pipenv install ujson</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pipenv install requests</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pipenv install nonebot</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 运行</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pipenv run python bot.py </span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 运行不等于挂机 你退出shell就没了 测试过代码没问题后 </span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 用下面命令 不间断+后台+运行</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> nohup pipenv run python bot.py &amp;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看网关 </span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> netstat -tnlp </span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看nohup运行日志 看到有 GET /ws/xxx/ 101 就连接成功 </span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 没就慌了 检查ip 写几个socket测试通不通网 这里我卡了半天</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tail -n 50 nohup</span></span></pre></td></tr></table></figure>
<p><img src="http://hotobun.gitee.io/hexo/img/archive_img/coolq_nonebot_nohup.png" alt=""></p>
<p>如果有两个 GET /ws/xxx/ 101  说明已经配置完成了<br>剩下就是开发插件的事了 现有的插件丢上去都能用  </p>
<h2 id="一堆坑"><a href="#一堆坑" class="headerlink" title="一堆坑"></a>一堆坑</h2><h2 id="提示缺少-Windows-Script-Control组件"><a href="#提示缺少-Windows-Script-Control组件" class="headerlink" title="提示缺少 Windows Script Control组件"></a>提示缺少 Windows Script Control组件</h2><p>这是由于 Wine 对部分组件支持不完全造成的<br>通过 Winetricks 安装 msscript 及 winhttp 组件即可<br>右击空白调出菜单 进入命令行 下面3条命令 运行完就ok</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ wget https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;Winetricks&#x2F;winetricks&#x2F;master&#x2F;src&#x2F;winetricks</span></pre></td></tr><tr><td class="code"><pre><span class="line">$ chmod +x winetricks</span></pre></td></tr><tr><td class="code"><pre><span class="line">$ sh winetricks msscript winhttp</span></pre></td></tr></table></figure>

<h2 id="nonebot-init-error"><a href="#nonebot-init-error" class="headerlink" title="nonebot init error"></a>nonebot <strong>init</strong> error</h2><p>本来是按原教程操作的 Windows上一切正常<br>部署上云后各种问题 毕竟是linux 没有原生windows环境<br>首先 项目目录里的config.py 写了如下参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 看上去很正常</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">PORT = <span class="number">8080</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">HOST = <span class="string">'127.0.0.1'</span></span></pre></td></tr></table></figure>
<p>然后 运行bot.py时报错 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">__init__ got an unexpected keyword argument host</span></pre></td></tr></table></figure>
<p>查看源码 也没看出问题 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># NoneBot&#x2F;__init__.py line 25-26</span></pre></td></tr><tr><td class="code"><pre><span class="line">super().__init__(message_class&#x3D;aiocqhttp.message.Message,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        **&#123;k.lower(): v for k, v in config_dict.items()&#125;)</span></pre></td></tr></table></figure>
<p>最后一顿操作测试 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># print() 成功输出两个config.py中的值 证明这个字典正确</span></pre></td></tr><tr><td class="code"><pre><span class="line">print(config_dict[&#39;PORT&#39;],config_dict[&#39;HOST&#39;])</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"># 删掉 **&#123;dict ... &#125; 没报错</span></pre></td></tr><tr><td class="code"><pre><span class="line">super().__init__(message_class&#x3D;aiocqhttp.message.Message)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"># 关键字参数  同样报错</span></pre></td></tr><tr><td class="code"><pre><span class="line">super().__init__(message_class&#x3D;aiocqhttp.message.Message,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            host&#x3D;&#39;172.18.0.1&#39;, port&#x3D;8080)</span></pre></td></tr></table></figure>
<p>结论 这个<strong>init</strong>就不能传ip端口进去 直接写的传关键字都报错<br>解决：</p>
<ul>
<li>注意括号 删掉 **{k.lower(): v for k, v in config_dict.items()}</li>
<li>如果要修改端口和ip去 nonebot目录 default_config.py修改</li>
</ul>
<p>尝试运行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ pipenv run python bot.py</span></pre></td></tr></table></figure>
<p>成功 看到等待会话状态<br>但这只能使nonebot运行起来 并不保证与酷Q连接 这两部分是独立的  </p>
<h2 id="连接酷Q"><a href="#连接酷Q" class="headerlink" title="连接酷Q"></a>连接酷Q</h2><p>巨坑<br>在容器的noNVC 右键菜单 打开命令行<br>ip addr 查看ip 显示 172.18.0.2  </p>
<p>主机对应ip 172.18.0.1  </p>
<p>此处 应该修改前面说的 default_config.py<br>因为项目目录写的config.py 在<strong>init</strong>.py 读入会报错啊   </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># nonebot库目录&#x2F;default_config.py  line 25-26</span></pre></td></tr><tr><td class="code"><pre><span class="line">HOST: str &#x3D; &#39;127.0.0.1&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">PORT: int &#x3D; 8080</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"># 修改为</span></pre></td></tr><tr><td class="code"><pre><span class="line">HOST: str &#x3D; &#39;172.18.0.1&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">PORT: int &#x3D; 8080</span></pre></td></tr></table></figure>
<p>这两个是nonebot绑定监听的ip端口 nonebot就在这里 可以看前面绘图<br>nonebot到这里基本配置完毕 </p>
<p>docker容器方面 </p>
]]></content>
      <tags>
        <tag>python</tag>
        <tag>coolq</tag>
      </tags>
  </entry>
  <entry>
    <title>2019 nCov疫情gif图片</title>
    <url>/2020/01/27/matplotlib_ncov/</url>
    <content><![CDATA[<img style="display: block; margin-left: auto; margin-right: auto;" src="/hexo/img/archive_img/ncov_confirm.gif" alt=""> 
<img style="display: block; margin-left: auto; margin-right: auto;" src="/hexo/img/archive_img/ncov_dead.gif" alt=""> 
<img style="display: block; margin-left: auto; margin-right: auto;" src="/hexo/img/archive_img/ncov_suspect.gif" alt=""> 
<img style="display: block; margin-left: auto; margin-right: auto;" src="/hexo/img/archive_img/ncov_heal.gif" alt=""> 



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> animation</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy <span class="keyword">import</span> interpolate</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json, os, pickle</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 实时全部信息</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">now_url = <span class="string">'https://view.inews.qq.com/g2/getOnsInfo?name=wuwei_ww_area_counts&amp;callback=jQuery34109326359122726049_1580115460210&amp;_=1580115460217'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 历史信息</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">past_url = <span class="string">'https://view.inews.qq.com/g2/getOnsInfo?name=wuwei_ww_cn_day_counts'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line">head = &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="string">'user-agent'</span>:<span class="string">'mozilla/5.0'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment"># 'cookie':'',</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="string">'referer'</span>:<span class="string">'https://news.qq.com//zt2020/page/feiyan.htm'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">np_shape_num = <span class="number">5</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">date = []</span></pre></td></tr><tr><td class="code"><pre><span class="line">confirm = []</span></pre></td></tr><tr><td class="code"><pre><span class="line">suspect = []</span></pre></td></tr><tr><td class="code"><pre><span class="line">dead = []</span></pre></td></tr><tr><td class="code"><pre><span class="line">heal = [] </span></pre></td></tr><tr><td class="code"><pre><span class="line">x,y = [],[]</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">RequestsGetJson</span><span class="params">(url, filename)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    filename = filename+<span class="string">'.pkl'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> os.path.isfile(filename):</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">with</span> open(filename, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            r = pickle.load(f)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">else</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        r = requests.get(url, headers = head)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">with</span> open(filename, <span class="string">'wb'</span>) <span class="keyword">as</span> f: </span></pre></td></tr><tr><td class="code"><pre><span class="line">            pickle.dump(r, f)     </span></pre></td></tr><tr><td class="code"><pre><span class="line">          </span></pre></td></tr><tr><td class="code"><pre><span class="line">    data  = r.text</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> <span class="string">'jQuery34109326359122726049_1580115460210'</span> <span class="keyword">in</span> data:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        data = data[:data.rindex(<span class="string">")"</span>)]</span></pre></td></tr><tr><td class="code"><pre><span class="line">        data = data.replace(<span class="string">"jQuery34109326359122726049_1580115460210("</span>, <span class="string">''</span>) </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment"># print(data)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    result = json.loads(data)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    result = json.loads(result[<span class="string">'data'</span>])</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> result</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">past_data</span><span class="params">(show = True)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    result = RequestsGetJson(past_url, <span class="string">'past'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> show:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        print(result)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> result</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">now_data</span><span class="params">(show = True)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    data = RequestsGetJson(now_url, <span class="string">'now'</span>)   </span></pre></td></tr><tr><td class="code"><pre><span class="line">    count = &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> data:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> i[<span class="string">'country'</span>] != <span class="string">'中国'</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">continue</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment"># 确诊 治愈 死亡 总数统计</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        count[<span class="string">'confirm'</span>] = count.get(<span class="string">'confirm'</span>, <span class="number">0</span>) + i[<span class="string">'confirm'</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment"># 疑似人数有误 不在这里抓</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment"># count['suspect'] = count.get('suspect', 0) + i['suspect'] </span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        count[<span class="string">'heal'</span>] = count.get(<span class="string">'heal'</span>, <span class="number">0</span>) + i[<span class="string">'heal'</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line">        count[<span class="string">'dead'</span>] = count.get(<span class="string">'dead'</span>, <span class="number">0</span>) + i[<span class="string">'dead'</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> show:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        print(<span class="string">'确诊&#123;&#125;, 治愈&#123;&#125;, 死亡&#123;&#125; '</span>.format(count[<span class="string">'confirm'</span>],count[<span class="string">'heal'</span>], count[<span class="string">'dead'</span>]))</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> count</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lineshape</span><span class="params">(target, num = np_shape_num)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment"># target type : [int,int...]</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment"># num type: int</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    sumi = ( len(target)<span class="number">-1</span> ) * num + <span class="number">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    result = []</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> range(len(target)):</span></pre></td></tr><tr><td class="code"><pre><span class="line">        item = target[index]</span></pre></td></tr><tr><td class="code"><pre><span class="line">        result += [item]</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> len(result) &lt; sumi:</span></pre></td></tr><tr><td class="code"><pre><span class="line">             </span></pre></td></tr><tr><td class="code"><pre><span class="line">            result += list(np.linspace(item, target[index+<span class="number">1</span>], num=num<span class="number">-1</span>))</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> result</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unit_plt</span><span class="params">(data, index=date, xmajor=<span class="number">1</span>, ymajor=<span class="number">500</span>, returnfilg=False)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment"># index type: list 日期</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment"># data  type: list 该日期的数据</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment"># major type: int  对应xy轴的刻度范围 例 x隔一天一个刻度 </span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    ax = plt.gca()</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">global</span> x, y</span></pre></td></tr><tr><td class="code"><pre><span class="line">    x += lineshape(index)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    y += lineshape(data) </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> returnfilg:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> (x, y)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ax.xaxis.set_major_locator(plt.MultipleLocator(xmajor)) </span></pre></td></tr><tr><td class="code"><pre><span class="line">    ax.yaxis.set_major_locator(plt.MultipleLocator(ymajor)) </span></pre></td></tr><tr><td class="code"><pre><span class="line">    plt.plot(x, y)  </span></pre></td></tr><tr><td class="code"><pre><span class="line">    plt.axis([ min(index), max(index), <span class="number">0</span>, max(data) + <span class="number">10</span> ])</span></pre></td></tr><tr><td class="code"><pre><span class="line">    plt.show()</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gif_init</span><span class="params">()</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">global</span> x,y </span></pre></td></tr><tr><td class="code"><pre><span class="line">    ax.set_title(<span class="string">"新型冠状病毒nCoV 2020 1月 &#123;&#125;"</span>.format(text), fontproperties=<span class="string">"Kaiti"</span>, fontsize = <span class="number">14</span> )  </span></pre></td></tr><tr><td class="code"><pre><span class="line">    ax.set_xlim(min(x), max(x))</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ax.set_ylim(<span class="number">0</span>,ylim)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ax.xaxis.set_major_locator(plt.MultipleLocator(<span class="number">1</span>)) </span></pre></td></tr><tr><td class="code"><pre><span class="line">    ax.yaxis.set_major_locator(plt.MultipleLocator(y_major)) </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> ln,</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gif_update</span><span class="params">( frame )</span>:</span> </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">global</span> x,y   </span></pre></td></tr><tr><td class="code"><pre><span class="line">    ln.set_data(x[:frame+<span class="number">1</span>],y[:frame+<span class="number">1</span>])</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> ln,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gif</span><span class="params">(data)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    xy = unit_plt(data,returnfilg=<span class="literal">True</span>) </span></pre></td></tr><tr><td class="code"><pre><span class="line">    anim = animation.FuncAnimation(fig, gif_update, frames=range(len(xy[<span class="number">0</span>])),interval=<span class="number">1</span>,init_func=gif_init, blit=<span class="literal">True</span>, repeat_delay=<span class="number">22000</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    anim.save(filename)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment"># plt.show()</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>: </span></pre></td></tr><tr><td class="code"><pre><span class="line">    past = past_data(show=<span class="literal">False</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    past.sort(key= <span class="keyword">lambda</span> x:x[<span class="string">'date'</span>])</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> past:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        date.append(int(item[<span class="string">'date'</span>][<span class="number">-2</span>:]))</span></pre></td></tr><tr><td class="code"><pre><span class="line">        confirm.append(int(item[<span class="string">'confirm'</span>] ))</span></pre></td></tr><tr><td class="code"><pre><span class="line">        suspect.append(int(item[<span class="string">'suspect'</span>] ))</span></pre></td></tr><tr><td class="code"><pre><span class="line">        dead.append(int(item[<span class="string">'dead'</span>] ))</span></pre></td></tr><tr><td class="code"><pre><span class="line">        heal.append(int(item[<span class="string">'heal'</span>] )) </span></pre></td></tr><tr><td class="code"><pre><span class="line">     </span></pre></td></tr><tr><td class="code"><pre><span class="line">    fig, ax = plt.subplots()</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ln, = plt.plot([],[],animated=<span class="literal">True</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    plt.xlabel(<span class="string">"数据来源: 腾讯新闻"</span>, fontproperties=<span class="string">"Kaiti"</span>, fontsize = <span class="number">14</span> ) </span></pre></td></tr><tr><td class="code"><pre><span class="line">    data_l = [</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment"># text  图标y轴最高值 y轴刻度步长 保存文件名 y轴数据</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        [<span class="string">'全国确诊'</span>, max(confirm),   <span class="number">500</span>, <span class="string">'confirm.gif'</span>, confirm],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [<span class="string">'死亡人数'</span>, max(dead),   <span class="number">10</span>, <span class="string">'dead.gif'</span>, dead],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [<span class="string">'疑似病例'</span>, max(suspect),   <span class="number">500</span>, <span class="string">'suspect.gif'</span>, suspect],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [<span class="string">'治愈人数'</span>, max(heal),   <span class="number">10</span>, <span class="string">'heal.gif'</span>, heal],</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ]</span></pre></td></tr><tr><td class="code"><pre><span class="line">     </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> data_l:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        x,y = [],[]</span></pre></td></tr><tr><td class="code"><pre><span class="line">        text = item[<span class="number">0</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ylim = item[<span class="number">1</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line">        y_major = item[<span class="number">2</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line">        filename = item[<span class="number">3</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> item[<span class="number">0</span>] == <span class="string">'治愈人数'</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(item[<span class="number">4</span>])):</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">if</span> item[<span class="number">4</span>][i] == <span class="number">0</span> <span class="keyword">and</span> i &gt; <span class="number">4</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    item[<span class="number">4</span>][i] = (item[<span class="number">4</span>][i<span class="number">-1</span>] + item[<span class="number">4</span>][i+<span class="number">1</span>]) //<span class="number">2</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        gif(data=item[<span class="number">4</span>])</span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Python</tag>
        <tag>Matplotlib</tag>
      </tags>
  </entry>
  <entry>
    <title>Matplotlib裁剪圆形图片</title>
    <url>/2020/01/27/matplotlib_circular_image/</url>
    <content><![CDATA[<p>官网抄的<br>注意PNG图片的头信息 有的PNG图片虽然能打开看<br>但是如果信息已经丢失的 这里打不开<br>比如.PNG文件 直接改成 .jpg 再改回来 .PNG 信息已丢失<br>解决  </p>
<ul>
<li>找个ps软件放上去 导出为PNG 大概可以 </li>
<li>或者简单除暴 直接用.JPG</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    cwd = os.getcwd()</span></pre></td></tr><tr><td class="code"><pre><span class="line">    filename = input(<span class="string">"图片文件名或图片完整路径: "</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> filename:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> os.path.isfile(os.path.join(cwd, filename)):</span></pre></td></tr><tr><td class="code"><pre><span class="line">            file_path = os.path.join(cwd, filename)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">elif</span> os.path.isfile(filename):</span></pre></td></tr><tr><td class="code"><pre><span class="line">            file_path = filename</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">else</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            print(<span class="string">"该路径不是一个文件 &#123;&#125;"</span>.format(filename))</span></pre></td></tr><tr><td class="code"><pre><span class="line">            print(<span class="string">"该路径不是一个文件 &#123;&#125;"</span>.format(os.path.join(cwd, filename)))</span></pre></td></tr><tr><td class="code"><pre><span class="line">            print(<span class="string">"未找到图片 告辞!"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">else</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> main() </span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">with</span> cbook.get_sample_data(file_path) <span class="keyword">as</span> image_file:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        image = plt.imread(image_file)</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line">    fig, ax = plt.subplots()</span></pre></td></tr><tr><td class="code"><pre><span class="line">    im = ax.imshow(image)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    imsize = im.get_size() <span class="comment"># 返回 (高, 长) 跟平时的长*高 反过来的！ </span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    print(<span class="string">"图片尺寸 "</span>, imsize[::<span class="number">-1</span>])</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment"># center 裁剪的圆心位置 这里默认图片中心</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment"># min_r  圆形图片半径 取长高最小值除2 再大会有切片 不能构成圆形</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    center = (imsize[<span class="number">1</span>]//<span class="number">2</span>, imsize[<span class="number">0</span>]//<span class="number">2</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    min_r = min(imsize)//<span class="number">2</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line">    patch = patches.Circle(center, radius=min_r, transform=ax.transData)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    im.set_clip_path(patch)</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line">    ax.axis(<span class="string">'off'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    print(<span class="string">"圆心坐标:&#123;&#125; 半径:&#123;&#125;\n"</span>.format(center, min_r))</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> save_name:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        plt.savefig(save_name)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    plt.show()</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">try</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">import</span> matplotlib.patches <span class="keyword">as</span> patches</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">import</span> matplotlib.cbook <span class="keyword">as</span> cbook  </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">except</span> ModuleNotFoundError <span class="keyword">as</span> e:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        print(<span class="string">"ModuleNotFoundError 请安装绘图库 Matplotlib "</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        print(<span class="string">"    $ pip install matplotlib"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        exit()</span></pre></td></tr><tr><td class="code"><pre><span class="line">    save_name = <span class="string">''</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    main()</span></pre></td></tr></table></figure>

<p><img src="http://hotobun.gitee.io/hexo/img/archive_img/matplotlib_circular_image.png" alt=""></p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>Matplotlib</tag>
      </tags>
  </entry>
  <entry>
    <title>常用排序算法</title>
    <url>/2020/01/25/sort/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th align="left">排序方法</th>
<th align="left">平均时间复杂度</th>
<th align="left">最坏时间复杂度</th>
<th align="left">最优时间复杂度</th>
<th align="left">空间复杂度</th>
<th align="left">稳定性</th>
</tr>
</thead>
<tbody><tr>
<td align="left">冒泡排序</td>
<td align="left">O(n²)</td>
<td align="left">O(n*n)</td>
<td align="left">O(n)</td>
<td align="left">O(1)</td>
<td align="left">稳如狗</td>
</tr>
<tr>
<td align="left">插入排序</td>
<td align="left">O(n²)</td>
<td align="left">O(n²)</td>
<td align="left">O(n)</td>
<td align="left">O(1)</td>
<td align="left">稳如狗</td>
</tr>
<tr>
<td align="left">选择排序</td>
<td align="left">O(n²)</td>
<td align="left">O(n²)</td>
<td align="left">O(n²)</td>
<td align="left">O(1)</td>
<td align="left">不稳定</td>
</tr>
<tr>
<td align="left">快速排序</td>
<td align="left">O(nlog2n)</td>
<td align="left">O(n²)</td>
<td align="left">O(nlog2n)</td>
<td align="left">O(nlog2n)</td>
<td align="left">不稳定</td>
</tr>
</tbody></table>
<hr>
<details>
  <summary> python绘图库 </summary>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> animation</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> DataFrame</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> config <span class="keyword">import</span> dcolor, test_data, interval</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(sort_Iterable, title=<span class="string">''</span>, fig=None, filename=None, show=True)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment"># data type: Iterable Dataframe(&#123;"number":array, "color":array&#125;)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment"># rtype : None</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    data = [] </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> type(sort_Iterable) == list:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        data = sort_Iterable</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">else</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> sort_Iterable(test_data):</span></pre></td></tr><tr><td class="code"><pre><span class="line">            data.append(item)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> fig:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        fig = plt.figure()   </span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">animate</span><span class="params">(i)</span>:</span> </span></pre></td></tr><tr><td class="code"><pre><span class="line">        plt.clf()</span></pre></td></tr><tr><td class="code"><pre><span class="line">        plt.xticks([])</span></pre></td></tr><tr><td class="code"><pre><span class="line">        plt.yticks([])</span></pre></td></tr><tr><td class="code"><pre><span class="line">        plt.title(title) </span></pre></td></tr><tr><td class="code"><pre><span class="line">        rects = plt.bar(data[i].index, height = data[i][<span class="string">'number'</span>] ,  color = data[i][<span class="string">'color'</span>])</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> rects</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    anim = animation.FuncAnimation(fig, animate, frames=len(data), interval=interval, repeat=<span class="literal">False</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> filename:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        anim.save(filename=filename)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> show:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        plt.show()</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>: </span></pre></td></tr><tr><td class="code"><pre><span class="line">    array = list(range(<span class="number">1</span>,<span class="number">33</span>))</span></pre></td></tr><tr><td class="code"><pre><span class="line">    random.shuffle(array)</span></pre></td></tr></table></figure>

</details>  


<hr>
<h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><blockquote>
<p>冒泡排序（Bubble Sort），是一种计算机科学领域的较简单的排序算法。<br><br>它重复地走访过要排序的元素列，依次比较两个相邻的元素，如果顺序（如从大到小、首字母从从Z到A）错误就把他们交换过来。走访元素的工作是重复地进行直到没有相邻元素需要交换，也就是说该元素列已经排序完成。<br>这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端（升序或降序排列），就如同碳酸饮料中二氧化碳的气泡最终会上浮到顶端一样，故名“冒泡排序”。</p>
</blockquote>
<details>
  <summary> c语言代码 </summary>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">define</span> ARRAY_SIZE 23</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">思路:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">    遍历数组 如果一个数是大于下一个数 那么就互换这两个值</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">    使得最后的数永远是最大的</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">*/</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">char</span>* <span class="built_in">text</span>, <span class="keyword">int</span> * <span class="built_in">array</span>, <span class="keyword">int</span> <span class="built_in">size</span>)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s "</span>, <span class="built_in">text</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">while</span> ( i &lt; <span class="built_in">size</span>)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">printf</span>(<span class="string">"%2d "</span>,<span class="built_in">array</span>[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        i++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> <span class="built_in">array</span>[ARRAY_SIZE] = &#123;<span class="number">1</span>, <span class="number">19</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">18</span>, <span class="number">16</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">21</span>, <span class="number">11</span>, <span class="number">23</span>, <span class="number">22</span>, <span class="number">17</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">10</span>, <span class="number">9</span>&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    show(<span class="string">"original"</span>,<span class="built_in">array</span>, ARRAY_SIZE);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> temp ;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;ARRAY_SIZE; i++)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j &lt; ARRAY_SIZE; j++)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> (<span class="built_in">array</span>[i] &gt; <span class="built_in">array</span>[j])&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                temp = <span class="built_in">array</span>[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="built_in">array</span>[i] = <span class="built_in">array</span>[j];</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="built_in">array</span>[j] = temp;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;      </span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    show(<span class="string">"new_sort"</span>,<span class="built_in">array</span>, ARRAY_SIZE);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

</details>  


<details>
  <summary> python绘图代码 </summary>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> config <span class="keyword">import</span> dcolor, desc</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> plt_show <span class="keyword">import</span> show  </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort</span><span class="params">(ordata)</span>:</span> </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="string">'''gif每一帧的生成器'''</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment"># rtype : yield DataFrame</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    data = ordata.copy(deep=<span class="literal">True</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    i = len(data)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">while</span> i &gt; <span class="number">1</span>: </span></pre></td></tr><tr><td class="code"><pre><span class="line">        now_number = data[<span class="string">'number'</span>][<span class="number">0</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line">        data[<span class="string">'color'</span>][<span class="number">0</span>] = dcolor[<span class="string">'now'</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, i):</span></pre></td></tr><tr><td class="code"><pre><span class="line">            target = data[<span class="string">'number'</span>][j]</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment"># desc 控制排序方式 默认为升序 即判断 now_number &gt; target 否则 条件反过来</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment"># 如果成立 互换两个值</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> ( now_number &lt; target <span class="keyword">if</span> desc <span class="keyword">else</span> now_number &gt; target ):</span></pre></td></tr><tr><td class="code"><pre><span class="line">                data[<span class="string">'number'</span>][j], data[<span class="string">'number'</span>][j<span class="number">-1</span>] = now_number, data[<span class="string">'number'</span>][j]</span></pre></td></tr><tr><td class="code"><pre><span class="line">                data[<span class="string">'color'</span>][j],data[<span class="string">'color'</span>][j<span class="number">-1</span>] = data[<span class="string">'color'</span>][j<span class="number">-1</span>],data[<span class="string">'color'</span>][j]</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment"># 如果不成立 now_number 应该等于更大的数 color互换</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">else</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                now_number = data[<span class="string">'number'</span>][j]</span></pre></td></tr><tr><td class="code"><pre><span class="line">                data[<span class="string">'color'</span>][j],data[<span class="string">'color'</span>][j<span class="number">-1</span>] = data[<span class="string">'color'</span>][j<span class="number">-1</span>],data[<span class="string">'color'</span>][j]</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment"># 如果本次循环已到尽头 这个数字判定为已排序 修改颜色</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> j == i<span class="number">-1</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                data[<span class="string">'color'</span>][j] = dcolor[<span class="string">'done'</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">yield</span> data.copy(deep=<span class="literal">True</span>)      </span></pre></td></tr><tr><td class="code"><pre><span class="line">        i -= <span class="number">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment"># 到这一步 已经是只剩下一个数字 不需要判断 直接修改颜色</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    data[<span class="string">'color'</span>][<span class="number">0</span>] = dcolor[<span class="string">'done'</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">yield</span> data</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:  </span></pre></td></tr><tr><td class="code"><pre><span class="line">    show(bubble_sort, title=<span class="string">'bubble_sort'</span>, filename=<span class="string">'gif/bubble_sort.gif'</span>)</span></pre></td></tr></table></figure>

</details>  

<img style="display: block; margin-left: auto; margin-right: auto;" src="/hexo/img/archive_img/sort_bubble_sort.gif" alt=""> 

<hr>
<h4 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h4><blockquote>
<p>插入排序（Insertion sort）是一种简单直观且稳定的排序算法。如果有一个已经有序的数据序列，要求在这个已经排好的数据序列中插入一个数，但要求插入后此数据序列仍然有序，这个时候就要用到一种新的排序方法——插入排序法,插入排序的基本操作就是将一个数据插入到已经排好序的有序数据中，从而得到一个新的、个数加一的有序数据，算法适用于少量数据的排序，时间复杂度为O(n^2)。是稳定的排序方法。插入算法把要排序的数组分成两部分：第一部分包含了这个数组的所有元素，但将最后一个元素除外（让数组多一个空间才有插入的位置），而第二部分就只包含这一个元素（即待插入元素）。在第一部分排序完成后，再将这个最后元素插入到已排好序的第一部分中。<br>插入排序的基本思想是：每步将一个待排序的记录，按其关键码值的大小插入前面已经排序的文件中适当位置上，直到全部插入完为止。</p>
</blockquote>
<ul>
<li>这里python代码为了使图片更加直观 每次循环判断直接互换了两个元素 实际上算法本身一次循环只互换一次 </li>
</ul>
<details>
  <summary> c语言代码 </summary>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">define</span> ARRAY_SIZE 23</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">思路:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">    每步将一个待排序的记录，按其关键码值的大小插入前面已经排序的文件中适当位置上，直到全部插入完为止。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">*/</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">char</span>* <span class="built_in">text</span>, <span class="keyword">int</span> * <span class="built_in">array</span>, <span class="keyword">int</span> <span class="built_in">size</span>)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s "</span>, <span class="built_in">text</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">while</span> ( i &lt; <span class="built_in">size</span>)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">printf</span>(<span class="string">"%2d "</span>,<span class="built_in">array</span>[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        i++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> <span class="built_in">array</span>[ARRAY_SIZE] = &#123;<span class="number">1</span>, <span class="number">19</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">18</span>, <span class="number">16</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">21</span>, <span class="number">11</span>, <span class="number">23</span>, <span class="number">22</span>, <span class="number">17</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">10</span>, <span class="number">9</span>&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    show(<span class="string">"original"</span>,<span class="built_in">array</span>, ARRAY_SIZE);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> target; </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;ARRAY_SIZE; i++)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        target = <span class="built_in">array</span>[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">int</span> j = i<span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 当存在大于target的数 这个数往后移一位</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">while</span> (j&gt;=<span class="number">0</span> &amp;&amp; <span class="built_in">array</span>[j] &gt; target)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="built_in">array</span>[j+<span class="number">1</span>] = <span class="built_in">array</span>[j];</span></pre></td></tr><tr><td class="code"><pre><span class="line">            j--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 当while结束时 j+1 &gt; target &gt; j-1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 如果这个数 跟排序好的最后一个数相等就不用交换了</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (j != i<span class="number">-1</span>)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="built_in">array</span>[j+<span class="number">1</span>] = target;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; </span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    show(<span class="string">"new_sort"</span>,<span class="built_in">array</span>, ARRAY_SIZE);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

</details>  


<details>
  <summary> python绘图代码 </summary>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> config <span class="keyword">import</span> dcolor, desc</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> plt_show <span class="keyword">import</span> show  </span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insertion_sort</span><span class="params">(ordata)</span>:</span> </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="string">'''gif每一帧的生成器'''</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment"># rtype : yield DataFrame</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    data = ordata.copy(deep=<span class="literal">True</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(data)):</span></pre></td></tr><tr><td class="code"><pre><span class="line">        target = i</span></pre></td></tr><tr><td class="code"><pre><span class="line">        temp = data[<span class="string">'number'</span>][target]</span></pre></td></tr><tr><td class="code"><pre><span class="line">        data[<span class="string">'color'</span>][i] = dcolor[<span class="string">'now'</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">yield</span> data.copy(deep=<span class="literal">True</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        j = i<span class="number">-1</span> </span></pre></td></tr><tr><td class="code"><pre><span class="line">        data[<span class="string">'color'</span>][i] = dcolor[<span class="string">'done'</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">while</span> (j&gt;=<span class="number">0</span>) <span class="keyword">and</span> (data[<span class="string">'number'</span>][j] &gt; temp):</span></pre></td></tr><tr><td class="code"><pre><span class="line">            data[<span class="string">'number'</span>][j+<span class="number">1</span>] = data[<span class="string">'number'</span>][j] </span></pre></td></tr><tr><td class="code"><pre><span class="line">            data[<span class="string">'number'</span>][j] = temp</span></pre></td></tr><tr><td class="code"><pre><span class="line">            data[<span class="string">'color'</span>][j] = dcolor[<span class="string">'now'</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line">            data[<span class="string">'color'</span>][j+<span class="number">1</span>] = dcolor[<span class="string">'done'</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line">            j -= <span class="number">1</span>    </span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">yield</span> data.copy(deep=<span class="literal">True</span>)  </span></pre></td></tr><tr><td class="code"><pre><span class="line">            data[<span class="string">'color'</span>][j+<span class="number">1</span>] = dcolor[<span class="string">'done'</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">yield</span> data.copy(deep=<span class="literal">True</span>) </span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:  </span></pre></td></tr><tr><td class="code"><pre><span class="line">    show(insertion_sort, title=<span class="string">'insertion_sort'</span>, filename=<span class="string">'gif/insertion_sort.gif'</span>)</span></pre></td></tr></table></figure>

</details>  

<img style="display: block; margin-left: auto; margin-right: auto;" src="/hexo/img/archive_img/sort_insertion_sort.gif" alt=""> 

<hr>
<h4 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h4><blockquote>
<p>选择排序（Selection sort）是一种简单直观的排序算法。它的工作原理是：第一次从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，然后再从剩余的未排序元素中寻找到最小（大）元素，然后放到已排序的序列的末尾。以此类推，直到全部待排序的数据元素的个数为零。选择排序是不稳定的排序方法。</p>
</blockquote>
<details>
  <summary> c语言代码 </summary>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">define</span> ARRAY_SIZE 23</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">思路:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">    找到未排序的元素的最小值</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">    然后和数组中未排序的 最前面的值互换</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">*/</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">char</span>* <span class="built_in">text</span>, <span class="keyword">int</span> * <span class="built_in">array</span>, <span class="keyword">int</span> <span class="built_in">size</span>)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s "</span>, <span class="built_in">text</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">while</span> ( i &lt; <span class="built_in">size</span>)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">printf</span>(<span class="string">"%2d "</span>,<span class="built_in">array</span>[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        i++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> <span class="built_in">array</span>[ARRAY_SIZE] = &#123;<span class="number">1</span>, <span class="number">19</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">18</span>, <span class="number">16</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">21</span>, <span class="number">11</span>, <span class="number">23</span>, <span class="number">22</span>, <span class="number">17</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">10</span>, <span class="number">9</span>&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    show(<span class="string">"original"</span>,<span class="built_in">array</span>, ARRAY_SIZE);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> target;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> temp;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;ARRAY_SIZE; i++)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        target = i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j &lt; ARRAY_SIZE; j++)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> (<span class="built_in">array</span>[target] &gt; <span class="built_in">array</span>[j])&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                target = j;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;      </span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        temp = <span class="built_in">array</span>[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">array</span>[i] = <span class="built_in">array</span>[target];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">array</span>[target] = temp;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    show(<span class="string">"new_sort"</span>,<span class="built_in">array</span>, ARRAY_SIZE);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

</details>  


<details>
  <summary> python绘图代码 </summary>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> config <span class="keyword">import</span> dcolor, desc</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> plt_show <span class="keyword">import</span> show  </span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">selection_sort</span><span class="params">(ordata)</span>:</span> </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="string">'''gif每一帧的生成器'''</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment"># rtype : yield DataFrame</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    data = ordata.copy(deep=<span class="literal">True</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> now_index <span class="keyword">in</span> range(len(data)):</span></pre></td></tr><tr><td class="code"><pre><span class="line">        target = now_index</span></pre></td></tr><tr><td class="code"><pre><span class="line">        data[<span class="string">'color'</span>][now_index] = dcolor[<span class="string">'now'</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> new_target <span class="keyword">in</span> range(now_index+<span class="number">1</span>,len(data)):</span></pre></td></tr><tr><td class="code"><pre><span class="line">            data[<span class="string">'color'</span>][new_target] = dcolor[<span class="string">'target'</span>] </span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">yield</span> data.copy(deep=<span class="literal">True</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> ( data[<span class="string">'number'</span>][target] &lt; data[<span class="string">'number'</span>][new_target] <span class="keyword">if</span> desc\</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="keyword">else</span> data[<span class="string">'number'</span>][target] &gt; data[<span class="string">'number'</span>][new_target] ):</span></pre></td></tr><tr><td class="code"><pre><span class="line">                data[<span class="string">'color'</span>][target] = dcolor[<span class="string">'default'</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">yield</span> data.copy(deep=<span class="literal">True</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                target = new_target</span></pre></td></tr><tr><td class="code"><pre><span class="line">                data[<span class="string">'color'</span>][target] = dcolor[<span class="string">'now'</span>] </span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">else</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                data[<span class="string">'color'</span>][new_target] = dcolor[<span class="string">'default'</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">yield</span> data.copy(deep=<span class="literal">True</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        data[<span class="string">'color'</span>][now_index] = dcolor[<span class="string">'now'</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">yield</span> data.copy(deep=<span class="literal">True</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        data[<span class="string">'number'</span>][now_index], data[<span class="string">'number'</span>][target] = data[<span class="string">'number'</span>][target],data[<span class="string">'number'</span>][now_index]</span></pre></td></tr><tr><td class="code"><pre><span class="line">        data[<span class="string">'color'</span>][target] = dcolor[<span class="string">'default'</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line">        data[<span class="string">'color'</span>][now_index] = dcolor[<span class="string">'done'</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">yield</span> data.copy(deep=<span class="literal">True</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:  </span></pre></td></tr><tr><td class="code"><pre><span class="line">    show(selection_sort, title=<span class="string">'selection_sort'</span>, filename=<span class="string">'gif/selection_sort.gif'</span>)</span></pre></td></tr></table></figure>

</details>  

<img style="display: block; margin-left: auto; margin-right: auto;" src="/hexo/img/archive_img/sort_selection_sort.gif" alt=""> 

<hr>
<h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><blockquote>
<p>快速排序（Quicksort）是对冒泡排序的一种改进。<br><br>快速排序由C. A. R. Hoare在1960年提出。它的基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。</p>
</blockquote>
<p>顾名思义 比较快  </p>
<details>
  <summary> c语言代码 </summary>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">define</span> SIZE 9 </span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>* <span class="built_in">array</span>, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (l &gt;= r)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> i, j, target;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    i = l;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    j = r; </span></pre></td></tr><tr><td class="code"><pre><span class="line">    target = <span class="built_in">array</span>[l];  </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">while</span> (i &lt; j)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">while</span> (i&lt;j &amp;&amp; <span class="built_in">array</span>[j] &gt; target )&#123; </span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">// 循环退出后 j是未排序范围 最右边的比target小的数的下标</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">// 把这个值放到左边</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            j--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">array</span>[i] = <span class="built_in">array</span>[j];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">while</span> (i&lt;j &amp;&amp; <span class="built_in">array</span>[i] &lt;= target )&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">// 循环退出后 i是未排序范围 最左边的比target大的数的下标</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">// 把这个值放到右边</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            i++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; </span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">array</span>[j] = <span class="built_in">array</span>[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 走出上面循环后 下标i与j是相等的 这个位置就是target在排序后合适的位置</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 比target小的数已经全部在左边 大的数在右边</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">array</span>[i] = target; </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 剩下的两组数据递归下去 同样的方法 直到找出所有合适位置</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    sort(<span class="built_in">array</span>,l,i<span class="number">-1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    sort(<span class="built_in">array</span>,i+<span class="number">1</span>,r);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">char</span> * <span class="built_in">text</span>, <span class="keyword">int</span> * <span class="built_in">array</span>)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, <span class="built_in">text</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">while</span> (i&lt;SIZE)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,<span class="built_in">array</span>[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        i++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> <span class="built_in">array</span>[SIZE] = &#123;<span class="number">2</span>,<span class="number">54</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">55</span>,<span class="number">7</span>,<span class="number">23</span>,<span class="number">31</span>,<span class="number">8</span>&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    show(<span class="string">"original : "</span>, <span class="built_in">array</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    sort(<span class="built_in">array</span>, <span class="number">0</span>,SIZE<span class="number">-1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    show(<span class="string">"new sort : "</span>, <span class="built_in">array</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

</details>  


<details>
  <summary> python绘图代码 </summary>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> config <span class="keyword">import</span> dcolor, desc</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> plt_show <span class="keyword">import</span> show  </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> config <span class="keyword">import</span> test_data, array, dcolor</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> DataFrame</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span><span class="params">(ordata, l = <span class="number">0</span>, r = None)</span>:</span> </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment"># rtype : yield DataFrame</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    data = ordata </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> r:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        r = len(data) <span class="number">-1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">         </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> l&gt;=r:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        colors[r] = dcolor[<span class="string">'done'</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line">        queue.append(DataFrame(&#123;<span class="string">"number"</span>:temp_list+data, <span class="string">'color'</span>:temp_color+colors&#125;))</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line">    i, j = l, r</span></pre></td></tr><tr><td class="code"><pre><span class="line">    target = data[l] </span></pre></td></tr><tr><td class="code"><pre><span class="line">    temp_list[<span class="number">1</span>] = target</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">while</span> i &lt; j: </span></pre></td></tr><tr><td class="code"><pre><span class="line">        colors[j] = dcolor[<span class="string">'target'</span>] </span></pre></td></tr><tr><td class="code"><pre><span class="line">        queue.append(DataFrame(&#123;<span class="string">"number"</span>:temp_list+data, <span class="string">'color'</span>:temp_color+colors&#125;))</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">while</span> i&lt;j <span class="keyword">and</span> data[j] &gt; target: </span></pre></td></tr><tr><td class="code"><pre><span class="line">            colors[j] = dcolor[<span class="string">'default'</span>] </span></pre></td></tr><tr><td class="code"><pre><span class="line">            j -= <span class="number">1</span> </span></pre></td></tr><tr><td class="code"><pre><span class="line">            colors[j] = dcolor[<span class="string">'target'</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line">            queue.append(DataFrame(&#123;<span class="string">"number"</span>:temp_list+data, <span class="string">'color'</span>:temp_color+colors&#125;))</span></pre></td></tr><tr><td class="code"><pre><span class="line">        data[i] = data[j] </span></pre></td></tr><tr><td class="code"><pre><span class="line">        colors[i] = dcolor[<span class="string">'target'</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line">        queue.append(DataFrame(&#123;<span class="string">"number"</span>:temp_list+data, <span class="string">'color'</span>:temp_color+colors&#125;)) </span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">while</span> i&lt;j <span class="keyword">and</span> data[i] &lt;= target: </span></pre></td></tr><tr><td class="code"><pre><span class="line">            colors[i] = dcolor[<span class="string">'default'</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line">            i += <span class="number">1</span> </span></pre></td></tr><tr><td class="code"><pre><span class="line">            colors[i] = dcolor[<span class="string">'target'</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line">            queue.append(DataFrame(&#123;<span class="string">"number"</span>:temp_list+data, <span class="string">'color'</span>:temp_color+colors&#125;))</span></pre></td></tr><tr><td class="code"><pre><span class="line">        data[j] = data[i]  </span></pre></td></tr><tr><td class="code"><pre><span class="line">        queue.append(DataFrame(&#123;<span class="string">"number"</span>:temp_list+data, <span class="string">'color'</span>:temp_color+colors&#125;)) </span></pre></td></tr><tr><td class="code"><pre><span class="line">    data[i] = target  </span></pre></td></tr><tr><td class="code"><pre><span class="line">    colors[i] = dcolor[<span class="string">'done'</span>] </span></pre></td></tr><tr><td class="code"><pre><span class="line">    temp_list[<span class="number">1</span>] = <span class="number">0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    queue.append(DataFrame(&#123;<span class="string">"number"</span>:temp_list+data, <span class="string">'color'</span>:temp_color+colors&#125;))</span></pre></td></tr><tr><td class="code"><pre><span class="line">    quick_sort(data  , l, i<span class="number">-1</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    quick_sort(data  , i+<span class="number">1</span>, r)    </span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span> </span></pre></td></tr><tr><td class="code"><pre><span class="line">    data = array </span></pre></td></tr><tr><td class="code"><pre><span class="line">    quick_sort(data) </span></pre></td></tr><tr><td class="code"><pre><span class="line">    show(queue, title=<span class="string">'quick_sort'</span>, filename=<span class="string">'gif/quick_sort.gif'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:   </span></pre></td></tr><tr><td class="code"><pre><span class="line">    temp_list = [<span class="number">0</span>] * <span class="number">3</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    temp_color = [dcolor[<span class="string">'now'</span>]] * <span class="number">3</span> </span></pre></td></tr><tr><td class="code"><pre><span class="line">    colors = [dcolor[<span class="string">'default'</span>],]* len(array)  </span></pre></td></tr><tr><td class="code"><pre><span class="line">    queue = []</span></pre></td></tr><tr><td class="code"><pre><span class="line">    main()</span></pre></td></tr></table></figure>

</details>  


<img style="display: block; margin-left: auto; margin-right: auto;" src="/hexo/img/archive_img/sort_quick_sort.gif" alt=""> 


<hr>
]]></content>
      <tags>
        <tag>python</tag>
        <tag>算法</tag>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>制作chrome浏览器新标签页</title>
    <url>/2020/01/20/chrome_new_tab/</url>
    <content><![CDATA[<h2 id="chrome扩展程序是什么"><a href="#chrome扩展程序是什么" class="headerlink" title="chrome扩展程序是什么"></a>chrome扩展程序是什么</h2><blockquote>
<p>摘自百度<br>拓展就是利用浏览器提供给你的功能，通过自己搭配来实现一些功能组合，通常利用JavaScript这样的脚本语言来完成，只要调用浏览器提供的接口即可。</p>
</blockquote>
<p>从chrome网上应用商店下载的扩展 都是.crx文件 安装完自动删除了 离线只能从其他地方下载<br>参考了离线安装.crx的教程<br>把.crx 替换成 .zip 居然能打开<br>里面就是一个html网页 有配置信息 静态资源.</p>
<p>那么可以总结为 .crx文件其实这就是一个zip压缩包？<br>既然有这样的规则 我尝试了下制作测试扩展</p>
<hr>
<h2 id="如何制作"><a href="#如何制作" class="headerlink" title="如何制作"></a>如何制作</h2><p>我们先来看个最低配置例子<br><img src="http://hotobun.gitee.io/hexo/img/archive_img/chrome_new_tab2.png" alt=""><br>然后开启开发者模式 加载已解压的扩展程序 选择上面写代码的文件夹<br>最后得到我们的cocoa 1 扩展<br><img src="http://hotobun.gitee.io/hexo/img/archive_img/chrome_new_tab3.png" alt=""></p>
<p>打开新标签 熟悉的hello world! 来了<br><img src="http://hotobun.gitee.io/hexo/img/archive_img/chrome_new_tab1.png" alt=""></p>
<p>有了这个知识 就能做更多自定义的功能了<br>喜欢什么加什么 不必受限于大众化的首页  </p>
<hr>
<h2 id="使用过的新标签扩展"><a href="#使用过的新标签扩展" class="headerlink" title="使用过的新标签扩展"></a>使用过的新标签扩展</h2><ul>
<li>Infinity <ul>
<li>扩展界面不错 就是图标太大了 我希望图标可以放在最底下一排 可是没得设置</li>
</ul>
</li>
<li>Infinite <ul>
<li>太简单 就一个壁纸和搜索框 啥都没了 自定义也少</li>
</ul>
</li>
<li>Momentum <ul>
<li>更简单</li>
</ul>
</li>
<li>My Tab<ul>
<li>界面不错 中间搜索框 最下面一组网站的小图标 可是为什么不能修改图标指向的网站  </li>
<li>不能离线使用 本质其实是指向其他网页 既然用户要使用 直接主页设置为那个网页不就完了 要扩展何用。</li>
</ul>
</li>
</ul>
<p>最后 我发现了Infinity Pro 当我看到自定义布局时 我就知道这是我想要的标签页<br><img src="http://hotobun.gitee.io/hexo/img/archive_img/chrome_new_tab4.png" alt=""></p>
<h2 id="魔改"><a href="#魔改" class="headerlink" title="魔改"></a>魔改</h2><p>官方的配置已经够好了 但是还有所欠缺 每个人胃口不同。</p>
<ul>
<li>修改了图标位置 固定在窗口最下方 </li>
<li>隐藏了网站图标的文字 看头像认人的时代 还是不喜欢文字占地方</li>
<li>隐藏了搜索框 鼠标移动到搜索框区域 自动打开</li>
</ul>
<p>缺点: 当鼠标点击在页面外部时 再次移动鼠标到搜索框 焦点不会定位到input标签 优先级不够?</p>
<details>
  <summary> search_click.js </summary>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 隐藏搜索框 </span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 鼠标移动到搜索框区域再取消隐藏 </span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 5秒内无键盘操作 隐藏搜索框</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 若搜索框已开启 移动鼠标会重置计时器</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line">window.onload &#x3D; function () &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    var search_flag_id &#x3D; window.setInterval(function () &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        var search_father &#x3D; document.getElementsByClassName(&quot;gH3horrwzk1vWQb_tjFZ_&quot;)[0];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        var search_div &#x3D; document.getElementsByClassName(&quot;j6WjrWzBT0VSJtD8yafTe&quot;)[0]; &#x2F;&#x2F;获取到div的id</span></pre></td></tr><tr><td class="code"><pre><span class="line">        var search_input &#x3D; document.getElementsByClassName(&quot;DmH9A0dYKnyClIjOJ5xWt&quot;)[0];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (search_father !&#x3D; undefined &amp;&amp; search_div !&#x3D; undefined &amp;&amp; search_input !&#x3D; undefined) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            var keyboard_count &#x3D; 0</span></pre></td></tr><tr><td class="code"><pre><span class="line">            var keyboard_timeout &#x3D; 6</span></pre></td></tr><tr><td class="code"><pre><span class="line">            search_flag &#x3D; false</span></pre></td></tr><tr><td class="code"><pre><span class="line">            clearInterval(search_flag_id);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#x2F;&#x2F; 循环已停止 均已获得标签元素</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#x2F;&#x2F; 设置搜索框焦点</span></pre></td></tr><tr><td class="code"><pre><span class="line">            search_input.focus()</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#x2F;&#x2F; 一开始时 先隐藏掉搜索框 </span></pre></td></tr><tr><td class="code"><pre><span class="line">            search_div.style.display &#x3D; &quot;none&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#x2F;&#x2F; 为上级div加上鼠标监控  </span></pre></td></tr><tr><td class="code"><pre><span class="line">            search_father.onmouseover &#x3D; function () &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                search_div.style.display &#x3D; &quot;block&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                search_input.focus()</span></pre></td></tr><tr><td class="code"><pre><span class="line">                keyboard_count &#x3D; 0</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line">            window.setInterval(input_style_status, 1000)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">            function input_style_status() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                keyboard_count++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (keyboard_count &gt;&#x3D; keyboard_timeout) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    search_div.style.display &#x3D; &quot;none&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#x2F;&#x2F; 监听键盘</span></pre></td></tr><tr><td class="code"><pre><span class="line">            document.onkeydown &#x3D; function () &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                keyboard_count &#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#x2F;&#x2F; 监听鼠标</span></pre></td></tr><tr><td class="code"><pre><span class="line">            document.onmousemove &#x3D; function (event) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                var x1 &#x3D; event.clientX;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                var y1 &#x3D; event.clientY;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (search_div.style.display &#x3D;&#x3D; &quot;block&quot;) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    if (x !&#x3D; x1 || y !&#x3D; y1) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        keyboard_count &#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                x &#x3D; x1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                y &#x3D; y1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;, 3)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

</details>  

<p>最后两幅效果图<br><img src="http://hotobun.gitee.io/hexo/img/archive_img/chrome_new_tab5.png" alt=""><br><img src="http://hotobun.gitee.io/hexo/img/archive_img/chrome_new_tab6.png" alt=""></p>
]]></content>
      <tags>
        <tag>chrome</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask博客Diaspora主题</title>
    <url>/2020/01/11/flask_diaspora/</url>
    <content><![CDATA[<p>花了几天写移植主题<br>已使用flask做后台  </p>
<p>坑太多 慢慢填<br>hexo已部署到码云 同步更新</p>
<hr>
<h2 id="flask-theme-diaspora"><a href="#flask-theme-diaspora" class="headerlink" title="flask-theme-diaspora"></a>flask-theme-diaspora</h2><p>参数都在<code>app/setting/config.py</code>填写</p>
<p>文章放在_posts</p>
<p>需要两个logo图标</p>
<ul>
<li><code>app/static/img/site/logo.png</code> 首页左上角logo 背景透明</li>
<li><code>app/static/img/site/logo_min.png</code> 浏览器最上方标题旁边的图标 </li>
</ul>
<hr>
<p>使用 </p>
<ul>
<li>进入mysql创建数据库 <ul>
<li><code>CREATE DATABASE flaskcocoa DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;</code></li>
</ul>
</li>
<li><code>python app/database/archive.py</code> 创建数据库并写入文章数据</li>
<li><code>python main.py</code> 运行</li>
</ul>
<h2 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h2><ul>
<li><p>markdown渲染引擎 代码块还没有高亮 待填</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python自带的不友好 最后选择了 mistletoe</span></pre></td></tr><tr><td class="code"><pre><span class="line">注意表单格式 要格式化文档 不对齐竖线 | 的会失效</span></pre></td></tr><tr><td class="code"><pre><span class="line">$ pip install mistletoe</span></pre></td></tr><tr><td class="code"><pre><span class="line">import mistletoe</span></pre></td></tr><tr><td class="code"><pre><span class="line">html &#x3D; mistletoe.markdown(text)</span></pre></td></tr></table></figure>
</li>
<li><p>sqlalchemy 插入数据报错</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">百度说的Text默认6w字符 然后我没有填Text参数 </span></pre></td></tr><tr><td class="code"><pre><span class="line">最大的文章 5w多字符 写入时  error 1366 - Incorrect string value</span></pre></td></tr><tr><td class="code"><pre><span class="line">解决:  </span></pre></td></tr><tr><td class="code"><pre><span class="line">    # config.db_text_count &#x3D; 100000</span></pre></td></tr><tr><td class="code"><pre><span class="line">    text &#x3D; Column(Text(config.db_text_count))</span></pre></td></tr></table></figure>
</li>
<li><p>首页js加载 添加div元素时 滚动条不稳定回退</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">解决:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    捕捉滚动条事件 记录滚动条坐标</span></pre></td></tr><tr><td class="code"><pre><span class="line">    插入完成时 使用回到顶部的js代码</span></pre></td></tr><tr><td class="code"><pre><span class="line">    修改成记录的坐标</span></pre></td></tr></table></figure>
</li>
<li><p>pending 待填</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在文章页面 音乐文件太大时 首次进入文章无错误</span></pre></td></tr><tr><td class="code"><pre><span class="line">第二次进入任意文章 状态就为pending 等6~10秒 </span></pre></td></tr><tr><td class="code"><pre><span class="line">而且 ajax失效 是重定向到目标页面</span></pre></td></tr><tr><td class="code"><pre><span class="line">服务器和客户端都是在本机 按我的理解 你去申请个MP3文件 </span></pre></td></tr><tr><td class="code"><pre><span class="line">带宽应该等于读写IO 又没有外网数据流通 </span></pre></td></tr><tr><td class="code"><pre><span class="line">区区10M的小文件 为何让我等那么久</span></pre></td></tr><tr><td class="code"><pre><span class="line">chrome浏览器显示的pending 服务器并没有收到申请</span></pre></td></tr><tr><td class="code"><pre><span class="line">就是说这个等待状态纯粹是在浏览器瞎等 </span></pre></td></tr><tr><td class="code"><pre><span class="line">等完了 服务器才收到get</span></pre></td></tr><tr><td class="code"><pre><span class="line">解决: </span></pre></td></tr><tr><td class="code"><pre><span class="line">    1. 不停的按刷新 可以控制在3秒内 但是</span></pre></td></tr><tr><td class="code"><pre><span class="line">    2. 换个小的MP3文件 2M的珈百璃之歌 无pending</span></pre></td></tr></table></figure>
</li>
<li><p>跨域访问 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">服务器太小了 在gitee上面挂了hexo 静态资源都一样</span></pre></td></tr><tr><td class="code"><pre><span class="line">申请资源时 转为get -&gt; gitee 然后F12后台console两行黄色的</span></pre></td></tr><tr><td class="code"><pre><span class="line">小图片黄牌 超过1m的给红牌</span></pre></td></tr><tr><td class="code"><pre><span class="line">小资源能用就用吧 </span></pre></td></tr><tr><td class="code"><pre><span class="line">待填...</span></pre></td></tr></table></figure>
</li>
<li><p>评论区</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">取消了多层评论标签</span></pre></td></tr><tr><td class="code"><pre><span class="line">现在显示最多两层 原主题有多层标签关系 但是显示也是最多两层</span></pre></td></tr><tr><td class="code"><pre><span class="line">数据库里面还是保留有层级关系的</span></pre></td></tr><tr><td class="code"><pre><span class="line">不慌 反正没人评论 </span></pre></td></tr><tr><td class="code"><pre><span class="line">何时填 .. 需要填吗</span></pre></td></tr></table></figure>
</li>
<li><p>logo</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">本来想用numpy整个透明的logo</span></pre></td></tr><tr><td class="code"><pre><span class="line">后来打开发现图像shape居然是二维的 跟我之前打开miku图片不太一样 </span></pre></td></tr><tr><td class="code"><pre><span class="line">说好的三通道rgb不见了 而且还有个大问题</span></pre></td></tr><tr><td class="code"><pre><span class="line">为何透明和纯白都是用0存储的 计算机怎么区分呢 ?? 换换打出两个问号</span></pre></td></tr><tr><td class="code"><pre><span class="line">解决:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    百度在线ps第一个 </span></pre></td></tr><tr><td class="code"><pre><span class="line">    图片拖进去 新建空白图层 </span></pre></td></tr><tr><td class="code"><pre><span class="line">    魔术棒 选择空白区域 按键盘上的 delete 就没了 </span></pre></td></tr><tr><td class="code"><pre><span class="line">    保存 告辞</span></pre></td></tr></table></figure>
</li>
<li><p>menu </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">还没写</span></pre></td></tr></table></figure>
</li>
<li><p>Gravatar头像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">它没有api 只要有email就能生成imgurl</span></pre></td></tr><tr><td class="code"><pre><span class="line">也不知怎么判断这个email到底有没有设置头像</span></pre></td></tr><tr><td class="code"><pre><span class="line">解决:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    用了别人的libgravatar库 pip直接装</span></pre></td></tr><tr><td class="code"><pre><span class="line">    from libgravatar import Gravatar</span></pre></td></tr><tr><td class="code"><pre><span class="line">    g &#x3D; Gravatar(data[&#39;email&#39;])</span></pre></td></tr><tr><td class="code"><pre><span class="line">    g.get_image(default&#x3D;&quot;404&quot;) # rtype http url</span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line">    用requests请求这个url 如果status_code 是404 </span></pre></td></tr><tr><td class="code"><pre><span class="line">    就证明这个email没有设置头像 </span></pre></td></tr><tr><td class="code"><pre><span class="line">    然后就可以不使用Gravatar 直接用我自定义的默认头像 </span></pre></td></tr><tr><td class="code"><pre><span class="line">    整了1~8号的妹子图 随机抽一个</span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line">    app&#x2F;status&#x2F;img&#x2F;number&#x2F;[1-8].jpg</span></pre></td></tr></table></figure>
</li>
<li><p>JavaScript相关</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">首页加载完毕时 (只有小圆点和首页图片)</span></pre></td></tr><tr><td class="code"><pre><span class="line">会调用一次new_json函数 获取文章列表 显示个数在config设置</span></pre></td></tr></table></figure>


</li>
</ul>
]]></content>
      <tags>
        <tag>python</tag>
        <tag>flask</tag>
      </tags>
  </entry>
  <entry>
    <title>投资问题</title>
    <url>/2020/01/10/invest/</url>
    <content><![CDATA[<h4 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h4><p>你有五万元 可以分别给不同的项目投资若干金额<br>下表列举了投资效益<br>x为投入资金 f(x)为项目效益   </p>
<table>
<thead>
<tr>
<th align="center">x</th>
<th align="center">f1(x)</th>
<th align="center">f2(x)</th>
<th align="center">f3(x)</th>
<th align="center">f4(x)</th>
</tr>
</thead>
<tbody><tr>
<td align="center">0</td>
<td align="center">0</td>
<td align="center">0</td>
<td align="center">0</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">1</td>
<td align="center">11</td>
<td align="center">0</td>
<td align="center">2</td>
<td align="center">20</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">12</td>
<td align="center">5</td>
<td align="center">10</td>
<td align="center">21</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">13</td>
<td align="center">10</td>
<td align="center">30</td>
<td align="center">22</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">14</td>
<td align="center">15</td>
<td align="center">32</td>
<td align="center">23</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">15</td>
<td align="center">20</td>
<td align="center">40</td>
<td align="center">24</td>
</tr>
</tbody></table>
<h4 id="问"><a href="#问" class="headerlink" title="问"></a>问</h4><p>如何使效益最大化。</p>
<h4 id="解"><a href="#解" class="headerlink" title="解"></a>解</h4><ul>
<li>当 k = 1时 只考虑把钱投资给第一个项目：<br>f1(1) = 11, f1(2) = 12, f1(3) = 13, f1(4) = 14, f1(5) = 15<br>直接把项目1回报抄下来 对应 12345 这 5万元分别的回报 不需要计算<br>上述最优回报为 15<br>结论: 5万元投资项目1 最优效益15万  </li>
<li>当 k = 2 时 可以考虑项目1和项目2 <ul>
<li>方案1 一万元的分配: <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">有两个选择 (0,1) (1,0)  </span></pre></td></tr><tr><td class="code"><pre><span class="line">f2(1) &#x3D; max&#123; f2(1), f1(1) &#125;  </span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#x3D; max&#123; 0 , 11 &#125;  </span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#x3D; 11  </span></pre></td></tr><tr><td class="code"><pre><span class="line">1万投资给f1(1) 效益11万</span></pre></td></tr></table></figure></li>
<li>方案2 两万元的分配: <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">有3个选择 (0, 2) (1, 1) (2, 0)</span></pre></td></tr><tr><td class="code"><pre><span class="line">f2(2) &#x3D; max&#123; f2(2), f1(1)+f2(1), f1(2) &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#x3D; max&#123; 5, 11+0, 12 &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#x3D; 12</span></pre></td></tr><tr><td class="code"><pre><span class="line">2万投资给f1(2) 效益12万</span></pre></td></tr></table></figure></li>
<li>方案3 三万元的分配:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">有4种可能的划分 (0, 3) (1, 2) (2, 1) (3, 0)</span></pre></td></tr><tr><td class="code"><pre><span class="line">f2(3) &#x3D; max&#123; f2(3), f1(1)+f2(2), f1(2)+f2(1), f1(3) &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#x3D; max&#123; 10, 11+5, 12+0, 13 &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#x3D; max&#123; 10, 16, 12, 13&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#x3D; 16</span></pre></td></tr><tr><td class="code"><pre><span class="line">此时最优为 1万投资项目1、2万投资项目2 效益16万</span></pre></td></tr></table></figure></li>
<li>按上述方法 可以计算f2(4) f2(5)<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">f2(4) &#x3D; 21</span></pre></td></tr><tr><td class="code"><pre><span class="line">f2(5) &#x3D; 26</span></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<p>我们可以将所有分配计算出来 记到表格中<br>f3(5) x3(5) 表示前3个项目 分配5万元的情况  </p>
<table>
<thead>
<tr>
<th align="center">x</th>
<th align="center">f1(x) x1(x)</th>
<th align="center">f2(x) x2(x)</th>
<th align="center">f3(x) x3(x)</th>
<th align="center">f4(x) x4(x)</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">11&ensp;&ensp; 1</td>
<td align="center">11&ensp;&ensp; 0</td>
<td align="center">11&ensp;&ensp; 0</td>
<td align="center">20&ensp;&ensp; 1</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">12&ensp;&ensp; 2</td>
<td align="center">12&ensp;&ensp; 0</td>
<td align="center">13&ensp;&ensp; 1</td>
<td align="center">31&ensp;&ensp; 1</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">13&ensp;&ensp; 3</td>
<td align="center">16&ensp;&ensp; 2</td>
<td align="center">30&ensp;&ensp; 3</td>
<td align="center">33&ensp;&ensp; 1</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">14&ensp;&ensp; 4</td>
<td align="center">21&ensp;&ensp; 3</td>
<td align="center">41&ensp;&ensp; 3</td>
<td align="center">50&ensp;&ensp; 1</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">15&ensp;&ensp; 5</td>
<td align="center">26&ensp;&ensp; 4</td>
<td align="center">43&ensp;&ensp; 4</td>
<td align="center">61&ensp;&ensp; 1</td>
</tr>
</tbody></table>
<p>解读表格的最后一项<br>5万元投资4个项目 最优效益为 61万</p>
<ul>
<li>在项目4投资了1万元 剩下4万就分配给前三个项目</li>
<li>然后追踪到 x3(4) –&gt; ( 41 3 )</li>
<li>在项目3投资了3万元 剩下一万分配给前两个项目</li>
<li>然后可以追踪到 x2(1) –&gt; ( 11 0 )</li>
<li>在项目2 没有投资 剩一万</li>
<li>一万最大效益 x1(1) –&gt; ( 11 1 )</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  x4(5)&#x3D;1 --&gt; x4&#x3D;1 , x3(5-1) &#x3D; x3(4)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  x3(4)&#x3D;3 --&gt; x3&#x3D;3 , x2(4-3) &#x3D; x2(1)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  x2(1)&#x3D;0 --&gt; x2&#x3D;0 , x1(1-0) &#x3D; x1(1)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  x1(1)&#x3D;1 --&gt; x1&#x3D;1</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line">解：x1&#x3D;1, x2&#x3D;0, x3&#x3D;3, x4&#x3D;1 , f4(5) &#x3D; 61</span></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>爬天气数据绘图</title>
    <url>/2020/01/09/weather/</url>
    <content><![CDATA[<h4 id="github源码"><a href="#github源码" class="headerlink" title="github源码"></a><a href="https://github.com/Hotobun/weather" target="_blank" rel="noopener">github源码</a></h4><h2 id="爬取天气信息"><a href="#爬取天气信息" class="headerlink" title="爬取天气信息"></a>爬取天气信息</h2><p>数据来源 <a href="http://www.tianqi.com/" target="_blank" rel="noopener">tianqi.com</a></p>
<h2 id="使用到的库和工具"><a href="#使用到的库和工具" class="headerlink" title="使用到的库和工具"></a>使用到的库和工具</h2><ul>
<li>requests</li>
<li>sqlalchemy</li>
<li>mysql</li>
<li>pymysql </li>
</ul>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul>
<li>创建数据库 <ul>
<li>CREATE DATABASE weather DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;</li>
</ul>
</li>
<li>填写<code>config.py</code>你家的数据库密码 </li>
<li>运行<code>spider.py</code>爬取数据 需要改城市可以修改url</li>
<li>运行<code>show_plot.py</code>输入年份月份 绘制图像 </li>
</ul>
<p><img src="http://hotobun.gitee.io/hexo/img/archive_img/weather1.png" alt=""><br><img src="http://hotobun.gitee.io/hexo/img/archive_img/weather2.png" alt=""></p>
]]></content>
      <tags>
        <tag>Matplotlib</tag>
        <tag>spiser</tag>
      </tags>
  </entry>
  <entry>
    <title>工地英语学习工具</title>
    <url>/2020/01/09/english_tool/</url>
    <content><![CDATA[<p><a href="https://github.com/Hotobun/english_tool" target="_blank" rel="noopener">github源码</a></p>
<p>先放个图吧<br><img src="http://hotobun.gitee.io/hexo/img/archive_img/english_tool1.png" alt=""><br><img src="http://hotobun.gitee.io/hexo/img/archive_img/english_tool2.png" alt=""></p>
<hr>
<h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><ul>
<li>读取xlsx文件 写入数据库</li>
<li>tkinter从数据库随机取5行数据显示出来</li>
<li>点击单词或句子 出现翻译</li>
</ul>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul>
<li>进入mysql创建数据库<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; CREATE DATABASE english DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;</span></pre></td></tr></table></figure></li>
<li>编辑<code>config.py</code>填写数据库接口</li>
<li>运行<code>db.py</code>写入数据</li>
<li>运行<code>tk.py</code></li>
</ul>
<h2 id="遇到的坑"><a href="#遇到的坑" class="headerlink" title="遇到的坑"></a>遇到的坑</h2><p>文本问题<br>终端是对齐的 到tkinter上就不齐了 待填<br><img src="http://hotobun.gitee.io/hexo/img/archive_img/english_tool3.png" alt=""></p>
<h2 id="语音"><a href="#语音" class="headerlink" title="语音"></a>语音</h2><p>各大翻译平台调用语音api 门槛都很高 要不很贵 要不企业认证<br>迟点写个爬虫抓下来</p>
]]></content>
      <tags>
        <tag>python</tag>
        <tag>mysql</tag>
        <tag>English</tag>
        <tag>tkinter</tag>
      </tags>
  </entry>
  <entry>
    <title>Pandas</title>
    <url>/2020/01/07/Pandas/</url>
    <content><![CDATA[<h2 id="什么是Pandas"><a href="#什么是Pandas" class="headerlink" title="什么是Pandas"></a>什么是Pandas</h2><h4 id="Pandas是Python第三方库-提供高性能易用数据类型和分析工具。"><a href="#Pandas是Python第三方库-提供高性能易用数据类型和分析工具。" class="headerlink" title="Pandas是Python第三方库, 提供高性能易用数据类型和分析工具。"></a>Pandas是Python第三方库, 提供高性能易用数据类型和分析工具。</h4><ol>
<li>提供了便于操作数据的数据类型。</li>
<li>提供很多分析函数与分析工具, 使得数据分析变得非常容易操作</li>
</ol>
<p>Pandas基于NumPy实现, 常与NumPy和Matplotlib一同使用。<br>引用Pandas  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span></pre></td></tr></table></figure>

<details>
  <summary> pandas基础使用 </summary>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.Series(range(<span class="number">20</span>))</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">0</span>      <span class="number">0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">1</span>      <span class="number">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">2</span>      <span class="number">2</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">3</span>      <span class="number">3</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">4</span>      <span class="number">4</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">5</span>      <span class="number">5</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">6</span>      <span class="number">6</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">7</span>      <span class="number">7</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">8</span>      <span class="number">8</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">9</span>      <span class="number">9</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">10</span>    <span class="number">10</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">11</span>    <span class="number">11</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">12</span>    <span class="number">12</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">13</span>    <span class="number">13</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">14</span>    <span class="number">14</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">15</span>    <span class="number">15</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">16</span>    <span class="number">16</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">17</span>    <span class="number">17</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">18</span>    <span class="number">18</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">19</span>    <span class="number">19</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">dtype: int64</span></pre></td></tr></table></figure>

</details>  

<details>
  <summary> 计算前N项累加和 </summary>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.Series(range(<span class="number">20</span>)).cumsum()</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">0</span>       <span class="number">0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">1</span>       <span class="number">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">2</span>       <span class="number">3</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">3</span>       <span class="number">6</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">4</span>      <span class="number">10</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">5</span>      <span class="number">15</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">6</span>      <span class="number">21</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">7</span>      <span class="number">28</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">8</span>      <span class="number">36</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">9</span>      <span class="number">45</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">10</span>     <span class="number">55</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">11</span>     <span class="number">66</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">12</span>     <span class="number">78</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">13</span>     <span class="number">91</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">14</span>    <span class="number">105</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">15</span>    <span class="number">120</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">16</span>    <span class="number">136</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">17</span>    <span class="number">153</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">18</span>    <span class="number">171</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">19</span>    <span class="number">190</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">dtype: int64</span></pre></td></tr></table></figure>

</details>  


<h4 id="Pandas的理解"><a href="#Pandas的理解" class="headerlink" title="Pandas的理解"></a>Pandas的理解</h4><p>Pandas主要提供两个数据类型: Series, DataFrame<br>这两个数据类型构成Pandas的基础</p>
<ul>
<li>基于上述数据类型的各类操作</li>
<li>基本操作、运算操作、特征类操作、关联类操作</li>
</ul>
<h4 id="与NumPy对比"><a href="#与NumPy对比" class="headerlink" title="与NumPy对比"></a>与NumPy对比</h4><table>
<thead>
<tr>
<th align="left">NumPy</th>
<th align="left">Pandas</th>
</tr>
</thead>
<tbody><tr>
<td align="left">基础数据类型</td>
<td align="left">扩展数据类型</td>
</tr>
<tr>
<td align="left">关注数据的结构表达</td>
<td align="left">关注数据的应用表达</td>
</tr>
<tr>
<td align="left">维度:数据之间的关系</td>
<td align="left">数据与索引之间关系</td>
</tr>
</tbody></table>
<h2 id="Pandas的Series"><a href="#Pandas的Series" class="headerlink" title="Pandas的Series"></a>Pandas的Series</h2><p>Series类型由一组数据及与之相关的数据索引组成。  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  索引  ---&gt;  数据  </span></pre></td></tr><tr><td class="code"><pre><span class="line">index_0 ---&gt; data_a  </span></pre></td></tr><tr><td class="code"><pre><span class="line">index_1 ---&gt; data_b  </span></pre></td></tr><tr><td class="code"><pre><span class="line">index_2 ---&gt; data_c  </span></pre></td></tr><tr><td class="code"><pre><span class="line">index_3 ---&gt; data_d</span></pre></td></tr></table></figure>

<details>
  <summary> 举个栗子 </summary>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = pd.Series([<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>])</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">0</span>    <span class="number">9</span>      <span class="comment"># 9876 为数据的值</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">1</span>    <span class="number">8</span>      <span class="comment"># 0123 为数据索引</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">2</span>    <span class="number">7</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">3</span>    <span class="number">6</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">dtype: int64  <span class="comment"># 基于NumPy 所有数据类型沿用了NumPy</span></span></pre></td></tr></table></figure>

</details>  

<details>
  <summary> 自定义索引 </summary>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = pd.Series([<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>], index = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">"abcdefg"</span>])</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span></pre></td></tr><tr><td class="code"><pre><span class="line">a    <span class="number">9</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">b    <span class="number">8</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">c    <span class="number">7</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">d    <span class="number">6</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">e    <span class="number">5</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">f    <span class="number">4</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">g    <span class="number">3</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">dtype: int64</span></pre></td></tr></table></figure>

</details>  


<p>Series类型可以由下如下类型创建</p>
<ul>
<li>Python列表, index与列表元素个数一致。</li>
<li>标量值, index表达Series类型的尺寸。</li>
<li>Python字典, 键值对中的key 是索引, index从字典中进行选择操作。</li>
<li>ndarray, 索引和数据都可以通过ndarray类型创建</li>
<li>其他函数 range() 等…</li>
</ul>
<details>
  <summary> 从标量值创建Series </summary>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.Series(<span class="number">233</span> , index =  [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">"abcd"</span>])</span></pre></td></tr><tr><td class="code"><pre><span class="line">a    <span class="number">233</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">b    <span class="number">233</span>    <span class="comment"># 此处index不可省略 生成数据个数为 len(index)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">c    <span class="number">233</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">d    <span class="number">233</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">dtype: int64</span></pre></td></tr></table></figure>

</details>  


<details>
  <summary> 从字典类型创建Series </summary>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 普通创建 </span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.Series(&#123;<span class="string">'a'</span>:<span class="number">11</span>, <span class="string">'b'</span>:<span class="number">22</span>, <span class="string">'c'</span>:<span class="number">33</span>&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">a    <span class="number">11</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">b    <span class="number">22</span>     <span class="comment"># 键值对关系变为 索引 -&gt; 数据 </span></span></pre></td></tr><tr><td class="code"><pre><span class="line">c    <span class="number">33</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">dtype: int64</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 自定义index </span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.Series(&#123;<span class="string">'a'</span>:<span class="number">11</span>, <span class="string">'b'</span>:<span class="number">22</span>, <span class="string">'c'</span>:<span class="number">33</span>&#125;, index = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">"cabd"</span>])</span></pre></td></tr><tr><td class="code"><pre><span class="line">c    <span class="number">33.0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">a    <span class="number">11.0</span>   <span class="comment"># index指定Series的结构</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">b    <span class="number">22.0</span>   <span class="comment"># 按照结构顺序从字典中取值</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">d     NaN   <span class="comment"># NaN表示python中的None</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">dtype: float64</span></pre></td></tr></table></figure>

</details>  


<details>
  <summary> 从ndarray类型创建 </summary>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.Series(np.arange(<span class="number">25</span>,<span class="number">30</span>))</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">0</span>    <span class="number">25</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">1</span>    <span class="number">26</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">2</span>    <span class="number">27</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">3</span>    <span class="number">28</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">4</span>    <span class="number">29</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">dtype: int32</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 自定义index </span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.Series(np.arange(<span class="number">25</span>,<span class="number">30</span>), index= np.arange(<span class="number">9</span>,<span class="number">4</span>,<span class="number">-1</span>))</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">9</span>    <span class="number">25</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">8</span>    <span class="number">26</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">7</span>    <span class="number">27</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">6</span>    <span class="number">28</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">5</span>    <span class="number">29</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">dtype: int32</span></pre></td></tr></table></figure>

</details>  

<hr>
<h2 id="Series类型的基本操作"><a href="#Series类型的基本操作" class="headerlink" title="Series类型的基本操作"></a>Series类型的基本操作</h2><ul>
<li>Series类型包括index和values两部分。</li>
<li>Series类型的操作类似Python字典类型。</li>
<li>Series类型的操作类似ndarray类型。<ul>
<li>索引方法相同, 采用切片方式。 </li>
<li>NumPy中运算和操作可用于Series类型。</li>
<li>可以通过自定义索引的列表进行切片。 </li>
<li>可以通过自动索引进行切片, 如果存在自定义索引, 则一同被切片。 </li>
</ul>
</li>
</ul>
<details>
  <summary> 举个栗子 </summary>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = pd.Series([<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>], index = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">"abcd"</span>])</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span></pre></td></tr><tr><td class="code"><pre><span class="line">a    <span class="number">9</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">b    <span class="number">8</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">c    <span class="number">7</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">d    <span class="number">6</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">dtype: int64</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.index</span></pre></td></tr><tr><td class="code"><pre><span class="line">Index([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>], dtype=<span class="string">'object'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.values</span></pre></td></tr><tr><td class="code"><pre><span class="line">array([<span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>], dtype=int64)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(a)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">pandas</span>.<span class="title">core</span>.<span class="title">series</span>.<span class="title">Series</span>'&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"> </span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">type</span><span class="params">(a.index)</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">pandas</span>.<span class="title">core</span>.<span class="title">indexes</span>.<span class="title">base</span>.<span class="title">Index</span>'&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"> </span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">type</span><span class="params">(a.values)</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">numpy</span>.<span class="title">ndarray</span>'&gt;</span></span></pre></td></tr></table></figure>

</details>  


<h4 id="Series类型索引"><a href="#Series类型索引" class="headerlink" title="Series类型索引"></a>Series类型索引</h4><ul>
<li>自动索引和自定义索引是共存的</li>
<li>两套索引不可以混用</li>
</ul>
<details>
  <summary> 举个栗子 </summary>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span></pre></td></tr><tr><td class="code"><pre><span class="line">a    <span class="number">9</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">b    <span class="number">8</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">c    <span class="number">7</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">d    <span class="number">6</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">dtype: int64</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="string">'b'</span>]  <span class="comment"># 使用自定义索引 和 自动索引下标 均可取值</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">8</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">1</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">8</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[[<span class="string">'c'</span>, <span class="string">'d'</span>, <span class="number">0</span>]]    <span class="comment"># 两天索引混用 得到一个Warning </span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                        <span class="comment"># 混合使用时 会当做自定义索引 系统会产生一个自定义索引 0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">Warning (<span class="keyword">from</span> warnings module):</span></pre></td></tr><tr><td class="code"><pre><span class="line">  File <span class="string">"...\series.py"</span>, line <span class="number">1155</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> self.loc[key]</span></pre></td></tr><tr><td class="code"><pre><span class="line">FutureWarning: </span></pre></td></tr><tr><td class="code"><pre><span class="line">Passing list-likes to .loc <span class="keyword">or</span> [] <span class="keyword">with</span> any missing label will <span class="keyword">raise</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">KeyError <span class="keyword">in</span> the future, you can use .reindex() <span class="keyword">as</span> an alternative.</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line">See the documentation here:</span></pre></td></tr><tr><td class="code"><pre><span class="line">https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">#deprecate-loc-reindex-listlike</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">c    <span class="number">7.0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">d    <span class="number">6.0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">0</span>    NaN    <span class="comment"># 自定义索引没有 0 所以是NaN</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">dtype: float64</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[[<span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'a'</span>]]</span></pre></td></tr><tr><td class="code"><pre><span class="line">c    <span class="number">7</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">d    <span class="number">6</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">a    <span class="number">9</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">dtype: int64</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a   <span class="comment"># 再次查看a 没有改变原Series </span></span></pre></td></tr><tr><td class="code"><pre><span class="line">a    <span class="number">9</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">b    <span class="number">8</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">c    <span class="number">7</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">d    <span class="number">6</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">dtype: int64</span></pre></td></tr></table></figure>

</details>  

<details>
  <summary> 举个栗子 </summary>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span></pre></td></tr><tr><td class="code"><pre><span class="line">a    <span class="number">9</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">b    <span class="number">8</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">c    <span class="number">7</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">d    <span class="number">6</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">dtype: int64</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">3</span>]    <span class="comment"># 如果只取一个值 类型就是值本身 而不是Series</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">6</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[:<span class="number">3</span>]   <span class="comment"># 切片后仍然是Series类型</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">a    <span class="number">9</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">b    <span class="number">8</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">c    <span class="number">7</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">dtype: int64</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[a &gt; a.median()]   <span class="comment"># 把所有大于中位数的元素输出</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">a    <span class="number">9</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">b    <span class="number">8</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">dtype: int64</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.exp(a)   <span class="comment"># </span></span></pre></td></tr><tr><td class="code"><pre><span class="line">a    <span class="number">8103.083928</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">b    <span class="number">2980.957987</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">c    <span class="number">1096.633158</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">d     <span class="number">403.428793</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">dtype: float64</span></pre></td></tr></table></figure>

</details>  


<h4 id="Series的-in-操作与Python中的字典类似"><a href="#Series的-in-操作与Python中的字典类似" class="headerlink" title="Series的 in 操作与Python中的字典类似"></a>Series的 in 操作与Python中的字典类似</h4><p><code>val in Series</code> 判断的是Series是否存在索引val 而不是值val</p>
<details>
  <summary> Series in 栗子 </summary>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span></pre></td></tr><tr><td class="code"><pre><span class="line">a    <span class="number">9</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">b    <span class="number">8</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">c    <span class="number">7</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">d    <span class="number">6</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">dtype: int64</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'c'</span> <span class="keyword">in</span> a</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="literal">True</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">9</span> <span class="keyword">in</span> a</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="literal">False</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.get(<span class="string">"f"</span>, <span class="number">100</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">100</span></span></pre></td></tr></table></figure>

</details>  


<h4 id="Series类型对齐操作"><a href="#Series类型对齐操作" class="headerlink" title="Series类型对齐操作"></a>Series类型对齐操作</h4><p>Series类型在运算忠会自动对其不同索引的数据<br>两个Series类型相加时  </p>
<ul>
<li>返回结果包含了两个Series对象的所有的并集   </li>
<li>只有索引相同才会进行运算 索引不同的不进行运算 返回NaN  </li>
</ul>
<details>    
  <summary> Series 对齐栗子 </summary>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">"cde"</span>])</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = pd.Series([<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>], [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">"abcd"</span>])</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span></pre></td></tr><tr><td class="code"><pre><span class="line">c    <span class="number">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">d    <span class="number">2</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">e    <span class="number">3</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">dtype: int64</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span></pre></td></tr><tr><td class="code"><pre><span class="line">a    <span class="number">9</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">b    <span class="number">8</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">c    <span class="number">7</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">d    <span class="number">6</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">dtype: int64</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a + b   <span class="comment"># 有一个对象中没有值 就返回空</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">a    NaN</span></pre></td></tr><tr><td class="code"><pre><span class="line">b    NaN</span></pre></td></tr><tr><td class="code"><pre><span class="line">c    <span class="number">8.0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">d    <span class="number">8.0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">e    NaN</span></pre></td></tr><tr><td class="code"><pre><span class="line">dtype: float64</span></pre></td></tr></table></figure>

</details>  


<h4 id="Series类型的name属性"><a href="#Series类型的name属性" class="headerlink" title="Series类型的name属性"></a>Series类型的name属性</h4><p>Series对象和索引都可以有一个名字,  存储在属性.name中。 </p>
<details>
  <summary> Series.name 栗子 </summary>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">"cde"</span>])</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.name <span class="comment"># None</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.name = <span class="string">"我家的Series"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.index.name = <span class="string">"这是你家的索引"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span></pre></td></tr><tr><td class="code"><pre><span class="line">这是你家的索引</span></pre></td></tr><tr><td class="code"><pre><span class="line">c    <span class="number">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">d    <span class="number">2</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">e    <span class="number">3</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">Name: 我家的Series, dtype: int64</span></pre></td></tr></table></figure>

</details>  


<h4 id="Series类型的修改"><a href="#Series类型的修改" class="headerlink" title="Series类型的修改"></a>Series类型的修改</h4><p>Series对象可以随时修改并立即生效<br>可以同时为多个已存在的索引赋值  </p>
<details>
  <summary> 举个栗子 </summary>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>], [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">"abcd"</span>])</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span></pre></td></tr><tr><td class="code"><pre><span class="line">a    <span class="number">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">b    <span class="number">2</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">c    <span class="number">3</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">d    <span class="number">4</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">dtype: int64</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="string">"a"</span>] = <span class="number">11</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span></pre></td></tr><tr><td class="code"><pre><span class="line">a    <span class="number">11</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">b     <span class="number">2</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">c     <span class="number">3</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">d     <span class="number">4</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">dtype: int64</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="string">'c'</span>,<span class="string">'d'</span>] = <span class="number">99</span> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span></pre></td></tr><tr><td class="code"><pre><span class="line">a    <span class="number">11</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">b     <span class="number">2</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">c    <span class="number">99</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">d    <span class="number">99</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">dtype: int64</span></pre></td></tr></table></figure>

</details>  


<hr>
<h2 id="Pandas的DataFrame类型"><a href="#Pandas的DataFrame类型" class="headerlink" title="Pandas的DataFrame类型"></a>Pandas的DataFrame类型</h2><p>DataFrame类型由共用相同索引的一组列组成。<br>DateFrame是一个表格型的数据类型, 每列值类型可以不同。<br>DateFrame既有行索引、也有列索引。<br>DateFrame常用语表达二维数据，但也可以表达多维数据。<br>DateFrame类型可以由如下类型创建:</p>
<ul>
<li>二维ndarray对象</li>
<li>由一维ndarray、列表、字典、元祖、或Series构成的字典</li>
<li>Series类型</li>
<li>其他的DataFrame类型</li>
</ul>
<details>
  <summary> 从二维ndarray对象创建DataFrame </summary>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = pd.DataFrame(np.arange(<span class="number">10</span>,<span class="number">20</span>).reshape(<span class="number">2</span>,<span class="number">5</span>))</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="number">0</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span>   <span class="number">4</span>   <span class="comment"># 行索引</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">0</span>  <span class="number">10</span>  <span class="number">11</span>  <span class="number">12</span>  <span class="number">13</span>  <span class="number">14</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">1</span>  <span class="number">15</span>  <span class="number">16</span>  <span class="number">17</span>  <span class="number">18</span>  <span class="number">19</span></span></pre></td></tr></table></figure>

</details>  


<details>
  <summary> 自动补齐 </summary>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>dt = &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">true<span class="string">"one"</span>:pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">"abc"</span>]),</span></pre></td></tr><tr><td class="code"><pre><span class="line">true<span class="string">"two"</span>:pd.Series([<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>], [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">"abcd"</span>]),</span></pre></td></tr><tr><td class="code"><pre><span class="line">true&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = pd.DataFrame(dt)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d  </span></pre></td></tr><tr><td class="code"><pre><span class="line">   one  two</span></pre></td></tr><tr><td class="code"><pre><span class="line">a  <span class="number">1.0</span>    <span class="number">9</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">b  <span class="number">2.0</span>    <span class="number">8</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">c  <span class="number">3.0</span>    <span class="number">7</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">d  NaN    <span class="number">6</span>     <span class="comment"># one 缺少d 自动补齐</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment"># 数据根据行列索引自动补齐</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.DataFrame(dt, index=[x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">"bcd"</span>], columns=[<span class="string">"two"</span>, <span class="string">"three"</span>])</span></pre></td></tr><tr><td class="code"><pre><span class="line">   two three</span></pre></td></tr><tr><td class="code"><pre><span class="line">b    <span class="number">8</span>   NaN</span></pre></td></tr><tr><td class="code"><pre><span class="line">c    <span class="number">7</span>   NaN</span></pre></td></tr><tr><td class="code"><pre><span class="line">d    <span class="number">6</span>   NaN</span></pre></td></tr></table></figure>

</details>  


<details>
  <summary> 从列表类型的字典创建 </summary>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>dl = &#123;<span class="string">"one"</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>], <span class="string">"two"</span>:[<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>]&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = pd.DataFrame(dl, index = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">"zxcv"</span>])</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span></pre></td></tr><tr><td class="code"><pre><span class="line">   one  two</span></pre></td></tr><tr><td class="code"><pre><span class="line">z    <span class="number">1</span>    <span class="number">9</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">x    <span class="number">2</span>    <span class="number">8</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">c    <span class="number">3</span>    <span class="number">7</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">v    <span class="number">4</span>    <span class="number">6</span></span></pre></td></tr></table></figure>

</details>  


<details>
  <summary> DataFrame取下标 </summary>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 首先我没有数据 先模拟出一组数据</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>dl = &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">true<span class="string">"城市"</span>:[<span class="string">'北京'</span>,<span class="string">"上海"</span>,<span class="string">"广州"</span>,<span class="string">"深圳"</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">true<span class="string">"环比"</span>:[<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">true<span class="string">"同比"</span>:[<span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">true<span class="string">"定基"</span>:[<span class="string">'9'</span>, <span class="string">'10'</span>, <span class="string">'11'</span>, <span class="string">'12'</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line">true&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = pd.DataFrame(dl, index = [<span class="string">'c1'</span>, <span class="string">'c2'</span>, <span class="string">'c3'</span>, <span class="string">'c4'</span>])</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span></pre></td></tr><tr><td class="code"><pre><span class="line">    城市 环比 同比  定基</span></pre></td></tr><tr><td class="code"><pre><span class="line">c1  北京  <span class="number">1</span>  <span class="number">5</span>   <span class="number">9</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">c2  上海  <span class="number">2</span>  <span class="number">6</span>  <span class="number">10</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">c3  广州  <span class="number">3</span>  <span class="number">7</span>  <span class="number">11</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">c4  深圳  <span class="number">4</span>  <span class="number">8</span>  <span class="number">12</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">"环比"</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line">c1    <span class="number">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">c2    <span class="number">2</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">c3    <span class="number">3</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">c4    <span class="number">4</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">Name: 环比, dtype: object</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">"同比"</span>][<span class="string">"c2"</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">'6'</span></span></pre></td></tr></table></figure>

</details>  


<hr>
<h2 id="Pandas库的数据类型操作"><a href="#Pandas库的数据类型操作" class="headerlink" title="Pandas库的数据类型操作"></a>Pandas库的数据类型操作</h2><p>如何改变Series和DataFrame对象？</p>
<ul>
<li>增加或重排 : 重新索引</li>
<li>删除 : drop</li>
</ul>
<h4 id="重新索引"><a href="#重新索引" class="headerlink" title="重新索引"></a>重新索引</h4><p>.reindex(index=None, columns=None, …)<br>能够改变或重排Series和DataFrame索引<br>返回新对象 不改变原数据    </p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">index, columns</td>
<td align="left">新的行列自定义索引</td>
</tr>
<tr>
<td align="left">fill_value</td>
<td align="left">重新索引中, 用于填充缺失位置的值</td>
</tr>
<tr>
<td align="left">method</td>
<td align="left">填充方法, ffill当前值向前填充, bfill向后填充</td>
</tr>
<tr>
<td align="left">limit</td>
<td align="left">最大填充量</td>
</tr>
<tr>
<td align="left">copy</td>
<td align="left">默认True, 生成新的对象, False时, 新旧相等不复制</td>
</tr>
</tbody></table>
<details>
  <summary> reindex栗子 </summary>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 拿前面的栗子</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span></pre></td></tr><tr><td class="code"><pre><span class="line">    城市 环比 同比  定基</span></pre></td></tr><tr><td class="code"><pre><span class="line">c1  北京  <span class="number">1</span>  <span class="number">5</span>   <span class="number">9</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">c2  上海  <span class="number">2</span>  <span class="number">6</span>  <span class="number">10</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">c3  广州  <span class="number">3</span>  <span class="number">7</span>  <span class="number">11</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">c4  深圳  <span class="number">4</span>  <span class="number">8</span>  <span class="number">12</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 注意 改索引是没有数据的</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.reindex(index=[x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">"abcd"</span>])</span></pre></td></tr><tr><td class="code"><pre><span class="line">    城市   环比   同比   定基</span></pre></td></tr><tr><td class="code"><pre><span class="line">a  NaN  NaN  NaN  NaN</span></pre></td></tr><tr><td class="code"><pre><span class="line">b  NaN  NaN  NaN  NaN</span></pre></td></tr><tr><td class="code"><pre><span class="line">c  NaN  NaN  NaN  NaN</span></pre></td></tr><tr><td class="code"><pre><span class="line">d  NaN  NaN  NaN  NaN</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 改变列索引的顺序</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.reindex(index=[<span class="string">'c1'</span>, <span class="string">'c2'</span>, <span class="string">'c3'</span>, <span class="string">'c4'</span>][::<span class="number">-1</span>])</span></pre></td></tr><tr><td class="code"><pre><span class="line">    城市 环比 同比  定基</span></pre></td></tr><tr><td class="code"><pre><span class="line">c4  深圳  <span class="number">4</span>  <span class="number">8</span>  <span class="number">12</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">c3  广州  <span class="number">3</span>  <span class="number">7</span>  <span class="number">11</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">c2  上海  <span class="number">2</span>  <span class="number">6</span>  <span class="number">10</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">c1  北京  <span class="number">1</span>  <span class="number">5</span>   <span class="number">9</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 改变行索引顺序</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.reindex(columns=[<span class="string">"城市"</span>,<span class="string">"定基"</span>,<span class="string">"环比"</span>,<span class="string">"同比"</span>])</span></pre></td></tr><tr><td class="code"><pre><span class="line">    城市  定基 环比 同比</span></pre></td></tr><tr><td class="code"><pre><span class="line">c1  北京   <span class="number">9</span>  <span class="number">1</span>  <span class="number">5</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">c2  上海  <span class="number">10</span>  <span class="number">2</span>  <span class="number">6</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">c3  广州  <span class="number">11</span>  <span class="number">3</span>  <span class="number">7</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">c4  深圳  <span class="number">12</span>  <span class="number">4</span>  <span class="number">8</span></span></pre></td></tr></table></figure>

</details>  


<details>
  <summary> 增加一列数据 </summary>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>newd = d.columns.insert(<span class="number">4</span>,<span class="string">"新增"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>newd</span></pre></td></tr><tr><td class="code"><pre><span class="line">Index([<span class="string">'城市'</span>, <span class="string">'环比'</span>, <span class="string">'同比'</span>, <span class="string">'定基'</span>, <span class="string">'新增'</span>], dtype=<span class="string">'object'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>newd = d.reindex(columns=newd, fill_value = <span class="number">200</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>newd</span></pre></td></tr><tr><td class="code"><pre><span class="line">    城市 环比 同比  定基   新增</span></pre></td></tr><tr><td class="code"><pre><span class="line">c1  北京  <span class="number">1</span>  <span class="number">5</span>   <span class="number">9</span>  <span class="number">200</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">c2  上海  <span class="number">2</span>  <span class="number">6</span>  <span class="number">10</span>  <span class="number">200</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">c3  广州  <span class="number">3</span>  <span class="number">7</span>  <span class="number">11</span>  <span class="number">200</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">c4  深圳  <span class="number">4</span>  <span class="number">8</span>  <span class="number">12</span>  <span class="number">200</span></span></pre></td></tr></table></figure>

</details>  


<h4 id="索引类型"><a href="#索引类型" class="headerlink" title="索引类型"></a>索引类型</h4><p>Series和DataFrame的索引是Index类型<br>Index类型是不可变类型  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.index</span></pre></td></tr><tr><td class="code"><pre><span class="line">Index([<span class="string">'c1'</span>, <span class="string">'c2'</span>, <span class="string">'c3'</span>, <span class="string">'c4'</span>], dtype=<span class="string">'object'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.columns</span></pre></td></tr><tr><td class="code"><pre><span class="line">Index([<span class="string">'城市'</span>, <span class="string">'环比'</span>, <span class="string">'同比'</span>, <span class="string">'定基'</span>], dtype=<span class="string">'object'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(d.index)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">pandas</span>.<span class="title">core</span>.<span class="title">indexes</span>.<span class="title">base</span>.<span class="title">Index</span>'&gt;</span></span></pre></td></tr></table></figure>

<p>索引类型的常用方法</p>
<table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">.append(idx)</td>
<td align="left">连接另一个Index对象, 产生新的Index对象</td>
</tr>
<tr>
<td align="left">.diff(idx)</td>
<td align="left">计算差集, 产生新的Index对象</td>
</tr>
<tr>
<td align="left">.intersection(idx)</td>
<td align="left">计算交集</td>
</tr>
<tr>
<td align="left">.union(idx)</td>
<td align="left">计算并集</td>
</tr>
<tr>
<td align="left">.delete(loc)</td>
<td align="left">删除loc位置处的元素</td>
</tr>
<tr>
<td align="left">.insert(loc, e)</td>
<td align="left">在loc位置增加一个元素 e</td>
</tr>
</tbody></table>
<details>
  <summary> 举个栗子 </summary>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ni = d.index.insert(<span class="number">4</span>, <span class="string">"c5"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>nc = d.columns.delete(<span class="number">2</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ni</span></pre></td></tr><tr><td class="code"><pre><span class="line">Index([<span class="string">'c1'</span>, <span class="string">'c2'</span>, <span class="string">'c3'</span>, <span class="string">'c4'</span>, <span class="string">'c5'</span>], dtype=<span class="string">'object'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>nc</span></pre></td></tr><tr><td class="code"><pre><span class="line">Index([<span class="string">'城市'</span>, <span class="string">'环比'</span>, <span class="string">'定基'</span>], dtype=<span class="string">'object'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>nd = d.reindex(index=ni, columns=nc)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>nd</span></pre></td></tr><tr><td class="code"><pre><span class="line">     城市   环比   定基</span></pre></td></tr><tr><td class="code"><pre><span class="line">c1   北京    <span class="number">1</span>    <span class="number">9</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">c2   上海    <span class="number">2</span>   <span class="number">10</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">c3   广州    <span class="number">3</span>   <span class="number">11</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">c4   深圳    <span class="number">4</span>   <span class="number">12</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">c5  NaN  NaN  NaN</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"> <span class="comment"># 挖个坑</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>nd = d.reindex(index=ni, columns=nc, method=<span class="string">'bfill'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ...</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">"index must be monotonic increasing or decreasing"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">ValueError: index must be monotonic increasing <span class="keyword">or</span> decreasing</span></pre></td></tr></table></figure>

</details>  


<h4 id="删除指定索引对象"><a href="#删除指定索引对象" class="headerlink" title="删除指定索引对象"></a>删除指定索引对象</h4><p>.drop() 能够删除Series和DataFrame指定行或列<br>注意 返回的是新对象 函数不改变原数据</p>
<details>
  <summary> 举个栗子 </summary>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = pd.Series([<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>],[x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">"abcd"</span>])</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span></pre></td></tr><tr><td class="code"><pre><span class="line">a    <span class="number">9</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">b    <span class="number">8</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">c    <span class="number">7</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">d    <span class="number">6</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">dtype: int64</span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.drop([<span class="string">'b'</span>,<span class="string">'c'</span>])</span></pre></td></tr><tr><td class="code"><pre><span class="line">a    <span class="number">9</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">d    <span class="number">6</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">dtype: int64</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span></pre></td></tr><tr><td class="code"><pre><span class="line">    城市 环比 同比  定基</span></pre></td></tr><tr><td class="code"><pre><span class="line">c1  北京  <span class="number">1</span>  <span class="number">5</span>   <span class="number">9</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">c2  上海  <span class="number">2</span>  <span class="number">6</span>  <span class="number">10</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">c3  广州  <span class="number">3</span>  <span class="number">7</span>  <span class="number">11</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">c4  深圳  <span class="number">4</span>  <span class="number">8</span>  <span class="number">12</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.drop(<span class="string">'c4'</span>)    <span class="comment"># axis 默认为0 可以不指定</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    城市 环比 同比  定基</span></pre></td></tr><tr><td class="code"><pre><span class="line">c1  北京  <span class="number">1</span>  <span class="number">5</span>   <span class="number">9</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">c2  上海  <span class="number">2</span>  <span class="number">6</span>  <span class="number">10</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">c3  广州  <span class="number">3</span>  <span class="number">7</span>  <span class="number">11</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.drop(<span class="string">"环比"</span>,axis = <span class="number">1</span>) <span class="comment"># axis = 1为操作列索引</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    城市 同比  定基</span></pre></td></tr><tr><td class="code"><pre><span class="line">c1  北京  <span class="number">5</span>   <span class="number">9</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">c2  上海  <span class="number">6</span>  <span class="number">10</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">c3  广州  <span class="number">7</span>  <span class="number">11</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">c4  深圳  <span class="number">8</span>  <span class="number">12</span></span></pre></td></tr></table></figure>

</details>  


<hr>
<h2 id="Pandas库的数据类型运算"><a href="#Pandas库的数据类型运算" class="headerlink" title="Pandas库的数据类型运算"></a>Pandas库的数据类型运算</h2><h4 id="算术运算法则"><a href="#算术运算法则" class="headerlink" title="算术运算法则"></a>算术运算法则</h4><ul>
<li>算术运算根据行列索引, 补齐后运算, 默认产生浮点数。 </li>
<li>补齐时缺项填充 NaN (空 None)</li>
<li>二维和一维、一维和零维间为广播运算</li>
<li>采用 +-*/ 符号进行的二元运算产生新的对象</li>
</ul>
<details>
  <summary> 个数不同运算栗子 </summary>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = pd.DataFrame(np.arange(<span class="number">12</span>).reshape(<span class="number">3</span>,<span class="number">4</span>))</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="number">0</span>  <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">0</span>  <span class="number">0</span>  <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">1</span>  <span class="number">4</span>  <span class="number">5</span>   <span class="number">6</span>   <span class="number">7</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">2</span>  <span class="number">8</span>  <span class="number">9</span>  <span class="number">10</span>  <span class="number">11</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = pd.DataFrame(np.arange(<span class="number">20</span>).reshape(<span class="number">4</span>,<span class="number">5</span>))</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="number">0</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span>   <span class="number">4</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">0</span>   <span class="number">0</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span>   <span class="number">4</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">1</span>   <span class="number">5</span>   <span class="number">6</span>   <span class="number">7</span>   <span class="number">8</span>   <span class="number">9</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">2</span>  <span class="number">10</span>  <span class="number">11</span>  <span class="number">12</span>  <span class="number">13</span>  <span class="number">14</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">3</span>  <span class="number">15</span>  <span class="number">16</span>  <span class="number">17</span>  <span class="number">18</span>  <span class="number">19</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 自动补齐 缺项填充NaN</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a + b</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="number">0</span>     <span class="number">1</span>     <span class="number">2</span>     <span class="number">3</span>   <span class="number">4</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">0</span>   <span class="number">0.0</span>   <span class="number">2.0</span>   <span class="number">4.0</span>   <span class="number">6.0</span> NaN</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">1</span>   <span class="number">9.0</span>  <span class="number">11.0</span>  <span class="number">13.0</span>  <span class="number">15.0</span> NaN</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">2</span>  <span class="number">18.0</span>  <span class="number">20.0</span>  <span class="number">22.0</span>  <span class="number">24.0</span> NaN</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">3</span>   NaN   NaN   NaN   NaN NaN</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a * b</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="number">0</span>     <span class="number">1</span>      <span class="number">2</span>      <span class="number">3</span>   <span class="number">4</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">0</span>   <span class="number">0.0</span>   <span class="number">1.0</span>    <span class="number">4.0</span>    <span class="number">9.0</span> NaN</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">1</span>  <span class="number">20.0</span>  <span class="number">30.0</span>   <span class="number">42.0</span>   <span class="number">56.0</span> NaN</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">2</span>  <span class="number">80.0</span>  <span class="number">99.0</span>  <span class="number">120.0</span>  <span class="number">143.0</span> NaN</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">3</span>   NaN   NaN    NaN    NaN NaN</span></pre></td></tr></table></figure>

</details>  


<p>方法形式的算数运算</p>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">.add(d, **argws)</td>
<td align="center">类型间加法运算, 可选参数</td>
</tr>
<tr>
<td align="center">.sub(d, **argws)</td>
<td align="center">类型间减法运算, 可选参数</td>
</tr>
<tr>
<td align="center">.mul(d, **argws)</td>
<td align="center">类型间乘法运算, 可选参数</td>
</tr>
<tr>
<td align="center">.div(d, **argws)</td>
<td align="center">类型间除法运算, 可选参数</td>
</tr>
</tbody></table>
<details>
  <summary> 方法形式运算栗子 </summary>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="number">0</span>  <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">0</span>  <span class="number">0</span>  <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">1</span>  <span class="number">4</span>  <span class="number">5</span>   <span class="number">6</span>   <span class="number">7</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">2</span>  <span class="number">8</span>  <span class="number">9</span>  <span class="number">10</span>  <span class="number">11</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="number">0</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span>   <span class="number">4</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">0</span>   <span class="number">0</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span>   <span class="number">4</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">1</span>   <span class="number">5</span>   <span class="number">6</span>   <span class="number">7</span>   <span class="number">8</span>   <span class="number">9</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">2</span>  <span class="number">10</span>  <span class="number">11</span>  <span class="number">12</span>  <span class="number">13</span>  <span class="number">14</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">3</span>  <span class="number">15</span>  <span class="number">16</span>  <span class="number">17</span>  <span class="number">18</span>  <span class="number">19</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"> <span class="comment"># a跟b之间 元素缺少的部分 使用fill_value填充</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.add(a, fill_value = <span class="number">100</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="number">0</span>      <span class="number">1</span>      <span class="number">2</span>      <span class="number">3</span>      <span class="number">4</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">0</span>    <span class="number">0.0</span>    <span class="number">2.0</span>    <span class="number">4.0</span>    <span class="number">6.0</span>  <span class="number">104.0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">1</span>    <span class="number">9.0</span>   <span class="number">11.0</span>   <span class="number">13.0</span>   <span class="number">15.0</span>  <span class="number">109.0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">2</span>   <span class="number">18.0</span>   <span class="number">20.0</span>   <span class="number">22.0</span>   <span class="number">24.0</span>  <span class="number">114.0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">3</span>  <span class="number">115.0</span>  <span class="number">116.0</span>  <span class="number">117.0</span>  <span class="number">118.0</span>  <span class="number">119.0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.mul(b, fill_value = <span class="number">0</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="number">0</span>     <span class="number">1</span>      <span class="number">2</span>      <span class="number">3</span>    <span class="number">4</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">0</span>   <span class="number">0.0</span>   <span class="number">1.0</span>    <span class="number">4.0</span>    <span class="number">9.0</span>  <span class="number">0.0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">1</span>  <span class="number">20.0</span>  <span class="number">30.0</span>   <span class="number">42.0</span>   <span class="number">56.0</span>  <span class="number">0.0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">2</span>  <span class="number">80.0</span>  <span class="number">99.0</span>  <span class="number">120.0</span>  <span class="number">143.0</span>  <span class="number">0.0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">3</span>   <span class="number">0.0</span>   <span class="number">0.0</span>    <span class="number">0.0</span>    <span class="number">0.0</span>  <span class="number">0.0</span></span></pre></td></tr></table></figure>

</details>  


<details>
  <summary> 不同维度之间的广播运算 </summary>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = pd.DataFrame(np.arange(<span class="number">20</span>).reshape(<span class="number">4</span>,<span class="number">5</span>))</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="number">0</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span>   <span class="number">4</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">0</span>   <span class="number">0</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span>   <span class="number">4</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">1</span>   <span class="number">5</span>   <span class="number">6</span>   <span class="number">7</span>   <span class="number">8</span>   <span class="number">9</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">2</span>  <span class="number">10</span>  <span class="number">11</span>  <span class="number">12</span>  <span class="number">13</span>  <span class="number">14</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">3</span>  <span class="number">15</span>  <span class="number">16</span>  <span class="number">17</span>  <span class="number">18</span>  <span class="number">19</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = pd.Series(np.arange(<span class="number">4</span>))</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">0</span>    <span class="number">0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">1</span>    <span class="number">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">2</span>    <span class="number">2</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">3</span>    <span class="number">3</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">dtype: int32</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"> <span class="comment"># c中的每一个元素都与10做减法 这样的操作叫广播 低维度元素或作用到高纬度的每一个元素</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>c - <span class="number">10</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">0</span>   <span class="number">-10</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">1</span>    <span class="number">-9</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">2</span>    <span class="number">-8</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">3</span>    <span class="number">-7</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">dtype: int32</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"> <span class="comment"># b中的每一行 都与c进行运算</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> <span class="comment"># 二维和一维数据运算时 </span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> <span class="comment"># 一维Series默认在轴1参与运算</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b - c</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="number">0</span>     <span class="number">1</span>     <span class="number">2</span>     <span class="number">3</span>   <span class="number">4</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">0</span>   <span class="number">0.0</span>   <span class="number">0.0</span>   <span class="number">0.0</span>   <span class="number">0.0</span> NaN</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">1</span>   <span class="number">5.0</span>   <span class="number">5.0</span>   <span class="number">5.0</span>   <span class="number">5.0</span> NaN</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">2</span>  <span class="number">10.0</span>  <span class="number">10.0</span>  <span class="number">10.0</span>  <span class="number">10.0</span> NaN</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">3</span>  <span class="number">15.0</span>  <span class="number">15.0</span>  <span class="number">15.0</span>  <span class="number">15.0</span> NaN</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"> <span class="comment"># 如果需要0轴运算 需要使用方法 + 参数axis = 0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.sub(c, axis = <span class="number">0</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="number">0</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span>   <span class="number">4</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">0</span>   <span class="number">0</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span>   <span class="number">4</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">1</span>   <span class="number">4</span>   <span class="number">5</span>   <span class="number">6</span>   <span class="number">7</span>   <span class="number">8</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">2</span>   <span class="number">8</span>   <span class="number">9</span>  <span class="number">10</span>  <span class="number">11</span>  <span class="number">12</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">3</span>  <span class="number">12</span>  <span class="number">13</span>  <span class="number">14</span>  <span class="number">15</span>  <span class="number">16</span> </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"> <span class="comment"># 0轴参与运算 </span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.sub(c, axis = <span class="number">0</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="number">0</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span>   <span class="number">4</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">0</span>   <span class="number">0</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span>   <span class="number">4</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">1</span>   <span class="number">4</span>   <span class="number">5</span>   <span class="number">6</span>   <span class="number">7</span>   <span class="number">8</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">2</span>   <span class="number">8</span>   <span class="number">9</span>  <span class="number">10</span>  <span class="number">11</span>  <span class="number">12</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">3</span>  <span class="number">12</span>  <span class="number">13</span>  <span class="number">14</span>  <span class="number">15</span>  <span class="number">16</span></span></pre></td></tr></table></figure>

</details>  


<h4 id="比较运算法则"><a href="#比较运算法则" class="headerlink" title="比较运算法则"></a>比较运算法则</h4><p>比较运算之鞥呢比较相同索引的元素, 不进行补齐。<br>二维和一维、一维和0维之间为广播运算。<br>采用比较运算符号进行的二元运算产生布尔对象。  </p>
<ul>
<li>相同纬度运算 要求尺寸一致。</li>
<li>不同维度, 广播运算, 默认在1轴</li>
</ul>
<details>
  <summary> 相同纬度比较运算栗子 </summary>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = pd.DataFrame(np.arange(<span class="number">12</span>).reshape(<span class="number">3</span>,<span class="number">4</span>))</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="number">0</span>  <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">0</span>  <span class="number">0</span>  <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">1</span>  <span class="number">4</span>  <span class="number">5</span>   <span class="number">6</span>   <span class="number">7</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">2</span>  <span class="number">8</span>  <span class="number">9</span>  <span class="number">10</span>  <span class="number">11</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = pd.DataFrame(np.arange(<span class="number">12</span>,<span class="number">0</span>,<span class="number">-1</span>).reshape(<span class="number">3</span>,<span class="number">4</span>))</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="number">0</span>   <span class="number">1</span>   <span class="number">2</span>  <span class="number">3</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">0</span>  <span class="number">12</span>  <span class="number">11</span>  <span class="number">10</span>  <span class="number">9</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">1</span>   <span class="number">8</span>   <span class="number">7</span>   <span class="number">6</span>  <span class="number">5</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">2</span>   <span class="number">4</span>   <span class="number">3</span>   <span class="number">2</span>  <span class="number">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a &gt; d</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="number">0</span>      <span class="number">1</span>      <span class="number">2</span>      <span class="number">3</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">0</span>  <span class="literal">False</span>  <span class="literal">False</span>  <span class="literal">False</span>  <span class="literal">False</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">1</span>  <span class="literal">False</span>  <span class="literal">False</span>  <span class="literal">False</span>   <span class="literal">True</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">2</span>   <span class="literal">True</span>   <span class="literal">True</span>   <span class="literal">True</span>   <span class="literal">True</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a == d</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="number">0</span>      <span class="number">1</span>      <span class="number">2</span>      <span class="number">3</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">0</span>  <span class="literal">False</span>  <span class="literal">False</span>  <span class="literal">False</span>  <span class="literal">False</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">1</span>  <span class="literal">False</span>  <span class="literal">False</span>   <span class="literal">True</span>  <span class="literal">False</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">2</span>  <span class="literal">False</span>  <span class="literal">False</span>  <span class="literal">False</span>  <span class="literal">False</span></span></pre></td></tr></table></figure>

</details>  


<details>
  <summary> 不同纬度比较运算栗子 </summary>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = pd.DataFrame(np.arange(<span class="number">12</span>).reshape(<span class="number">3</span>,<span class="number">4</span>))</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="number">0</span>  <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">0</span>  <span class="number">0</span>  <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">1</span>  <span class="number">4</span>  <span class="number">5</span>   <span class="number">6</span>   <span class="number">7</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">2</span>  <span class="number">8</span>  <span class="number">9</span>  <span class="number">10</span>  <span class="number">11</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = pd.Series(np.arange(<span class="number">4</span>))</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">0</span>    <span class="number">0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">1</span>    <span class="number">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">2</span>    <span class="number">2</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">3</span>    <span class="number">3</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">dtype: int32</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a &gt; c</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="number">0</span>      <span class="number">1</span>      <span class="number">2</span>      <span class="number">3</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">0</span>  <span class="literal">False</span>  <span class="literal">False</span>  <span class="literal">False</span>  <span class="literal">False</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">1</span>   <span class="literal">True</span>   <span class="literal">True</span>   <span class="literal">True</span>   <span class="literal">True</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">2</span>   <span class="literal">True</span>   <span class="literal">True</span>   <span class="literal">True</span>   <span class="literal">True</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>c &gt; <span class="number">0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">0</span>    <span class="literal">False</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">1</span>     <span class="literal">True</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">2</span>     <span class="literal">True</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">3</span>     <span class="literal">True</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">dtype: bool</span></pre></td></tr></table></figure>

</details>  


<hr>
<h2 id="数据的排序"><a href="#数据的排序" class="headerlink" title="数据的排序"></a>数据的排序</h2><p>对一组数据的理解<br>一组数据表达一个或多个含义<br>摘要: 有损地踢出数据特征的过程</p>
<ul>
<li>基本统计(含排序)</li>
<li>分布/累计统计</li>
<li>数据特征 相关性、周期性等</li>
<li>数据挖掘(形成知识)</li>
</ul>
<h4 id="对索引排序"><a href="#对索引排序" class="headerlink" title="对索引排序"></a>对索引排序</h4><p>sort_index()方法在指定的轴上根据索引进行排序 默认升序。<br>sort_values()方法在指定的轴上根据数据进行排序 默认升序</p>
<p>.sort_index(axis = 0, ascending=True)<br>Series.sort_values(by, axis=0, ascending=True)<br>DataFrame.sort_values(by, axis=0, ascending=True)</p>
<ul>
<li>by : axis轴上的某个索引或索引列表</li>
<li>ascending : 为True时 递增排序</li>
</ul>
<details>
  <summary> 对DataFrame对象的索引排序栗子 </summary>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = pd.DataFrame(np.arange(<span class="number">20</span>).reshape(<span class="number">4</span>,<span class="number">5</span>),index = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">"cadb"</span>])</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="number">0</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span>   <span class="number">4</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">c   <span class="number">0</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span>   <span class="number">4</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">a   <span class="number">5</span>   <span class="number">6</span>   <span class="number">7</span>   <span class="number">8</span>   <span class="number">9</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">d  <span class="number">10</span>  <span class="number">11</span>  <span class="number">12</span>  <span class="number">13</span>  <span class="number">14</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">b  <span class="number">15</span>  <span class="number">16</span>  <span class="number">17</span>  <span class="number">18</span>  <span class="number">19</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.sort_index()</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="number">0</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span>   <span class="number">4</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">a   <span class="number">5</span>   <span class="number">6</span>   <span class="number">7</span>   <span class="number">8</span>   <span class="number">9</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">b  <span class="number">15</span>  <span class="number">16</span>  <span class="number">17</span>  <span class="number">18</span>  <span class="number">19</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">c   <span class="number">0</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span>   <span class="number">4</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">d  <span class="number">10</span>  <span class="number">11</span>  <span class="number">12</span>  <span class="number">13</span>  <span class="number">14</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.sort_index(ascending=<span class="literal">False</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="number">0</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span>   <span class="number">4</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">d  <span class="number">10</span>  <span class="number">11</span>  <span class="number">12</span>  <span class="number">13</span>  <span class="number">14</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">c   <span class="number">0</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span>   <span class="number">4</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">b  <span class="number">15</span>  <span class="number">16</span>  <span class="number">17</span>  <span class="number">18</span>  <span class="number">19</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">a   <span class="number">5</span>   <span class="number">6</span>   <span class="number">7</span>   <span class="number">8</span>   <span class="number">9</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.sort_index(axis=<span class="number">1</span>, ascending=<span class="literal">False</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="number">4</span>   <span class="number">3</span>   <span class="number">2</span>   <span class="number">1</span>   <span class="number">0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">c   <span class="number">4</span>   <span class="number">3</span>   <span class="number">2</span>   <span class="number">1</span>   <span class="number">0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">a   <span class="number">9</span>   <span class="number">8</span>   <span class="number">7</span>   <span class="number">6</span>   <span class="number">5</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">d  <span class="number">14</span>  <span class="number">13</span>  <span class="number">12</span>  <span class="number">11</span>  <span class="number">10</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">b  <span class="number">19</span>  <span class="number">18</span>  <span class="number">17</span>  <span class="number">16</span>  <span class="number">15</span></span></pre></td></tr></table></figure>

</details>  

<details>
  <summary> 对DateFrame对象的数据排序栗子 </summary>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = pd.DataFrame(np.arange(<span class="number">20</span>).reshape(<span class="number">4</span>,<span class="number">5</span>),index = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">"cadb"</span>])</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="number">0</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span>   <span class="number">4</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">c   <span class="number">0</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span>   <span class="number">4</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">a   <span class="number">5</span>   <span class="number">6</span>   <span class="number">7</span>   <span class="number">8</span>   <span class="number">9</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">d  <span class="number">10</span>  <span class="number">11</span>  <span class="number">12</span>  <span class="number">13</span>  <span class="number">14</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">b  <span class="number">15</span>  <span class="number">16</span>  <span class="number">17</span>  <span class="number">18</span>  <span class="number">19</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = b.sort_values(<span class="number">2</span>, ascending = <span class="literal">False</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="number">0</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span>   <span class="number">4</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">b  <span class="number">15</span>  <span class="number">16</span>  <span class="number">17</span>  <span class="number">18</span>  <span class="number">19</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">d  <span class="number">10</span>  <span class="number">11</span>  <span class="number">12</span>  <span class="number">13</span>  <span class="number">14</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">a   <span class="number">5</span>   <span class="number">6</span>   <span class="number">7</span>   <span class="number">8</span>   <span class="number">9</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">c   <span class="number">0</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span>   <span class="number">4</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.sort_values(<span class="string">'a'</span>, axis = <span class="number">1</span>, ascending = <span class="literal">False</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="number">4</span>   <span class="number">3</span>   <span class="number">2</span>   <span class="number">1</span>   <span class="number">0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">b  <span class="number">19</span>  <span class="number">18</span>  <span class="number">17</span>  <span class="number">16</span>  <span class="number">15</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">d  <span class="number">14</span>  <span class="number">13</span>  <span class="number">12</span>  <span class="number">11</span>  <span class="number">10</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">a   <span class="number">9</span>   <span class="number">8</span>   <span class="number">7</span>   <span class="number">6</span>   <span class="number">5</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">c   <span class="number">4</span>   <span class="number">3</span>   <span class="number">2</span>   <span class="number">1</span>   <span class="number">0</span></span></pre></td></tr></table></figure>

</details>  

<details>
  <summary> NaN统一放到排序末尾 </summary>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = pd.DataFrame(np.arange(<span class="number">12</span>).reshape(<span class="number">3</span>,<span class="number">4</span>), index = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">"abc"</span>])</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="number">0</span>  <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">a  <span class="number">0</span>  <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">b  <span class="number">4</span>  <span class="number">5</span>   <span class="number">6</span>   <span class="number">7</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">c  <span class="number">8</span>  <span class="number">9</span>  <span class="number">10</span>  <span class="number">11</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = pd.DataFrame(np.arange(<span class="number">20</span>).reshape(<span class="number">4</span>,<span class="number">5</span>),index = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">"cadb"</span>])</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="number">0</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span>   <span class="number">4</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">c   <span class="number">0</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span>   <span class="number">4</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">a   <span class="number">5</span>   <span class="number">6</span>   <span class="number">7</span>   <span class="number">8</span>   <span class="number">9</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">d  <span class="number">10</span>  <span class="number">11</span>  <span class="number">12</span>  <span class="number">13</span>  <span class="number">14</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">b  <span class="number">15</span>  <span class="number">16</span>  <span class="number">17</span>  <span class="number">18</span>  <span class="number">19</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = a + b</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="number">0</span>     <span class="number">1</span>     <span class="number">2</span>     <span class="number">3</span>   <span class="number">4</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">a   <span class="number">5.0</span>   <span class="number">7.0</span>   <span class="number">9.0</span>  <span class="number">11.0</span> NaN</span></pre></td></tr><tr><td class="code"><pre><span class="line">b  <span class="number">19.0</span>  <span class="number">21.0</span>  <span class="number">23.0</span>  <span class="number">25.0</span> NaN</span></pre></td></tr><tr><td class="code"><pre><span class="line">c   <span class="number">8.0</span>  <span class="number">10.0</span>  <span class="number">12.0</span>  <span class="number">14.0</span> NaN</span></pre></td></tr><tr><td class="code"><pre><span class="line">d   NaN   NaN   NaN   NaN NaN</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.sort_values(<span class="number">2</span>, ascending = <span class="literal">False</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="number">0</span>     <span class="number">1</span>     <span class="number">2</span>     <span class="number">3</span>   <span class="number">4</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">b  <span class="number">19.0</span>  <span class="number">21.0</span>  <span class="number">23.0</span>  <span class="number">25.0</span> NaN</span></pre></td></tr><tr><td class="code"><pre><span class="line">c   <span class="number">8.0</span>  <span class="number">10.0</span>  <span class="number">12.0</span>  <span class="number">14.0</span> NaN</span></pre></td></tr><tr><td class="code"><pre><span class="line">a   <span class="number">5.0</span>   <span class="number">7.0</span>   <span class="number">9.0</span>  <span class="number">11.0</span> NaN</span></pre></td></tr><tr><td class="code"><pre><span class="line">d   NaN   NaN   NaN   NaN NaN</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.sort_values(<span class="number">2</span>, ascending = <span class="literal">True</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="number">0</span>     <span class="number">1</span>     <span class="number">2</span>     <span class="number">3</span>   <span class="number">4</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">a   <span class="number">5.0</span>   <span class="number">7.0</span>   <span class="number">9.0</span>  <span class="number">11.0</span> NaN</span></pre></td></tr><tr><td class="code"><pre><span class="line">c   <span class="number">8.0</span>  <span class="number">10.0</span>  <span class="number">12.0</span>  <span class="number">14.0</span> NaN</span></pre></td></tr><tr><td class="code"><pre><span class="line">b  <span class="number">19.0</span>  <span class="number">21.0</span>  <span class="number">23.0</span>  <span class="number">25.0</span> NaN</span></pre></td></tr><tr><td class="code"><pre><span class="line">d   NaN   NaN   NaN   NaN NaN</span></pre></td></tr></table></figure>

</details>  

<hr>
<h2 id="数据的基本统计分析"><a href="#数据的基本统计分析" class="headerlink" title="数据的基本统计分析"></a>数据的基本统计分析</h2><p>基本的统计分析函数  </p>
<ul>
<li>适用于Series和DataFrame类型</li>
</ul>
<table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">.sum()</td>
<td align="left">计算数据的总和 按0轴计算 下同</td>
</tr>
<tr>
<td align="left">.count()</td>
<td align="left">非NaN值的数量</td>
</tr>
<tr>
<td align="left">.mean() .median()</td>
<td align="left">计算数据的算术平均值、算术中位数</td>
</tr>
<tr>
<td align="left">.var()  .std()</td>
<td align="left">计算数据的方差、标准差</td>
</tr>
<tr>
<td align="left">.min() .max()</td>
<td align="left">计算数据的最小值、最大值</td>
</tr>
<tr>
<td align="left">.describe()</td>
<td align="left">针对0轴(各列)的统计汇总</td>
</tr>
</tbody></table>
<ul>
<li>适用于Series类型</li>
</ul>
<table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">.argmin() .argmax()</td>
<td align="left">计算数据最大值、最小值所在位置的索引位置(自动索引)</td>
</tr>
<tr>
<td align="left">.idxmin() .idxmax()</td>
<td align="left">计算数据最大值、最小值所在位置的索引(自定义索引)</td>
</tr>
</tbody></table>
<details>
  <summary> Series.describe() 栗子 </summary>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = pd.Series([<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>], index = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">"abcd"</span>])</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span></pre></td></tr><tr><td class="code"><pre><span class="line">a    <span class="number">9</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">b    <span class="number">8</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">c    <span class="number">7</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">d    <span class="number">6</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">dtype: int64</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.describe()</span></pre></td></tr><tr><td class="code"><pre><span class="line">count    <span class="number">4.000000</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">mean     <span class="number">7.500000</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">std      <span class="number">1.290994</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">min      <span class="number">6.000000</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">25</span>%      <span class="number">6.750000</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">50</span>%      <span class="number">7.500000</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">75</span>%      <span class="number">8.250000</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">max      <span class="number">9.000000</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">dtype: float64</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(a.describe())</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">pandas</span>.<span class="title">core</span>.<span class="title">series</span>.<span class="title">Series</span>'&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"> </span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">a</span>.<span class="title">describe</span><span class="params">()</span>['<span class="title">count</span>']</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class">4.0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"> </span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">a</span>.<span class="title">describe</span><span class="params">()</span>['<span class="title">max</span>']</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class">9.0</span></span></pre></td></tr></table></figure>

</details>  


<details>
  <summary> DataFrame.describe() 栗子 </summary>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = pd.DataFrame(np.arange(<span class="number">20</span>).reshape(<span class="number">4</span>,<span class="number">5</span>), index = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">"cadb"</span>])</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="number">0</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span>   <span class="number">4</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">c   <span class="number">0</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span>   <span class="number">4</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">a   <span class="number">5</span>   <span class="number">6</span>   <span class="number">7</span>   <span class="number">8</span>   <span class="number">9</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">d  <span class="number">10</span>  <span class="number">11</span>  <span class="number">12</span>  <span class="number">13</span>  <span class="number">14</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">b  <span class="number">15</span>  <span class="number">16</span>  <span class="number">17</span>  <span class="number">18</span>  <span class="number">19</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.describe()</span></pre></td></tr><tr><td class="code"><pre><span class="line">               <span class="number">0</span>          <span class="number">1</span>          <span class="number">2</span>          <span class="number">3</span>          <span class="number">4</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">count   <span class="number">4.000000</span>   <span class="number">4.000000</span>   <span class="number">4.000000</span>   <span class="number">4.000000</span>   <span class="number">4.000000</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">mean    <span class="number">7.500000</span>   <span class="number">8.500000</span>   <span class="number">9.500000</span>  <span class="number">10.500000</span>  <span class="number">11.500000</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">std     <span class="number">6.454972</span>   <span class="number">6.454972</span>   <span class="number">6.454972</span>   <span class="number">6.454972</span>   <span class="number">6.454972</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">min     <span class="number">0.000000</span>   <span class="number">1.000000</span>   <span class="number">2.000000</span>   <span class="number">3.000000</span>   <span class="number">4.000000</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">25</span>%     <span class="number">3.750000</span>   <span class="number">4.750000</span>   <span class="number">5.750000</span>   <span class="number">6.750000</span>   <span class="number">7.750000</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">50</span>%     <span class="number">7.500000</span>   <span class="number">8.500000</span>   <span class="number">9.500000</span>  <span class="number">10.500000</span>  <span class="number">11.500000</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">75</span>%    <span class="number">11.250000</span>  <span class="number">12.250000</span>  <span class="number">13.250000</span>  <span class="number">14.250000</span>  <span class="number">15.250000</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">max    <span class="number">15.000000</span>  <span class="number">16.000000</span>  <span class="number">17.000000</span>  <span class="number">18.000000</span>  <span class="number">19.000000</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(b.describe())</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">pandas</span>.<span class="title">core</span>.<span class="title">frame</span>.<span class="title">DataFrame</span>'&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"> </span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"> # <span class="title">ix</span>已弃用 新版使用 .<span class="title">loc</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">b</span>.<span class="title">describe</span><span class="params">()</span>.<span class="title">loc</span>['<span class="title">max</span>']</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class">0    15.0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class">1    16.0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class">2    17.0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class">3    18.0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class">4    19.0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="title">Name</span>:</span> max, dtype: float64</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.describe()[<span class="number">2</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line">count     <span class="number">4.000000</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">mean      <span class="number">9.500000</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">std       <span class="number">6.454972</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">min       <span class="number">2.000000</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">25</span>%       <span class="number">5.750000</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">50</span>%       <span class="number">9.500000</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">75</span>%      <span class="number">13.250000</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">max      <span class="number">17.000000</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">Name: <span class="number">2</span>, dtype: float64</span></pre></td></tr></table></figure>

</details>  


<hr>
<h2 id="数据的累计统计分析"><a href="#数据的累计统计分析" class="headerlink" title="数据的累计统计分析"></a>数据的累计统计分析</h2><h4 id="基本统计函数"><a href="#基本统计函数" class="headerlink" title="基本统计函数"></a>基本统计函数</h4><ul>
<li>适用于Series和DataFrame类型</li>
</ul>
<table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">.cumsum()</td>
<td align="left">一次给出前1、2、…、n个数的和</td>
</tr>
<tr>
<td align="left">.cumprod()</td>
<td align="left">一次给出前1、2、…、n个数的积</td>
</tr>
<tr>
<td align="left">.cummax()</td>
<td align="left">一次给出前1、2、…、n个数的最大值</td>
</tr>
<tr>
<td align="left">.cummin()</td>
<td align="left">一次给出前1、2、…、n个数的最小值</td>
</tr>
</tbody></table>
<details>
  <summary> 举个栗子 </summary>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = pd.DataFrame(np.arange(<span class="number">20</span>).reshape(<span class="number">4</span>,<span class="number">5</span>), index = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">"cadb"</span>])</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="number">0</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span>   <span class="number">4</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">c   <span class="number">0</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span>   <span class="number">4</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">a   <span class="number">5</span>   <span class="number">6</span>   <span class="number">7</span>   <span class="number">8</span>   <span class="number">9</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">d  <span class="number">10</span>  <span class="number">11</span>  <span class="number">12</span>  <span class="number">13</span>  <span class="number">14</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">b  <span class="number">15</span>  <span class="number">16</span>  <span class="number">17</span>  <span class="number">18</span>  <span class="number">19</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.cumsum()</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="number">0</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span>   <span class="number">4</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">c   <span class="number">0</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span>   <span class="number">4</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">a   <span class="number">5</span>   <span class="number">7</span>   <span class="number">9</span>  <span class="number">11</span>  <span class="number">13</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">d  <span class="number">15</span>  <span class="number">18</span>  <span class="number">21</span>  <span class="number">24</span>  <span class="number">27</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">b  <span class="number">30</span>  <span class="number">34</span>  <span class="number">38</span>  <span class="number">42</span>  <span class="number">46</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.cumprod()</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="number">0</span>     <span class="number">1</span>     <span class="number">2</span>     <span class="number">3</span>     <span class="number">4</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">c  <span class="number">0</span>     <span class="number">1</span>     <span class="number">2</span>     <span class="number">3</span>     <span class="number">4</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">a  <span class="number">0</span>     <span class="number">6</span>    <span class="number">14</span>    <span class="number">24</span>    <span class="number">36</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">d  <span class="number">0</span>    <span class="number">66</span>   <span class="number">168</span>   <span class="number">312</span>   <span class="number">504</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">b  <span class="number">0</span>  <span class="number">1056</span>  <span class="number">2856</span>  <span class="number">5616</span>  <span class="number">9576</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.cummin()</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">c  <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">a  <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">d  <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">b  <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.cummax()</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="number">0</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span>   <span class="number">4</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">c   <span class="number">0</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span>   <span class="number">4</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">a   <span class="number">5</span>   <span class="number">6</span>   <span class="number">7</span>   <span class="number">8</span>   <span class="number">9</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">d  <span class="number">10</span>  <span class="number">11</span>  <span class="number">12</span>  <span class="number">13</span>  <span class="number">14</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">b  <span class="number">15</span>  <span class="number">16</span>  <span class="number">17</span>  <span class="number">18</span>  <span class="number">19</span></span></pre></td></tr></table></figure>

</details>  


<h4 id="滚动计算函数"><a href="#滚动计算函数" class="headerlink" title="滚动计算函数"></a>滚动计算函数</h4><ul>
<li>适用于Series和DataFrame类型</li>
</ul>
<table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">.rolling(w).sum()</td>
<td align="left">依次计算相邻w个元素的和</td>
</tr>
<tr>
<td align="left">.rolling(w).mean()</td>
<td align="left">依次计算相邻w个元素的算术平均值</td>
</tr>
<tr>
<td align="left">.rolling(w).var()</td>
<td align="left">依次计算相邻w个元素的方差</td>
</tr>
<tr>
<td align="left">.rolling(w).std()</td>
<td align="left">依次计算相邻w个元素的标准差</td>
</tr>
<tr>
<td align="left">.rolling(w).min() .max()</td>
<td align="left">依次计算相邻w个元素的最小值和最大值</td>
</tr>
</tbody></table>
<details>
  <summary> 举个栗子 </summary>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = pd.DataFrame(np.arange(<span class="number">20</span>).reshape(<span class="number">4</span>,<span class="number">5</span>), index = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">"cadb"</span>])</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="number">0</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span>   <span class="number">4</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">c   <span class="number">0</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span>   <span class="number">4</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">a   <span class="number">5</span>   <span class="number">6</span>   <span class="number">7</span>   <span class="number">8</span>   <span class="number">9</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">d  <span class="number">10</span>  <span class="number">11</span>  <span class="number">12</span>  <span class="number">13</span>  <span class="number">14</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">b  <span class="number">15</span>  <span class="number">16</span>  <span class="number">17</span>  <span class="number">18</span>  <span class="number">19</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.rolling(<span class="number">2</span>).sum()    <span class="comment"># 21.0 是 8+13</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="number">0</span>     <span class="number">1</span>     <span class="number">2</span>     <span class="number">3</span>     <span class="number">4</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">c   NaN   NaN   NaN   NaN   NaN</span></pre></td></tr><tr><td class="code"><pre><span class="line">a   <span class="number">5.0</span>   <span class="number">7.0</span>   <span class="number">9.0</span>  <span class="number">11.0</span>  <span class="number">13.0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">d  <span class="number">15.0</span>  <span class="number">17.0</span>  <span class="number">19.0</span>  <span class="number">21.0</span>  <span class="number">23.0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">b  <span class="number">25.0</span>  <span class="number">27.0</span>  <span class="number">29.0</span>  <span class="number">31.0</span>  <span class="number">33.0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.rolling(<span class="number">3</span>).sum()    <span class="comment"># 42 是 19 + 14 + 9</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="number">0</span>     <span class="number">1</span>     <span class="number">2</span>     <span class="number">3</span>     <span class="number">4</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">c   NaN   NaN   NaN   NaN   NaN</span></pre></td></tr><tr><td class="code"><pre><span class="line">a   NaN   NaN   NaN   NaN   NaN  <span class="comment"># 前方加自己不满足w 3行 所以NaN</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">d  <span class="number">15.0</span>  <span class="number">18.0</span>  <span class="number">21.0</span>  <span class="number">24.0</span>  <span class="number">27.0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">b  <span class="number">30.0</span>  <span class="number">33.0</span>  <span class="number">36.0</span>  <span class="number">39.0</span>  <span class="number">42.0</span></span></pre></td></tr></table></figure>

</details>  


<hr>
<h2 id="数据的相关分析"><a href="#数据的相关分析" class="headerlink" title="数据的相关分析"></a>数据的相关分析</h2><h4 id="相关分析概念"><a href="#相关分析概念" class="headerlink" title="相关分析概念"></a>相关分析概念</h4><ul>
<li>两个事物 表示为 X Y , 如何判断他们之间的相关性？<ul>
<li>X增大 Y也增大 两个变量正相关。</li>
<li>X增大 Y减小 两个变量负相关</li>
<li>X增大 Y无视 两个变量无相关</li>
</ul>
</li>
</ul>
<h4 id="如何度量两个事物的相关性"><a href="#如何度量两个事物的相关性" class="headerlink" title="如何度量两个事物的相关性"></a>如何度量两个事物的相关性</h4><p>协方差</p>
<ul>
<li>协方差 &gt; 0 , X和Y正相关。</li>
<li>协方差 &lt; 0 , X和Y负相关。</li>
<li>协方差 = 0 , X和Y独立无关。</li>
</ul>
<p>Pearson相关系数<br>怎么写数学公式啊<br>r 取值范围[-1,1]<br>越大越强相关性 反之越小</p>
<h4 id="相关性分析函数"><a href="#相关性分析函数" class="headerlink" title="相关性分析函数"></a>相关性分析函数</h4><table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">.cov()</td>
<td align="left">计算协方差矩阵</td>
</tr>
<tr>
<td align="left">.corr()</td>
<td align="left">计算相关系数矩阵, Pearson、Speraman、Kendall等系数</td>
</tr>
</tbody></table>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>一组数据的摘要</p>
<ul>
<li>排序 .sort_index() .sort_values()</li>
<li>基本统计函数 .describe()</li>
<li>累计统计函数 .cum<em>() .rolling().\</em>()</li>
<li>相关性分析 .corr() .cov()</li>
</ul>
]]></content>
      <tags>
        <tag>pandas</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Matplotlib</title>
    <url>/2020/01/06/matplotlib/</url>
    <content><![CDATA[<h2 id="第一个Matplotlib程序"><a href="#第一个Matplotlib程序" class="headerlink" title="第一个Matplotlib程序"></a>第一个Matplotlib程序</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt </span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line">plt.plot([<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>])   </span></pre></td></tr><tr><td class="code"><pre><span class="line">plt.ylabel(<span class="string">"Grade"</span>)     <span class="comment"># 标签名</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">plt.savefig(<span class="string">"test"</span>,dpi=<span class="number">600</span>)</span></pre></td></tr></table></figure>
<ul>
<li>savefig 参数:<ul>
<li>filename : 保存的文件名 默认是png 也可以指定格式保存</li>
<li>dpi: 输出文件的质量 每一英尺空间中包含点的数量<br>可以查看输出的<code>test.png</code>图像<br><img src="http://hotobun.gitee.io/hexo/img/archive_img/matplotlib1.png" alt="matplotlib1"></li>
</ul>
</li>
</ul>
<h4 id="输入多个列表"><a href="#输入多个列表" class="headerlink" title="输入多个列表"></a>输入多个列表</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt </span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line">plt.plot([<span class="number">0</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>],[<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>])   </span></pre></td></tr><tr><td class="code"><pre><span class="line">plt.ylabel(<span class="string">"Grade"</span>)     <span class="comment"># 标签名</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">plt.axis([<span class="number">-1</span>,<span class="number">10</span>,<span class="number">0</span>,<span class="number">6</span>])</span></pre></td></tr><tr><td class="code"><pre><span class="line">plt.savefig(<span class="string">"test1"</span>,dpi=<span class="number">600</span>)</span></pre></td></tr></table></figure>
<ul>
<li>plot参数：<ul>
<li>当有多个列表时 分别对应x轴与y轴的点</li>
<li>XY: (0,3) (2,1) (4,4) (6,5) (8,2)</li>
</ul>
</li>
<li>axis参数:<ul>
<li>需要4个变量的列表 对应画图区域</li>
<li>x轴起始于-1 终止与10</li>
<li>y轴起始于0 终止与6<br><img src="http://hotobun.gitee.io/hexo/img/archive_img/matplotlib2.png" alt="matplotlib2"></li>
</ul>
</li>
</ul>
<hr>
<h2 id="pyplot的绘图区域"><a href="#pyplot的绘图区域" class="headerlink" title="pyplot的绘图区域"></a>pyplot的绘图区域</h2><p>分隔绘图区域使用函数subplot</p>
<ul>
<li>plt.subplot(nrows, ncols, plot_number)<ul>
<li>3个参数都是int类型</li>
<li>nrows: 横轴数量</li>
<li>ncols: 纵轴数量</li>
<li>plot_number: 绘图子区域编号 所有绘图都在这个子区域进行</li>
<li>由于全是数字可以简写一个参数 plt.subplot(3,2,4) 可以简写为 plt.subplot(324)</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(t)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> np.exp(-t) * np.cos(<span class="number">2</span>*np.pi*t)</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    a = np.arange(<span class="number">0.0</span>, <span class="number">5.0</span>, <span class="number">0.02</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    plt.subplot(<span class="number">211</span>)        <span class="comment"># 将绘图区域分为2行1列 选择第一块</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    plt.plot(a, f(a))</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line">    plt.subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>)      <span class="comment"># 将绘图区域选择为2行1列的第二块</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    plt.plot(a, np.cos(<span class="number">2</span>*np.pi*a), <span class="string">'r--'</span>) <span class="comment"># r-- 表示虚线绘制</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    plt.show()</span></pre></td></tr></table></figure>
<p><img src="http://hotobun.gitee.io/hexo/img/archive_img/matplotlib3.png" alt="matplotlib3"></p>
<hr>
<h2 id="plot函数"><a href="#plot函数" class="headerlink" title="plot函数"></a>plot函数</h2><ul>
<li>plt.plot(x, y, fromat_string, **kwargs)<ul>
<li>x : X轴数据, 列表或数组, 可选。当绘制多条曲线时, x不能省略</li>
<li>y : Y轴数据, 列表或数组.</li>
<li>format_string : 控制曲线的格式字符串, 可选。</li>
<li>**kwargs : 第二组或更多(x, y, fromat_string) <ul>
<li>color : 控制颜色, color = “green”</li>
<li>linestyle : 线条风格, linestyle = “dashed”</li>
<li>marker : 标记风格, marker = ‘o’</li>
<li>markerfacecolor : 标记颜色, markerfacecolor = “blue”</li>
<li>markersize : 标记尺寸, markersize = 20</li>
<li>…</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>尝试画4条曲线</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    a = np.arange(<span class="number">10</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    plt.plot(a, a*<span class="number">1.5</span>,a, a*<span class="number">2.5</span>, a, a*<span class="number">3.5</span>, a, a*<span class="number">4.5</span>) <span class="comment"># 注意这里是8个参数 每两个一组</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    plt.show()</span></pre></td></tr></table></figure>

<p><img src="http://hotobun.gitee.io/hexo/img/archive_img/matplotlib4.png" alt="matplotlib4"></p>
<p>format_string 参数由颜色字符、风格字符和标记字符组成<br>如果不选择颜色 Matplotlib会为不同曲线选择唯一的颜色区分</p>
<table>
<thead>
<tr>
<th align="left">颜色字符</th>
<th align="left">说明</th>
<th align="left">颜色字符</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">‘b’</td>
<td align="left">蓝色</td>
<td align="left">‘m’</td>
<td align="left">洋红色magenta</td>
</tr>
<tr>
<td align="left">‘g’</td>
<td align="left">绿色</td>
<td align="left">‘y’</td>
<td align="left">黄色</td>
</tr>
<tr>
<td align="left">‘r’</td>
<td align="left">红色</td>
<td align="left">‘k’</td>
<td align="left">黑色</td>
</tr>
<tr>
<td align="left">‘c’</td>
<td align="left">青绿色</td>
<td align="left">‘w’</td>
<td align="left">白色</td>
</tr>
<tr>
<td align="left">‘#123321’</td>
<td align="left">用户控制颜色</td>
<td align="left">0.8</td>
<td align="left">灰度值字符串</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="left">风格字符</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">‘-‘</td>
<td align="left">实线</td>
</tr>
<tr>
<td align="left">‘--‘</td>
<td align="left">破折线</td>
</tr>
<tr>
<td align="left">‘-.’</td>
<td align="left">点划线</td>
</tr>
<tr>
<td align="left">‘:’</td>
<td align="left">虚线</td>
</tr>
<tr>
<td align="left">‘’</td>
<td align="left">无线条</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="left">标记字符</th>
<th align="left">说明</th>
<th align="left">标记字符</th>
<th align="left">说明</th>
<th align="left">标记字符</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">‘.’</td>
<td align="left">点标记</td>
<td align="left">‘1’</td>
<td align="left">下花三角标记</td>
<td align="left">‘h’</td>
<td align="left">竖六边形标记</td>
</tr>
<tr>
<td align="left">‘,’</td>
<td align="left">像素点标记(极小)</td>
<td align="left">‘2’</td>
<td align="left">上花三角标记</td>
<td align="left">‘H’</td>
<td align="left">横六边形标记</td>
</tr>
<tr>
<td align="left">‘o’</td>
<td align="left">实心圈标记</td>
<td align="left">‘3’</td>
<td align="left">左花三角标记</td>
<td align="left">‘+’</td>
<td align="left">十字标记</td>
</tr>
<tr>
<td align="left">‘v’</td>
<td align="left">倒三角标记</td>
<td align="left">‘4’</td>
<td align="left">右花三角标记</td>
<td align="left">‘x’</td>
<td align="left">x标记</td>
</tr>
<tr>
<td align="left">‘^’</td>
<td align="left">上三角标记</td>
<td align="left">‘s’</td>
<td align="left">实心方形标记</td>
<td align="left">‘D’</td>
<td align="left">棱形标记</td>
</tr>
<tr>
<td align="left">‘&gt;’</td>
<td align="left">右三角标记</td>
<td align="left">‘p’</td>
<td align="left">实心五角标记</td>
<td align="left">‘d’</td>
<td align="left">廋棱形标记</td>
</tr>
<tr>
<td align="left">‘&lt;’</td>
<td align="left">左三角标记</td>
<td align="left">‘*’</td>
<td align="left">星型标记</td>
<td align="left">‘|’</td>
<td align="left">竖线标记</td>
</tr>
</tbody></table>
<p><img src="http://hotobun.gitee.io/hexo/img/archive_img/matplotlib5.png" alt="matplotlib5"></p>
<p>下面遍历一次所有标记符号的样式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    color = <span class="string">'bgrcmyk'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    line = [<span class="string">'-'</span>,<span class="string">'--'</span>,<span class="string">'-.'</span>,<span class="string">':'</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line">    markers = <span class="string">'.,ov^&gt;&lt;1234sp*hH+xDd|_'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(markers)): </span></pre></td></tr><tr><td class="code"><pre><span class="line">        format_string = <span class="string">'&#123;&#125;&#123;&#125;&#123;&#125;'</span>.format(color[i%len(color)], line[i%len(line)], markers[i])</span></pre></td></tr><tr><td class="code"><pre><span class="line">        print(<span class="string">"y -&gt; format_string: &#123;:&gt;2d&#125; -&gt; &#123;:4s&#125; "</span>.format(i+<span class="number">1</span>,format_string) \</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> i%<span class="number">2</span> == <span class="number">0</span> <span class="keyword">else</span> <span class="string">"&#123;:&gt;5d&#125; -&gt; &#123;&#125; \n"</span>.format(i+<span class="number">1</span>,format_string), end=<span class="string">''</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        plt.plot(np.arange(len(markers)), np.full(len(markers),i+<span class="number">1</span>), format_string)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    plt.axis([<span class="number">0</span>,len(markers),<span class="number">0</span>,len(markers)+<span class="number">1</span>])</span></pre></td></tr><tr><td class="code"><pre><span class="line">    plt.show()</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    main()</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">""" out  # 无线条和白色线没有入队 因为看不到啊</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">y -&gt; format_string:  1 -&gt; b-.      2 -&gt; g--,</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">y -&gt; format_string:  3 -&gt; r-.o     4 -&gt; c:v</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">y -&gt; format_string:  5 -&gt; m-^      6 -&gt; y--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">y -&gt; format_string:  7 -&gt; k-.&lt;     8 -&gt; b:1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">y -&gt; format_string:  9 -&gt; g-2     10 -&gt; r--3</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">y -&gt; format_string: 11 -&gt; c-.4    12 -&gt; m:s</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">y -&gt; format_string: 13 -&gt; y-p     14 -&gt; k--*</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">y -&gt; format_string: 15 -&gt; b-.h    16 -&gt; g:H</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">y -&gt; format_string: 17 -&gt; r-+     18 -&gt; c--x</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">y -&gt; format_string: 19 -&gt; m-.D    20 -&gt; y:d</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">y -&gt; format_string: 21 -&gt; k-|     22 -&gt; b--_</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span></pre></td></tr></table></figure>

<p><img src="http://hotobun.gitee.io/hexo/img/archive_img/matplotlib6.png" alt="matplotlib6"></p>
<hr>
<h2 id="pyplot的中文显示"><a href="#pyplot的中文显示" class="headerlink" title="pyplot的中文显示"></a>pyplot的中文显示</h2><h4 id="第一种方法"><a href="#第一种方法" class="headerlink" title="第一种方法"></a>第一种方法</h4><p>pyplot并不默认支持中文显示, 需要rcParams修改字体实现</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt </span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    matplotlib.rcParams[<span class="string">'font.family'</span>] = <span class="string">'SimHei'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    plt.plot([<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>])</span></pre></td></tr><tr><td class="code"><pre><span class="line">    plt.ylabel(<span class="string">"纵轴"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    plt.show()</span></pre></td></tr></table></figure>
<p><img src="http://hotobun.gitee.io/hexo/img/archive_img/matplotlib7.png" alt="matplotlib7"></p>
<p>rcParams的属性 </p>
<table>
<thead>
<tr>
<th align="left">属性</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">“font.family”</td>
<td>用于显示字体的名字</td>
</tr>
<tr>
<td align="left">“font.style”</td>
<td>字体风格, 正常”normal” 或 斜体 “italic”</td>
</tr>
<tr>
<td align="left">“font.size”</td>
<td>字体大小, 整数字号或”large”、”x-small”</td>
</tr>
</tbody></table>
<p>目前只有中文黑体和楷体可以用 稍后研究  </p>
<table>
<thead>
<tr>
<th align="left">中文字体</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">“SimHei”</td>
<td align="left">中文黑体</td>
</tr>
<tr>
<td align="left">“Kaiti”</td>
<td align="left">中文楷体</td>
</tr>
<tr>
<td align="left">“LiSu”</td>
<td align="left">中文隶书</td>
</tr>
<tr>
<td align="left">“FangSong”</td>
<td align="left">中文仿宋</td>
</tr>
<tr>
<td align="left">“YouYuan”</td>
<td align="left">中文幼圆</td>
</tr>
<tr>
<td align="left">“STSong”</td>
<td align="left">华文宋体</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib </span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    matplotlib.rcParams[<span class="string">'font.family'</span>] = <span class="string">"Kaiti"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    matplotlib.rcParams[<span class="string">'font.size'</span>] = <span class="number">10</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line">    a = np.arange(<span class="number">0.0</span>, <span class="number">5.0</span>, <span class="number">0.02</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line">    plt.xlabel(<span class="string">"横轴：时间"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    plt.ylabel(<span class="string">"纵轴：振幅"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    plt.plot(a, np.cos(<span class="number">2</span>*np.pi*a), <span class="string">"r--"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    plt.show()</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    main()</span></pre></td></tr></table></figure>

<p><img src="http://hotobun.gitee.io/hexo/img/archive_img/matplotlib8.png" alt="matplotlib8"></p>
<h4 id="第二种方法-推荐"><a href="#第二种方法-推荐" class="headerlink" title="第二种方法 推荐"></a>第二种方法 推荐</h4><p>在有中文输出的地方, 增加一个属性: fontproperties  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt </span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    a = np.arange(<span class="number">0.0</span>, <span class="number">5.0</span>, <span class="number">0.02</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line">    plt.xlabel(<span class="string">"横轴：时间"</span>, fontproperties=<span class="string">"Kaiti"</span>, fontsize = <span class="number">14</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    plt.ylabel(<span class="string">"纵轴：振幅"</span>, fontproperties=<span class="string">"SimHei"</span>, fontsize = <span class="number">11</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    plt.plot(a, np.cos(<span class="number">2</span>*np.pi*a), <span class="string">"r"</span>) <span class="comment"># ??? </span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    plt.show()</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    main()</span></pre></td></tr></table></figure>
<p><img src="http://hotobun.gitee.io/hexo/img/archive_img/matplotlib9.png" alt="matplotlib9"></p>
<hr>
<h2 id="pyplot的文本显示函数"><a href="#pyplot的文本显示函数" class="headerlink" title="pyplot的文本显示函数"></a>pyplot的文本显示函数</h2><table>
<thead>
<tr>
<th align="left">函数</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">plt.xlabel()</td>
<td align="left">对X轴增加文本标签</td>
</tr>
<tr>
<td align="left">plt.ylabel()</td>
<td align="left">对Y轴增加文本标签</td>
</tr>
<tr>
<td align="left">plt.title()</td>
<td align="left">对圆形整体增加文本标签</td>
</tr>
<tr>
<td align="left">plt.text()</td>
<td align="left">在任意位置增加文本</td>
</tr>
<tr>
<td align="left">plt.annotate()</td>
<td align="left">在图形中增加带箭头的注释</td>
</tr>
<tr>
<td align="left">plt.grid(True)</td>
<td align="left">图层显示网格</td>
</tr>
</tbody></table>
<p>plt.annotate函数参数<br>plt.annotate(s, xy= arrow_crd, xytext=text_crd, arrowprops=dict)</p>
<ul>
<li>s : 表示要注解的字符串</li>
<li>xy : 箭头所在的位置</li>
<li>xytext ： 文本显示的位置</li>
<li>arrowprops : 字典 定义了整个箭头的属性</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt </span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    a = np.arange(<span class="number">0.0</span>, <span class="number">5.0</span>, <span class="number">0.02</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    plt.plot(a, np.cos(<span class="number">2</span>*np.pi*a), <span class="string">'r--'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line">    plt.xlabel(<span class="string">"横轴：时间"</span>, fontproperties=<span class="string">"SimHei"</span>, fontsize=<span class="number">13</span>, color=<span class="string">"blue"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    plt.ylabel(<span class="string">"纵轴：振幅"</span>, fontproperties=<span class="string">"SimHei"</span>, fontsize=<span class="number">13</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    plt.title(<span class="string">r"正弦波实例 $y=cos(2\pi x)$"</span>,fontproperties=<span class="string">"SimHei"</span>, fontsize = <span class="number">15</span> )</span></pre></td></tr><tr><td class="code"><pre><span class="line">    plt.text(<span class="number">4</span>, <span class="number">1</span>, <span class="string">r"$\mu=100$"</span>, fontsize = <span class="number">13</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     </span></pre></td></tr><tr><td class="code"><pre><span class="line">    plt.annotate(<span class="string">r'$\mu=100$'</span>, xy=(<span class="number">2</span>, <span class="number">1</span>), xytext=(<span class="number">3</span>, <span class="number">1.5</span>), arrowprops=dict(facecolor=<span class="string">"black"</span>, shrink=<span class="number">0.1</span>, width=<span class="number">2</span>))</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line">    plt.axis([<span class="number">-1</span>, <span class="number">6</span>, <span class="number">-2</span>, <span class="number">2</span> ])</span></pre></td></tr><tr><td class="code"><pre><span class="line">    plt.grid(<span class="literal">True</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    plt.show()</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    main()</span></pre></td></tr></table></figure>

<p><img src="http://hotobun.gitee.io/hexo/img/archive_img/matplotlib10.png" alt="matplotlib10"></p>
<hr>
<h2 id="pyplot的子绘图区域"><a href="#pyplot的子绘图区域" class="headerlink" title="pyplot的子绘图区域"></a>pyplot的子绘图区域</h2><h4 id="使用函数-plt-subplot21grid"><a href="#使用函数-plt-subplot21grid" class="headerlink" title="使用函数 plt.subplot21grid()"></a>使用函数 plt.subplot21grid()</h4><p>plt.subplot2grid(GridSpec, CurSpec, colspan=1, rowspan=1)</p>
<ul>
<li>理念: 设定网格, 选中网格, 确定选中行列区域数量,  编号从0开始</li>
<li>GridSpec : type tuple 把图层分为几行几列</li>
<li>CurSpec : type tuple 选择第几个位置 </li>
<li>colspan : 横向占用几个区域</li>
<li>rowspan : 纵向占用几个区域</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt </span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    a = np.arange(<span class="number">0.0</span>, <span class="number">5.0</span>, <span class="number">0.02</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment"># (3,3) 绘图区域分为 3*3 共9个区域</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    plt.subplot2grid((<span class="number">3</span>,<span class="number">3</span>), (<span class="number">0</span>,<span class="number">0</span>), colspan=<span class="number">3</span>)   <span class="comment"># (0,0) 选择第0行第0列 colspan 横向占3个区域 就是第一行都是这个图</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    plt.plot(a, np.cos(<span class="number">2</span>*np.pi*a), <span class="string">'r--'</span>)       <span class="comment"># 红色虚线</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line">    plt.subplot2grid((<span class="number">3</span>,<span class="number">3</span>), (<span class="number">1</span>,<span class="number">0</span>), colspan=<span class="number">2</span>)   <span class="comment"># (1,0) 选择第1行第0列 colspan 横向占2个区域</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    plt.plot(a, np.cos(<span class="number">2</span>*np.pi*a), <span class="string">'b-.'</span>)       <span class="comment"># 蓝色虚线</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line">    plt.subplot2grid((<span class="number">3</span>,<span class="number">3</span>), (<span class="number">1</span>,<span class="number">2</span>), rowspan=<span class="number">2</span>)   <span class="comment"># (1,2) 选择第1行第2列 rowspan 纵向占2个区域</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    plt.plot(a, np.cos(<span class="number">2</span>*np.pi*a), <span class="string">'g'</span> )        <span class="comment"># 绿色实线</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line">    plt.subplot2grid((<span class="number">3</span>,<span class="number">3</span>), (<span class="number">2</span>,<span class="number">0</span>))              <span class="comment"># (2,0) 选择第2行第0列 后面不再填参数默认为1 占一个区域</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    plt.plot(a, np.cos(<span class="number">2</span>*np.pi*a),  <span class="string">'k'</span> )       <span class="comment"># 黑色实线</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line">    plt.subplot2grid((<span class="number">3</span>,<span class="number">3</span>), (<span class="number">2</span>,<span class="number">1</span>))              <span class="comment"># (2,1) 选择第2行第1列</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    plt.plot(a, np.cos(<span class="number">2</span>*np.pi*a), <span class="string">'m'</span> )        <span class="comment"># 洋红色实线</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line">    plt.show()</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    main()</span></pre></td></tr></table></figure>

<p><img src="http://hotobun.gitee.io/hexo/img/archive_img/matplotlib11.png" alt="matplotlib11"></p>
<h4 id="使用-gridspec-GridSpec类-效果同上图"><a href="#使用-gridspec-GridSpec类-效果同上图" class="headerlink" title="使用 gridspec.GridSpec类 效果同上图"></a>使用 gridspec.GridSpec类 效果同上图</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.gridspec <span class="keyword">as</span> gridspec </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    a = np.arange(<span class="number">0.0</span>, <span class="number">5.0</span>, <span class="number">0.02</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment"># 将图层分成3*3的子区域</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    gs = gridspec.GridSpec(<span class="number">3</span>,<span class="number">3</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment"># 使用gs切片选择绘图区域</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    plt.subplot(gs[<span class="number">0</span>,:])</span></pre></td></tr><tr><td class="code"><pre><span class="line">    plt.plot(a, np.cos(<span class="number">2</span>*np.pi*a), <span class="string">'r--'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line">    plt.subplot(gs[<span class="number">1</span>,:<span class="number">-1</span>])</span></pre></td></tr><tr><td class="code"><pre><span class="line">    plt.plot(a, np.cos(<span class="number">2</span>*np.pi*a), <span class="string">'b-.'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line">    plt.subplot(gs[<span class="number">1</span>:,<span class="number">-1</span>])</span></pre></td></tr><tr><td class="code"><pre><span class="line">    plt.plot(a, np.cos(<span class="number">2</span>*np.pi*a), <span class="string">'g'</span> ) </span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line">    plt.subplot(gs[<span class="number">2</span>,<span class="number">0</span>])</span></pre></td></tr><tr><td class="code"><pre><span class="line">    plt.plot(a, np.cos(<span class="number">2</span>*np.pi*a),  <span class="string">'k'</span> )</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line">    plt.subplot(gs[<span class="number">2</span>,<span class="number">1</span>])</span></pre></td></tr><tr><td class="code"><pre><span class="line">    plt.plot(a, np.cos(<span class="number">2</span>*np.pi*a), <span class="string">'m'</span> )</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line">    plt.show()</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    main()</span></pre></td></tr></table></figure>

<hr>
<h2 id="pyplot常用基础图表函数"><a href="#pyplot常用基础图表函数" class="headerlink" title="pyplot常用基础图表函数"></a>pyplot常用基础图表函数</h2><table>
<thead>
<tr>
<th align="left">函数</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">plt.plot(x, y, fmt, …)</td>
<td align="left">绘制一个坐标图</td>
</tr>
<tr>
<td align="left">plt.boxplot(data, notch, position)</td>
<td align="left">绘制一个箱形图</td>
</tr>
<tr>
<td align="left">plt.bar(left, height, width, bottom)</td>
<td align="left">绘制一个条形图</td>
</tr>
<tr>
<td align="left">plt.barh(width, bottom, left, height)</td>
<td align="left">绘制一个横向条形图</td>
</tr>
<tr>
<td align="left">plt.polar(theta, r)</td>
<td align="left">绘制极坐标图(这是啥)</td>
</tr>
<tr>
<td align="left">plt.pie(data,  explode)</td>
<td align="left">绘制饼图</td>
</tr>
<tr>
<td align="left">plt.psd(x, NFFT=256, pad_to, Fs)</td>
<td align="left">绘制功率谱密度图</td>
</tr>
<tr>
<td align="left">plt.specgram(x, NFFT=256, pad_to, Fs)</td>
<td align="left">绘制谱图</td>
</tr>
<tr>
<td align="left">plt.eohere(x, y, NFFT=256, Fs)</td>
<td align="left">绘制X-Y相关性图</td>
</tr>
<tr>
<td align="left">plt.scatter(x, y)</td>
<td align="left">绘制散点图, 其中 x和y长度相同</td>
</tr>
<tr>
<td align="left">plt.step(x, y, where)</td>
<td align="left">绘制步阶图</td>
</tr>
<tr>
<td align="left">plt.hist(x, bins, normed)</td>
<td align="left">绘制直方图</td>
</tr>
<tr>
<td align="left">plt.contour(X, Y, Z, N)</td>
<td align="left">绘制等值图</td>
</tr>
<tr>
<td align="left">plt.vlines()</td>
<td align="left">绘制垂直图</td>
</tr>
<tr>
<td align="left">plt.stem(x, y, linefmt, markerfmt)</td>
<td align="left">绘制火柴图</td>
</tr>
<tr>
<td align="left">plt.plot_date()</td>
<td align="left">绘制数据日期</td>
</tr>
</tbody></table>
<hr>
<h3 id="绘制饼图"><a href="#绘制饼图" class="headerlink" title="绘制饼图"></a>绘制饼图</h3><details>
  <summary> 饼图代码 </summary>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt </span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    labels = <span class="string">"Frogs"</span>, <span class="string">"Hogs"</span>, <span class="string">"Dogs"</span>, <span class="string">"Logs"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    sizes  = [<span class="number">15</span>, <span class="number">30</span>, <span class="number">45</span>, <span class="number">10</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line">    explode= (<span class="number">0</span>, <span class="number">0.1</span>, <span class="number">0</span>, <span class="number">0</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line">    plt.pie(sizes, explode = explode, labels = labels,\</span></pre></td></tr><tr><td class="code"><pre><span class="line">        autopct = <span class="string">"%1.1f%%"</span>, shadow = <span class="literal">False</span>, startangle = <span class="number">90</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    plt.show() </span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    main()</span></pre></td></tr></table></figure>

</details>  

<p><img src="http://hotobun.gitee.io/hexo/img/archive_img/matplotlib12.png" alt="matplotlib12"></p>
<hr>
<h3 id="绘制直方图"><a href="#绘制直方图" class="headerlink" title="绘制直方图"></a>绘制直方图</h3><details>
  <summary> 直方图代码 </summary>

<p>plt.hist(array, bin, 后面不知道)</p>
<ul>
<li>array : 直方图数据 </li>
<li>bin : 直方的个数</li>
<li>normed : <ul>
<li>等于1时 将每一个直方中出现元素的个数规划为出现的概率 ？？？？？</li>
<li>如果等于0 纵坐标就是直方区域中间出现的元素个数   ？？？？？</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt </span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    np.random.seed(<span class="number">233</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    mu, sigma = <span class="number">100</span>, <span class="number">20</span> <span class="comment"># 均值和标准差</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    a = np.random.normal(mu, sigma, size = <span class="number">100</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line">    plt.hist(a, <span class="number">40</span>, normed = <span class="number">0</span>, histtype = <span class="string">"stepfilled"</span>, facecolor = <span class="string">"b"</span>, alpha = <span class="number">0.75</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    plt.title(<span class="string">'Histogram'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line">    plt.show()</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    main()</span></pre></td></tr></table></figure>

</details>  

<p><img src="http://hotobun.gitee.io/hexo/img/archive_img/matplotlib13.png" alt="matplotlib13"></p>
<hr>
<h3 id="绘制极坐标图"><a href="#绘制极坐标图" class="headerlink" title="绘制极坐标图"></a>绘制极坐标图</h3><details>
  <summary> 极坐标图代码 </summary>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt </span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    N = <span class="number">30</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    theta = np.linspace(<span class="number">0.0</span>, <span class="number">2</span> * np.pi, N, endpoint=<span class="literal">False</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    radii = <span class="number">10</span> * np.random.rand(N)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    width = np.pi / <span class="number">4</span> * np.random.rand(N)</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line">    ax = plt.subplot(<span class="number">111</span>, projection = <span class="string">'polar'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    bars = ax.bar(theta, radii, width = width, bottom = <span class="number">0.0</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> r, bar <span class="keyword">in</span> zip(radii, bars):</span></pre></td></tr><tr><td class="code"><pre><span class="line">        bar.set_facecolor(plt.cm.viridis(r / <span class="number">10.</span>))</span></pre></td></tr><tr><td class="code"><pre><span class="line">        bar.set_alpha(<span class="number">0.5</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     </span></pre></td></tr><tr><td class="code"><pre><span class="line">    plt.show()</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    main()</span></pre></td></tr></table></figure>

</details>  

<p><img src="http://hotobun.gitee.io/hexo/img/archive_img/matplotlib14.png" alt="matplotlib14"></p>
<hr>
<h3 id="绘制引力波"><a href="#绘制引力波" class="headerlink" title="绘制引力波"></a>绘制引力波</h3><blockquote>
<p>摘自百度<br>在物理学中，引力波是指时空弯曲中的涟漪，通过波的形式从辐射源向外传播，这种波以引力辐射的形式传输能量。在1916年，爱因斯坦基于广义相对论预言了引力波的存在。引力波的存在是广义相对论洛伦兹不变性的结果，因为它引入了相互作用的传播速度有限的概念。相比之下，引力波不能够存在于牛顿的经典引力理论当中，因为牛顿的经典理论假设物质的相互作用传播是速度无限的。 </p>
</blockquote>
<details>
  <summary> 引力波代码 </summary>

<p>两个wav文件是在 <a href="https://python123.io/dv/grawave.html" target="_blank" rel="noopener">python123.io</a> 下载的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.io <span class="keyword">import</span> wavfile </span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="string">"""</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    这是啥 </span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    """</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment"># wavfile读取速率与数据</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    rate_h, hstrain = wavfile.read(<span class="string">r'H1_Strain.wav'</span>, <span class="string">'rb'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    rate_l, lstrain = wavfile.read(<span class="string">r'L1_Strain.wav'</span>, <span class="string">'rb'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment"># reftime, ref_H1 = np.genfromtxt("wf_template.txt").transpose  # 模版用不了</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line">    htime_interval = <span class="number">1</span>/rate_h</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ltime_interval = <span class="number">1</span>/rate_l</span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line">    htime_len = hstrain.shape[<span class="number">0</span>]/rate_h</span></pre></td></tr><tr><td class="code"><pre><span class="line">    htime = np.arange(-htime_len/<span class="number">2</span>, htime_len/<span class="number">2</span>, htime_interval)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ltime_len = lstrain.shape[<span class="number">0</span>]/rate_l</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ltime = np.arange(-ltime_len/<span class="number">2</span>, ltime_len/<span class="number">2</span>, ltime_interval)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line">    fig = plt.figure(figsize=(<span class="number">12</span>, <span class="number">6</span>))</span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line">    plth = fig.add_subplot(<span class="number">211</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    plth.plot(htime, hstrain)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    plth.set_xlabel(<span class="string">"Time (seconds)"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    plth.set_ylabel( <span class="string">"H1 Strain"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    plth.set_title(<span class="string">"H1 Strain"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line">    plth = fig.add_subplot(<span class="number">212</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    plth.plot(ltime, lstrain, )</span></pre></td></tr><tr><td class="code"><pre><span class="line">    plth.set_xlabel(<span class="string">"Time (seconds)"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    plth.set_ylabel(<span class="string">"L1 Strain"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    plth.set_title(<span class="string">"L1 Strain"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line">    fig.tight_layout()</span></pre></td></tr><tr><td class="code"><pre><span class="line">    plt.show()</span></pre></td></tr><tr><td class="code"><pre><span class="line">    plt.close(fig)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    main()</span></pre></td></tr></table></figure>

</details>  


<p><img src="http://hotobun.gitee.io/hexo/img/archive_img/matplotlib_grawave.png" alt="引力波"></p>
]]></content>
      <tags>
        <tag>Matplotlib</tag>
      </tags>
  </entry>
  <entry>
    <title>Numpy图像处理</title>
    <url>/2020/01/06/numpy_image/</url>
    <content><![CDATA[<h2 id="图像的RGB色彩模式"><a href="#图像的RGB色彩模式" class="headerlink" title="图像的RGB色彩模式"></a>图像的RGB色彩模式</h2><p>RGB三个颜色捅到的变化和叠加得到各种颜色，其中：  </p>
<ul>
<li>R红色, 取值范围, 0-255  </li>
<li>G绿色, 取值范围, 0-255  </li>
<li>B蓝色, 取值范围, 0-255<br>RGB形成的颜色包括了人类视力所能感知的所有颜色。</li>
</ul>
<p>这里有1张图像<br>图像可以平铺成xy轴形成的像素阵列<br>每一个图像都是由三个字节作为一个元素形成的二维矩阵<br><img src="http://hotobun.gitee.io/hexo/img/archive_img/numpy_miku.jpg" alt=""></p>
<p>这里需要用到PIL库</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>miku = np.array(Image.open(<span class="string">"miku.jpg"</span>))</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(miku.shape, miku.dtype)</span></pre></td></tr><tr><td class="code"><pre><span class="line">(<span class="number">1135</span>, <span class="number">1000</span>, <span class="number">3</span>) uint8</span></pre></td></tr></table></figure>

<p>打开图像发现 这张图片是一个三维数组<br>分别是高度、宽度、像素rgb值</p>
<p>既然图片是可以用数据来表示<br>那么我们修改它的值 是不是就等于可以修改图片？<br>于是 我们再弄一张图片<br><img src="http://hotobun.gitee.io/hexo/img/archive_img/numpy_hat.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>hat = np.array(Image.open(<span class="string">"hat.png"</span>))</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>hat</span></pre></td></tr><tr><td class="code"><pre><span class="line">array([[[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ...,        <span class="comment"># 此处省略非常多行 无法直观查看</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]]], dtype=uint8)</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 可以看到这张图片非常多rgb值全为0的像素   </span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 这些像素其实是空白的 什么都没有 但是在矩阵中间就有我们要的帽子图片数据</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">"图像高度 = &#123;&#125;\n图像宽度 = &#123;&#125;"</span>.format(len(hat),len(hat[<span class="number">0</span>])))</span></pre></td></tr><tr><td class="code"><pre><span class="line">图像高度 = <span class="number">167</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">图像宽度 = <span class="number">515</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 下面来遍历一次hat的像素 </span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 如果是像素不空 就是帽子的数据 用帽子覆盖原图的数据</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># png是4色rgb jpg是三色 这里就舍弃第四色了 因为尝试了三色最后补0 是纯白色的</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> x <span class="keyword">in</span> range(hat.shape[<span class="number">0</span>]):</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> range(hat.shape[<span class="number">1</span>]):</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> sum(hat[x][y]) != <span class="number">0</span>:      </span></pre></td></tr><tr><td class="code"><pre><span class="line">                </span></pre></td></tr><tr><td class="code"><pre><span class="line">                miku[x][y] = hat[x][y][:<span class="number">3</span>]  </span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 保存新图像	</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>new_img = Image.fromarray(miku.astype(<span class="string">'uint8'</span>))</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>new_img.save(<span class="string">"new_miku.jpg"</span>)</span></pre></td></tr></table></figure>

<p>合成后的图片<br>为什么位置这么好？ 因为我在ps上先摆好位置了 前面用空白填充占位<br>技术渣 一看就知道合成的 边缘无解<br><img src="http://hotobun.gitee.io/hexo/img/archive_img/numpy_new_miku.jpg" alt=""></p>
<hr>
<h2 id="图像变换"><a href="#图像变换" class="headerlink" title="图像变换"></a>图像变换</h2><p>有了上面知识之后 我们可以对图像做更多的处理</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">()</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    new = [<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>] - np.array(miku_img)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Image.fromarray(new.astype(<span class="string">'uint8'</span>)).save(<span class="string">"miku1.jpg"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span><span class="params">()</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    miku = np.array(miku_img.convert(<span class="string">"L"</span>))</span></pre></td></tr><tr><td class="code"><pre><span class="line">    new = <span class="number">255</span> - miku</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Image.fromarray(new.astype(<span class="string">'uint8'</span>)).save(<span class="string">"miku2.jpg"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func3</span><span class="params">()</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    new = (<span class="number">100</span>/<span class="number">255</span>) * np.array(miku_img) + <span class="number">150</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    Image.fromarray(new.astype(<span class="string">'uint8'</span>)).save(<span class="string">"miku3.jpg"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    func1()</span></pre></td></tr><tr><td class="code"><pre><span class="line">    func2()</span></pre></td></tr><tr><td class="code"><pre><span class="line">    func3() </span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    miku_img = Image.open(<span class="string">"miku.jpg"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    main()</span></pre></td></tr></table></figure>

<p>不知道叫什么图 直接放出来做对比吧 分别对应func1、func2、func3<br><img src="http://hotobun.gitee.io/hexo/img/archive_img/miku1.jpg" alt=""><br><img src="http://hotobun.gitee.io/hexo/img/archive_img/miku2.jpg" alt=""><br><img src="http://hotobun.gitee.io/hexo/img/archive_img/miku3.jpg" alt=""></p>
]]></content>
      <tags>
        <tag>python</tag>
        <tag>numpy</tag>
        <tag>pillow</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo添加Valine评论系统</title>
    <url>/2020/01/05/valine/</url>
    <content><![CDATA[<h2 id="为什么用Valine"><a href="#为什么用Valine" class="headerlink" title="为什么用Valine"></a>为什么用Valine</h2><p>不需要登录<br>其他评论系统全都要注册或者第三方平台账号<br>不是换评论系统 只是在首页右上角菜单 加一个留言板页面</p>
<hr>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h4 id="创建valine文件夹及index-md"><a href="#创建valine文件夹及index-md" class="headerlink" title="创建valine文件夹及index.md"></a>创建valine文件夹及index.md</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo new page valine</span></pre></td></tr></table></figure>
<p>修改<code>source/valine/index.md</code> 添加type</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span></pre></td></tr><tr><td class="code"><pre><span class="line">title: valine </span></pre></td></tr><tr><td class="code"><pre><span class="line">type: &quot;valine&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">---</span></pre></td></tr></table></figure>

<hr>
<h4 id="修改diaspora-layout-page-ejs"><a href="#修改diaspora-layout-page-ejs" class="headerlink" title="修改diaspora/layout/page.ejs"></a>修改<code>diaspora/layout/page.ejs</code></h4><p>添加valine那两行 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;% if (page.search || page.type &#x3D;&#x3D;&#x3D; &quot;search&quot;) &#123; %&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;%- partial(&#39;_partial&#x2F;search&#39;) %&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;% &#125; else if (page.type &#x3D;&#x3D;&#x3D; &quot;tags&quot;) &#123; %&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;%- partial(&#39;_partial&#x2F;tags&#39;) %&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;% &#125; else if (page.type &#x3D;&#x3D;&#x3D; &#39;categories&#39;) &#123; %&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;%- partial(&#39;_partial&#x2F;categories&#39;) %&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;% &#125; else if (page.type &#x3D;&#x3D;&#x3D; &#39;valine&#39;) &#123; %&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;%- partial(&#39;_partial&#x2F;valine&#39;) %&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;% &#125; else &#123; %&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &lt;%- page.content %&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;% &#125; %&gt;</span></pre></td></tr></table></figure>

<hr>
<h4 id="新建文件diaspora-layout-partial-valine-ejs"><a href="#新建文件diaspora-layout-partial-valine-ejs" class="headerlink" title="新建文件diaspora/layout/_partial/valine.ejs"></a>新建文件<code>diaspora/layout/_partial/valine.ejs</code></h4><p>这几行代码只要在html中有个合适的位置插入即可</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"valine_comment"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="actionscript">  <span class="keyword">var</span> notify = <span class="string">'&lt;%= theme.valine.notify %&gt;'</span> == <span class="literal">true</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="actionscript">  <span class="keyword">var</span> verify = <span class="string">'&lt;%= theme.valine.verify %&gt;'</span> == <span class="literal">true</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="actionscript">  <span class="keyword">new</span> Valine(&#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      av: AV,</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="actionscript">      el: <span class="string">'.valine_comment'</span>,</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="actionscript">      app_id: <span class="string">'&lt;%= theme.valine.appid %&gt;'</span>,</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="actionscript">      app_key: <span class="string">'&lt;%= theme.valine.appkey %&gt;'</span>,</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="actionscript">      placeholder: <span class="string">'&lt;%= theme.valine.placeholder %&gt;'</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></pre></td></tr></table></figure>
<hr>
<h4 id="修改head-ejs"><a href="#修改head-ejs" class="headerlink" title="修改head.ejs"></a>修改head.ejs</h4><p>加载js文件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">&lt;!-- head中间插入下面两条语句 --&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">page.type</span> === <span class="string">'valine'</span>) &#123; %&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//cdn1.lncld.net/static/js/3.0.4/av-min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">page.type</span> === <span class="string">'valine'</span>) &#123; %&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//cdn.jsdelivr.net/npm/valine@1.1.9-beta9/dist/Valine.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></pre></td></tr></table></figure>

<hr>
<h4 id="LeanCloud"><a href="#LeanCloud" class="headerlink" title="LeanCloud"></a>LeanCloud</h4><p>注册 登录<a href="https://www.leancloud.cn/" target="_blank" rel="noopener">leancloud</a><br>不喜欢实名可以用国际版 需要手机号、邮箱</p>
<p>创建应用 按提示填</p>
<p>进入应用 -&gt; 设置 -&gt; 安全中心 -&gt; web安全域名<br>填写自己域名</p>
<p>进入应用 -&gt; 设置 -&gt; 应用Keys<br>可以看到appid appkey 等信息</p>
<hr>
<h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>修改<code>diaspora/_config.yml</code>添加下面配置<br>详细配置参考<a href="https://valine.js.org/" target="_blank" rel="noopener">valine官网</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">menu:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ... </span></pre></td></tr><tr><td class="code"><pre><span class="line">  留言板: &#x2F;valine</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"># 文件末尾添加valine配置</span></pre></td></tr><tr><td class="code"><pre><span class="line">valine:</span></pre></td></tr><tr><td class="code"><pre><span class="line">  enable: true      </span></pre></td></tr><tr><td class="code"><pre><span class="line">  appid:  #  leancloud </span></pre></td></tr><tr><td class="code"><pre><span class="line">  appkey: #  leancloud </span></pre></td></tr><tr><td class="code"><pre><span class="line">  notify: true </span></pre></td></tr><tr><td class="code"><pre><span class="line">  verify: false  </span></pre></td></tr><tr><td class="code"><pre><span class="line">  placeholder: 说点什么吧！ </span></pre></td></tr><tr><td class="code"><pre><span class="line">  avatar: hide </span></pre></td></tr><tr><td class="code"><pre><span class="line">  guest_info: nick # custom comment header</span></pre></td></tr><tr><td class="code"><pre><span class="line">  pageSize: 10 # pagination size</span></pre></td></tr><tr><td class="code"><pre><span class="line">  recordIP: false</span></pre></td></tr></table></figure>


<p>留言记录可以在 储存 -&gt; Comment查看</p>
]]></content>
      <tags>
        <tag>blog</tag>
        <tag>valine</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo diaspora主题增加搜索功能</title>
    <url>/2020/01/04/search/</url>
    <content><![CDATA[<h4 id="github"><a href="#github" class="headerlink" title="github"></a><a href="https://github.com/Hotobun/hexo-theme-diaspora-search" target="_blank" rel="noopener">github</a></h4><h3 id="搜索引擎"><a href="#搜索引擎" class="headerlink" title="搜索引擎"></a>搜索引擎</h3><p>搜索的本质就是寻找目标资源<br>网页常用的搜索<br>客户端提交表单-&gt;服务器查询数据库-&gt;返回数据到客户端<br>这种类型需要后台逻辑</p>
<hr>
<h3 id="静态网页怎么办"><a href="#静态网页怎么办" class="headerlink" title="静态网页怎么办"></a>静态网页怎么办</h3><p>网页做成之后 内容就无法改变 没有程序代码生成新数据<br>没有后台 不能写数据、常规的留言、访问次数 自身都做不了 想要只能调用外面的api</p>
<p>突然灵机一动 既然没有后台 就不要想动态处理的方式<br>前端不是有JavaScript吗 我们就用前端吧</p>
<hr>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>搜索页面先把所有文章标题都列举出来<br>div标签设置隐藏 看上去就跟空标签一样<br>JavaScript捕捉搜索框输入的文本<br>有了用户搜索的字符串 有了文章标题列表<br>只要文章标题含有搜索文本的div 全部取消隐藏<br>这样 文章就显示出来了<br>最后加个计数器 搜索完成</p>
<hr>
<h3 id="弊端"><a href="#弊端" class="headerlink" title="弊端"></a>弊端</h3><p>不适用太多数据 因为页面其实一开始就已经把所有文章列举出来的<br>我写的少 不慌 目测300篇内不出大问题</p>
<hr>
<h3 id="输入框"><a href="#输入框" class="headerlink" title="输入框"></a>输入框</h3><p>用了站长之家找的样式 稍作改动 还不错<br>每按下一个按键 都能捕捉到 不需要按回车 取消了放大镜小图标<br><a href="http://sc.chinaz.com/jiaoben/130222276600.htm" target="_blank" rel="noopener">可扩展css3圆形搜索框</a>  </p>
<form style=" text-align:center">    
    <style >
        input {
            outline: none;
        }
        input[type=search] {
            -webkit-appearance: textfield;
            font-family: inherit;
            font-size: 100%;
        }
        input::-webkit-search-decoration,
        input::-webkit-search-cancel-button {
            display: none;
        }
        input[type=search] {
            border: solid 1px #ccc;
            padding: 9px 9px 9px 9px;
            width: 200px;
            -webkit-border-radius: 10em;
            -moz-border-radius: 10em;
            border-radius: 10em;
            -webkit-transition: all .5s;
            -moz-transition: all .5s;
            transition: all .5s;
        }
        input[type=search]:focus {
            width: 130px;
            background-color: #fff;
            border-color: #6dcff6;
            margin-left: -11px;
            margin-right: 11;
            width: 330px;
            -webkit-box-shadow: 0 0 5px rgba(109, 207, 246, .5);
            -moz-box-shadow: 0 0 5px rgba(109, 207, 246, .5);
            box-shadow: 0 0 5px rgba(109, 207, 246, .5);
        }
        input:-moz-placeholder {
            color: #999;
        }
        input::-webkit-input-placeholder {
            color: #999;
        }
    </style>
    <input id = "search" name= "search" type="search" placeholder="积极开发中" 
    autocomplete="off" style="text-align:center" onfocus="this.setAttribute('placeholder', ''); " 
    onblur="if (this.value == '') this.setAttribute('placeholder', '下次一定！');" 
    onkeyup="text_button_search_onkeypress(),this.value=this.value.replace(/(^\s*)/g,'')">
    <input id = "search-btn" style="display: none;">
</form>

<p><span>检测到的文本: </span><span id = "search_test"></span></p>
<hr>
<h3 id="食用方法"><a href="#食用方法" class="headerlink" title="食用方法"></a>食用方法</h3><p><code>gitbash</code> 下运行的  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new page search      <span class="comment">#这行只是创建文件夹和index.md</span></span></pre></td></tr></table></figure>


<p>编辑Hexo的<code>source/search/</code>文件夹下的<code>index.md</code> 写入<code>type</code>   </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span></pre></td></tr><tr><td class="code"><pre><span class="line">title: search</span></pre></td></tr><tr><td class="code"><pre><span class="line">type: &quot;search&quot;  </span></pre></td></tr><tr><td class="code"><pre><span class="line">---</span></pre></td></tr></table></figure>

<p><code>themes/diaspora/layout/</code>文件夹下创建<code>search.ejs</code></p>
<p>最后主题的_config.yml文件修改 menu</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 头部菜单，title: link</span></pre></td></tr><tr><td class="code"><pre><span class="line">menu:</span></pre></td></tr><tr><td class="code"><pre><span class="line">  主页: &#39;&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  标签: &#x2F;tags </span></pre></td></tr><tr><td class="code"><pre><span class="line">  归档: &#x2F;archives </span></pre></td></tr><tr><td class="code"><pre><span class="line">  搜索: &#x2F;search</span></pre></td></tr></table></figure>

<details>
  <summary> diaspora.js 文件末尾添加 </summary>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_posts</span>(<span class="params">text</span>)</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> posts = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'timeline-item'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// console.log(posts.length);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (text == <span class="string">""</span>)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        all_none(posts);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> ;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> count = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;posts.length; ++i)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">var</span> temp = posts[i].id.toLowerCase();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> ( temp.search(text) != <span class="number">-1</span> )&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            posts[i].style = <span class="string">"display: block"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            count += <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">// console.log(posts[i].id);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            posts[i].style = <span class="string">"display: none"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (count &gt; <span class="number">0</span>)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">var</span> search_count = <span class="built_in">document</span>.getElementById(<span class="string">'search_count'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        search_count.style = <span class="string">"display: block"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        search_count.innerHTML = <span class="string">"为你献上"</span>+count+ <span class="string">"篇"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">'search_count'</span>).style = <span class="string">"display: none"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">all_none</span>(<span class="params">posts</span>)</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;posts.length; ++i)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">'search_count'</span>).style = <span class="string">"display: none"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        posts[i].style = <span class="string">"display: none"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">button_search_onkeypress</span>(<span class="params"></span>)</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> text = <span class="built_in">document</span>.getElementById(<span class="string">"search"</span>).value.toLowerCase();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// console.log("读取到的文本:"+ text );</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    get_posts(text);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">text_button_search_onkeypress</span>(<span class="params"></span>)</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> text = <span class="built_in">document</span>.getElementById(<span class="string">"search"</span>).value.toLowerCase();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> p = <span class="built_in">document</span>.getElementById(<span class="string">"search_test"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    p.innerHTML = text;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

</details>  


<details>
  <summary> search.ejs 新建文件 </summary>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hexosearch"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">style</span> &gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        input &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            outline: none;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="css">        <span class="selector-tag">input</span><span class="selector-attr">[type=search]</span> &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            -webkit-appearance: textfield;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            font-family: inherit;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            font-size: 100%;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="css">        <span class="selector-tag">input</span><span class="selector-pseudo">::-webkit-search-decoration</span>,</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="css">        <span class="selector-tag">input</span><span class="selector-pseudo">::-webkit-search-cancel-button</span> &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            display: none;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="css">        <span class="selector-tag">input</span><span class="selector-attr">[type=search]</span> &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="css">            <span class="selector-tag">border</span>: <span class="selector-tag">solid</span> 1<span class="selector-tag">px</span> <span class="selector-id">#ccc</span>;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            padding: 9px 9px 9px 9px;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            width: 200px;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            -webkit-border-radius: 10em;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            -moz-border-radius: 10em;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            border-radius: 10em;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="css">            <span class="selector-tag">-webkit-transition</span>: <span class="selector-tag">all</span> <span class="selector-class">.5s</span>;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="css">            <span class="selector-tag">-moz-transition</span>: <span class="selector-tag">all</span> <span class="selector-class">.5s</span>;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="css">            <span class="selector-tag">transition</span>: <span class="selector-tag">all</span> <span class="selector-class">.5s</span>;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="css">        <span class="selector-tag">input</span><span class="selector-attr">[type=search]</span><span class="selector-pseudo">:focus</span> &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            width: 130px;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span>;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="css">            <span class="selector-tag">border-color</span>: <span class="selector-id">#6dcff6</span>;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            margin-left: -11px;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            margin-right: 11;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            width: 330px;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="css">            <span class="selector-tag">-webkit-box-shadow</span>: 0 0 5<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(109, 207, 246, <span class="selector-class">.5</span>);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="css">            <span class="selector-tag">-moz-box-shadow</span>: 0 0 5<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(109, 207, 246, <span class="selector-class">.5</span>);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="css">            <span class="selector-tag">box-shadow</span>: 0 0 5<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(109, 207, 246, <span class="selector-class">.5</span>);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="css">        <span class="selector-tag">input</span><span class="selector-pseudo">:-moz-placeholder</span> &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-id">#999</span>;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="css">        <span class="selector-tag">input</span><span class="selector-pseudo">::-webkit-input-placeholder</span> &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-id">#999</span>;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"margin-top: 123px;text-align:center"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">form</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span> = <span class="string">"search"</span> <span class="attr">name</span>= <span class="string">"search"</span> <span class="attr">type</span>=<span class="string">"search"</span> <span class="attr">placeholder</span>=<span class="string">"积极开发中"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span> <span class="attr">style</span>=<span class="string">"text-align:center"</span> <span class="attr">onfocus</span>=<span class="string">"this.setAttribute('placeholder', ''); "</span> <span class="attr">onblur</span>=<span class="string">"if (this.value == '') this.setAttribute('placeholder', '下次一定！');"</span> <span class="attr">onkeyup</span>=<span class="string">"button_search_onkeypress(),this.value=this.value.replace(/(^\s*)/g,'')"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span> = <span class="string">"search-btn"</span> <span class="attr">style</span>=<span class="string">"display: none;"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 下面是归档代码 直接套过来 --&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"single"</span> <span class="attr">class</span>=<span class="string">"page"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"top"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"icon-left image-icon"</span> <span class="attr">href</span>=<span class="string">"javascript:history.back()"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"section"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"article"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"timeline"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                      <span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span>=<span class="string">"display:none"</span> <span class="attr">class</span>=<span class="string">"timeline-title"</span> <span class="attr">id</span>=<span class="string">"search_count"</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                      <span class="tag">&lt;<span class="name">%</span> <span class="attr">var</span> <span class="attr">posts</span> = <span class="string">site.posts.sort(</span>'<span class="attr">date</span>', '<span class="attr">desc</span>'); %&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                      &lt;% for(let i = 0, year = -1; i &lt; posts.data.length; ++i) &#123; %&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        <span class="tag">&lt;<span class="name">%</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">                          <span class="attr">const</span> <span class="attr">psg</span> = <span class="string">posts.data[i];</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">                          <span class="attr">if</span>(<span class="attr">psg.date.year</span>() !== <span class="string">year)</span> &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">                            <span class="attr">year</span> = <span class="string">psg.date.year();</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">                        %&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                        <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">                        <span class="tag">&lt;<span class="name">%</span> <span class="attr">var</span> <span class="attr">text</span> = <span class="string">""</span> %&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                        &lt;% for(let i = 0; i &lt; psg.tags.data.length; ++i) &#123; %&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                            <span class="tag">&lt;<span class="name">%</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">                              <span class="attr">text</span> += <span class="string">"|"</span>;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">                              <span class="attr">text</span> += <span class="string">psg.tags.data[i].name;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">                            %&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                            <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                        &lt;div style="display:none" class="timeline-item" id=&lt;%= psg.title + text %&gt; &gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                          <span class="tag">&lt;<span class="name">time</span>&gt;</span><span class="tag">&lt;<span class="name">%-</span> <span class="attr">psg.date.format</span>("<span class="attr">YYYY-MM-DD</span>") %&gt;</span><span class="tag">&lt;/<span class="name">time</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                          <span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">"_self"</span> <span class="attr">href</span>=<span class="string">"&lt;%- url_for(psg.path) %&gt;"</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">psg.title</span> %&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                      <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr></table></figure>
</details>  
]]></content>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>Numpy笔记</title>
    <url>/2020/01/01/numpy/</url>
    <content><![CDATA[<h2 id="numpy-数组对象-ndarray"><a href="#numpy-数组对象-ndarray" class="headerlink" title="numpy 数组对象 ndarray"></a>numpy 数组对象 ndarray</h2><h4 id="为什么使用ndarray"><a href="#为什么使用ndarray" class="headerlink" title="为什么使用ndarray"></a>为什么使用ndarray</h4><ul>
<li>科学计算涉及数据较多,对存储和性能都有较高要求。</li>
<li>对元素类型精细定义,有助于Numpy合理使用存储空间并优化性能。</li>
<li>对元素类型精细定义,有助于对程序规模有合理评估。</li>
<li>ndarray允许非同质元素构成数组（各元素类型不一致）,但无法发挥Numpy优势,尽量避免使用。</li>
</ul>
<details>
  <summary> 举个栗子 </summary>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; import numpy as np  </span></pre></td></tr><tr><td class="code"><pre><span class="line">     </span></pre></td></tr><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; np.array([range(5), range(5,10)])  </span></pre></td></tr><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a  </span></pre></td></tr><tr><td class="code"><pre><span class="line">array([[0, 1, 2, 3, 4],  </span></pre></td></tr><tr><td class="code"><pre><span class="line">[5, 6, 7, 8, 9]])   </span></pre></td></tr><tr><td class="code"><pre><span class="line">   </span></pre></td></tr><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; print(a)  </span></pre></td></tr><tr><td class="code"><pre><span class="line">[[0 1 2 3 4]  </span></pre></td></tr><tr><td class="code"><pre><span class="line">[5 6 7 8 9]]  </span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a.ndim </span></pre></td></tr><tr><td class="code"><pre><span class="line">2 </span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a.shape  </span></pre></td></tr><tr><td class="code"><pre><span class="line">(2, 5)  </span></pre></td></tr><tr><td class="code"><pre><span class="line">   </span></pre></td></tr><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a.size  </span></pre></td></tr><tr><td class="code"><pre><span class="line">10  </span></pre></td></tr><tr><td class="code"><pre><span class="line">   </span></pre></td></tr><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a.dtype  </span></pre></td></tr><tr><td class="code"><pre><span class="line">dtype(&#39;int32&#39;)  </span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a.itemsize  </span></pre></td></tr><tr><td class="code"><pre><span class="line">4</span></pre></td></tr></table></figure>

</details>  


<hr>
<h4 id="ndarray对象常用属性"><a href="#ndarray对象常用属性" class="headerlink" title="ndarray对象常用属性"></a>ndarray对象常用属性</h4><table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">array.ndim</td>
<td align="left">秩,即轴的数量或维度数量</td>
</tr>
<tr>
<td align="left">array.shape</td>
<td align="left">ndarray对象的尺度,对于矩阵,n行m列</td>
</tr>
<tr>
<td align="left">array.size</td>
<td align="left">ndarray对象元素个数,相当于.shape中n*m的值</td>
</tr>
<tr>
<td align="left">array.dtype</td>
<td align="left">ndarray对象的元素类型</td>
</tr>
<tr>
<td align="left">array.itemsize</td>
<td align="left">ndarray对象中每个元素的大小,以字节为单位</td>
</tr>
</tbody></table>
<hr>
<h4 id="ndarray的元素类型"><a href="#ndarray的元素类型" class="headerlink" title="ndarray的元素类型"></a>ndarray的元素类型</h4><table>
<thead>
<tr>
<th align="left">数据类型</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">bool</td>
<td align="left">布尔类型, True或False</td>
</tr>
<tr>
<td align="left">intc</td>
<td align="left">与C语言中int类型一致, 一半是int32或int64</td>
</tr>
<tr>
<td align="left">intp</td>
<td align="left">用于索引的整数, 与C语言中ssize_t一致,int32或int64</td>
</tr>
<tr>
<td align="left">int8</td>
<td align="left">字节长度的整数, 取值: [-128,127]</td>
</tr>
<tr>
<td align="left">int16</td>
<td align="left">16位长度的整数, 取值: [-32768,32767]</td>
</tr>
<tr>
<td align="left">int32</td>
<td align="left">32位长度的整数, 取值: [-pow(2,31), pow(2,31)-1]</td>
</tr>
<tr>
<td align="left">int64</td>
<td align="left">64位长度的整数, 取值: [-pow(2,63), pow(2,63)-1]</td>
</tr>
<tr>
<td align="left">uint8</td>
<td align="left">8位无符号整数, 取值: [0,255]</td>
</tr>
<tr>
<td align="left">uint16</td>
<td align="left">16位无符号整数, 取值: [0,65535]</td>
</tr>
<tr>
<td align="left">uint32</td>
<td align="left">32位无符号整数, 取值: [0,pow(2,32)-1]</td>
</tr>
<tr>
<td align="left">uint64</td>
<td align="left">64位无符号整数, 取值: [0,pow(2,64)-1]</td>
</tr>
<tr>
<td align="left">float16</td>
<td align="left">16位半精度浮点数, 1位符号位,5位指数,10位尾数</td>
</tr>
<tr>
<td align="left">float32</td>
<td align="left">32位半精度浮点数, 1位符号位,8位指数,23位尾数</td>
</tr>
<tr>
<td align="left">float64</td>
<td align="left">64位半精度浮点数, 1位符号位,11位指数,52位尾数</td>
</tr>
<tr>
<td align="left">complex64</td>
<td align="left">复数类型,实部和虚部都是32位浮点数</td>
</tr>
<tr>
<td align="left">complex128</td>
<td align="left">复数类型,实部和虚部都是64位浮点数</td>
</tr>
</tbody></table>
<hr>
<h4 id="ndarray创建方法"><a href="#ndarray创建方法" class="headerlink" title="ndarray创建方法"></a>ndarray创建方法</h4><ul>
<li>从Python中的列表、元祖等类型创建ndarray数组：<ul>
<li><code>x = np.array(list/tuple/range(), dtype = np.float32)</code></li>
<li>当np.array()不指定dtype时,Numpy将根据数据情况关联一个dtype类型。</li>
</ul>
</li>
<li>使用Numpy中的函数创建ndarray数组,如arange、ones、zeros等</li>
</ul>
<table>
<thead>
<tr>
<th align="left">函数</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">np.arange(n)</td>
<td align="left">类似range()函数,返回ndarray类型,元素从0-n-1</td>
</tr>
<tr>
<td align="left">np.ones(shape)</td>
<td align="left">根据shape生成一个全1的数组,shape是元祖类型</td>
</tr>
<tr>
<td align="left">np.zeros(shape)</td>
<td align="left">根据shape生成一个全0的数组,shape是元祖类型</td>
</tr>
<tr>
<td align="left">np.full(shape,val)</td>
<td align="left">根据shape生成一个数组,每个元素的值都是val</td>
</tr>
<tr>
<td align="left">np.eye(n)</td>
<td align="left">创建一个正方的n*n单位矩阵,对角线为1,其余为0</td>
</tr>
<tr>
<td align="left">np.ones_like(a)</td>
<td align="left">根据数组a的形状生成一个全1数组</td>
</tr>
<tr>
<td align="left">np.zeros_like(a)</td>
<td align="left">根据数组a的形状生成一个全0数组</td>
</tr>
<tr>
<td align="left">np.full_like(a,val)</td>
<td align="left">根据数组a的星创生成一个数组,每个元素值都是val</td>
</tr>
<tr>
<td align="left">np.linspace()</td>
<td align="left">根据起止数据间距地填充数据,形成数组</td>
</tr>
<tr>
<td align="left">np.concatenate()</td>
<td align="left">将两个或多个数组合并成一个新数组</td>
</tr>
</tbody></table>
<details>
  <summary> 举个栗子 </summary>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.linspace(<span class="number">1</span>,<span class="number">10</span>,<span class="number">4</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span></pre></td></tr><tr><td class="code"><pre><span class="line">array([ <span class="number">1.</span>,  <span class="number">4.</span>,  <span class="number">7.</span>, <span class="number">10.</span>])</span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = np.linspace(<span class="number">1</span>,<span class="number">10</span>,<span class="number">4</span>,endpoint=<span class="literal">False</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b </span></pre></td></tr><tr><td class="code"><pre><span class="line">array([<span class="number">1.</span>  , <span class="number">3.25</span>, <span class="number">5.5</span> , <span class="number">7.75</span>])</span></pre></td></tr><tr><td class="code"><pre><span class="line">   </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.concatenate((a,b))</span></pre></td></tr><tr><td class="code"><pre><span class="line">array([ <span class="number">1.</span>  ,  <span class="number">4.</span>  ,  <span class="number">7.</span>  , <span class="number">10.</span>  ,  <span class="number">1.</span>  ,  <span class="number">3.25</span>,  <span class="number">5.5</span> ,  <span class="number">7.75</span>])</span></pre></td></tr></table></figure>

</details>  


<hr>
<h4 id="ndarray数组的维度变化"><a href="#ndarray数组的维度变化" class="headerlink" title="ndarray数组的维度变化"></a>ndarray数组的维度变化</h4><table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">.reshape(shape)</td>
<td align="left">不改变数组元素，返回一个shape形状的数组，原数组不变</td>
</tr>
<tr>
<td align="left">.resize(shape)</td>
<td align="left">与.reshape()功能一致，但改变原数组</td>
</tr>
<tr>
<td align="left">.swapaxes(ax1,ax2)</td>
<td align="left">将数组n个维度中的两个维度进行调换</td>
</tr>
<tr>
<td align="left">.flatten()</td>
<td align="left">将数组进行降维，返回折叠后的一位数组，原数组不变</td>
</tr>
</tbody></table>
<details>
  <summary> 栗子又来了 </summary>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 不需要特别指定np.int32/np.int64 Nunpy动态识别</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.ones((<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>),dtype = np.int) </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span></pre></td></tr><tr><td class="code"><pre><span class="line">array([[[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]],</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line">       [[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]]])</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.resize((<span class="number">3</span>,<span class="number">8</span>))</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span></pre></td></tr><tr><td class="code"><pre><span class="line">array([[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">       [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">       [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]])</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.flatten()     <span class="comment"># 原数组a没有改变 只是返回了一位数组</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">array([<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="number">1</span>, <span class="number">1</span>])</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = np.ones((<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>),dtype = np.int)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = b.astype(np.float)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>c                       <span class="comment"># 没有改变原数组b</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">array([[[<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>],   <span class="comment"># c里面的元素为float </span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        [<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>]],</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">       [[<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>]]])</span></pre></td></tr></table></figure>

</details>  


<hr>
<h4 id="ndarray数组向列表转换"><a href="#ndarray数组向列表转换" class="headerlink" title="ndarray数组向列表转换"></a>ndarray数组向列表转换</h4><details>
  <summary> 使用ndarray的tolist()方法   </summary>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.full((<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>), <span class="number">23</span>,dtype = np.int)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span></pre></td></tr><tr><td class="code"><pre><span class="line">array([[[<span class="number">23</span>, <span class="number">23</span>, <span class="number">23</span>, <span class="number">23</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [<span class="number">23</span>, <span class="number">23</span>, <span class="number">23</span>, <span class="number">23</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [<span class="number">23</span>, <span class="number">23</span>, <span class="number">23</span>, <span class="number">23</span>]],</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line">       [[<span class="number">23</span>, <span class="number">23</span>, <span class="number">23</span>, <span class="number">23</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [<span class="number">23</span>, <span class="number">23</span>, <span class="number">23</span>, <span class="number">23</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [<span class="number">23</span>, <span class="number">23</span>, <span class="number">23</span>, <span class="number">23</span>]]])</span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ls = a.tolist() </span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(ls)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">list</span>'&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class">  </span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">ls</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">[[[23, 23, 23, 23], [23, 23, 23, 23], [23, 23, 23, 23]], [[23, 23, 23, 23], [23, 23, 23, 23], [23, 23, 23, 23]]]</span></pre></td></tr></table></figure>

</details>  

<hr>
<h2 id="ndarray数组的操作"><a href="#ndarray数组的操作" class="headerlink" title="ndarray数组的操作"></a>ndarray数组的操作</h2><h4 id="数组的索引和切片"><a href="#数组的索引和切片" class="headerlink" title="数组的索引和切片"></a>数组的索引和切片</h4><ul>
<li>一维数组的索引和切片：与Python的列表类似</li>
</ul>
<details>
  <summary> 举个栗子 </summary>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.array([<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>])</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">2</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">7</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">1</span>:<span class="number">5</span>:<span class="number">2</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line">array([<span class="number">8</span>, <span class="number">6</span>])</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">1</span>:<span class="number">4</span>:<span class="number">2</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line">array([<span class="number">8</span>, <span class="number">6</span>])</span></pre></td></tr></table></figure>
</details>  


<ul>
<li>多维数组的索引和切片: </li>
<li>注意 索引时 用逗号分隔</li>
</ul>
<details>
  <summary> 举个栗子 </summary>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.arange(<span class="number">24</span>).reshape((<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span></pre></td></tr><tr><td class="code"><pre><span class="line">array([[[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [ <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [ <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>]],</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line">       [[<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [<span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [<span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>]]])</span></pre></td></tr><tr><td class="code"><pre><span class="line">         </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">23</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">6</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">-1</span>,<span class="number">-2</span>,<span class="number">-3</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">17</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[:,<span class="number">1</span>,<span class="number">-3</span>]   <span class="comment"># 选取一个维度用 : </span></span></pre></td></tr><tr><td class="code"><pre><span class="line">array([ <span class="number">5</span>, <span class="number">17</span>])</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[:,<span class="number">1</span>:<span class="number">3</span>,:]  <span class="comment"># 第二维度选取第1-3行的数据 </span></span></pre></td></tr><tr><td class="code"><pre><span class="line">array([[[ <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [ <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>]],</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line">       [[<span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [<span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>]]])</span></pre></td></tr><tr><td class="code"><pre><span class="line">         </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[:,:,::<span class="number">2</span>]    <span class="comment"># 每个维度都可以用 x:x:x 这类格式切片 逗号分隔</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">array([[[ <span class="number">0</span>,  <span class="number">2</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [ <span class="number">4</span>,  <span class="number">6</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [ <span class="number">8</span>, <span class="number">10</span>]],</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line">       [[<span class="number">12</span>, <span class="number">14</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [<span class="number">16</span>, <span class="number">18</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [<span class="number">20</span>, <span class="number">22</span>]]])</span></pre></td></tr></table></figure>

</details>  

<hr>
<h2 id="ndarray数组的运算"><a href="#ndarray数组的运算" class="headerlink" title="ndarray数组的运算"></a>ndarray数组的运算</h2><h4 id="数组与标量之间的运算"><a href="#数组与标量之间的运算" class="headerlink" title="数组与标量之间的运算"></a>数组与标量之间的运算</h4><p>数组与标量之间的运算作用与数组的每个元素</p>
<details>
  <summary> 举个栗子 </summary>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.arange(<span class="number">24</span>).reshape((<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span></pre></td></tr><tr><td class="code"><pre><span class="line">array([[[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [ <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [ <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>]],</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line">       [[<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [<span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [<span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>]]])</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.mean()    <span class="comment"># a的平均值</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">11.5</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = a / a.mean()   </span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a  </span></pre></td></tr><tr><td class="code"><pre><span class="line">array([[[<span class="number">0.</span>        , <span class="number">0.08695652</span>, <span class="number">0.17391304</span>, <span class="number">0.26086957</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [<span class="number">0.34782609</span>, <span class="number">0.43478261</span>, <span class="number">0.52173913</span>, <span class="number">0.60869565</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [<span class="number">0.69565217</span>, <span class="number">0.7826087</span> , <span class="number">0.86956522</span>, <span class="number">0.95652174</span>]],</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">       [[<span class="number">1.04347826</span>, <span class="number">1.13043478</span>, <span class="number">1.2173913</span> , <span class="number">1.30434783</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [<span class="number">1.39130435</span>, <span class="number">1.47826087</span>, <span class="number">1.56521739</span>, <span class="number">1.65217391</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [<span class="number">1.73913043</span>, <span class="number">1.82608696</span>, <span class="number">1.91304348</span>, <span class="number">2.</span>        ]]])</span></pre></td></tr></table></figure>

</details>  

<hr>
<h4 id="numpy一元函数"><a href="#numpy一元函数" class="headerlink" title="numpy一元函数"></a>numpy一元函数</h4><p>对ndarray中的数据执行元素级运算的函数<br>注意原数组是否改变  </p>
<table>
<thead>
<tr>
<th align="left">函数</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">np.abs(x) np.fabs(x)</td>
<td align="left">计算数组各元素的绝对值</td>
</tr>
<tr>
<td align="left">np.sqrt(x)</td>
<td align="left">计算数组各元素的平方根</td>
</tr>
<tr>
<td align="left">np.square(x)</td>
<td align="left">计算数组各元素的平方</td>
</tr>
<tr>
<td align="left">np.log(x) np.log10(x) np.log2(x)</td>
<td align="left">计算数组各元素自然对数、10低对数、2底对数</td>
</tr>
<tr>
<td align="left">np.eeil(x) np.floor(x)</td>
<td align="left">计算数组各元素ceiling值或floor值</td>
</tr>
<tr>
<td align="left">np.rint(x)</td>
<td align="left">计算数组各元素的四舍五入值</td>
</tr>
<tr>
<td align="left">np.modf(x)</td>
<td align="left">将数组各元素的小数和整数部分以两个独立数组形式返回</td>
</tr>
<tr>
<td align="left">np.cos(x) np.cosh(x)<br>np.sin(x) np.sinh(x)<br>np.tan(x) np.tanh(x)</td>
<td align="left">计算数组各元素的普通型和双曲型三角函数</td>
</tr>
<tr>
<td align="left">np.exp(x)</td>
<td align="left">计算数组各元素的指数值</td>
</tr>
<tr>
<td align="left">np.sign(x)</td>
<td align="left">计算数组各元素的符号值, 1(+), 0, -1(-)</td>
</tr>
</tbody></table>
<hr>
<h4 id="npmpy二元函数"><a href="#npmpy二元函数" class="headerlink" title="npmpy二元函数"></a>npmpy二元函数</h4><p>注意 数据类型不同会结果转换类型</p>
<table>
<thead>
<tr>
<th align="left">函数</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">+ - * / **</td>
<td align="left">两个数组各元素进行对应运算</td>
</tr>
<tr>
<td align="left">np.maximum(x,y) np.fmax()<br>np.minimum(x,y) np.fmin()</td>
<td align="left">元素级的最大值 最小值计算</td>
</tr>
<tr>
<td align="left">np.mod(x,y)</td>
<td align="left">元素级的模运算</td>
</tr>
<tr>
<td align="left">&gt; &lt; &gt;= &lt;= == !=</td>
<td align="left">算数比较，产生布尔类型数组</td>
</tr>
</tbody></table>
<hr>
<h2 id="CSV文件存储"><a href="#CSV文件存储" class="headerlink" title="CSV文件存储"></a>CSV文件存储</h2><p>CSV 只能有效存储一维和二维数组</p>
<ul>
<li>np.savetxt(frame, array,fmt=’%.18e’,)<ul>
<li>frame : 文件、字符串或生产器，可以是.gz或.bz2压缩文件</li>
<li>array : 存入文件的数组</li>
<li>fmt : 写入文件的格式，例如: %d %.2f %.18e</li>
<li>delimiter : 分隔字符串，默认是任何空格</li>
</ul>
</li>
<li>np.loadtxt(frame, dtype=np.float,delimiter=None,unpack=False)</li>
<li>unpack: 如果True，读入属性将分别写入不同变量</li>
</ul>
<details>
  <summary> 举个栗子 </summary>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.arange(<span class="number">100</span>).reshape(<span class="number">5</span>,<span class="number">20</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.savetxt(<span class="string">"a.csv"</span>, a, fmt=<span class="string">"%d"</span>, delimiter=<span class="string">","</span>)</span></pre></td></tr></table></figure>

</details>  

<hr>
<h2 id="多维数据的存取"><a href="#多维数据的存取" class="headerlink" title="多维数据的存取"></a>多维数据的存取</h2><ul>
<li>写入文件  </li>
<li>array.tofile(frame, sep=’’, format=’%s’)<ul>
<li>frame : 文件、字符串。</li>
<li>sep : 数据分隔字符串，如果是空串，写入文件为二进制。</li>
<li>format : 写入数据的格式 </li>
</ul>
</li>
<li>读入文件  </li>
<li>np.fromfile(frame, dtype=float, count=-1, sep=’’)<ul>
<li>from : 文件、字符串。</li>
<li>dtype : 读取的数据类型。</li>
<li>count : 读入元素个数，-1表示读入整个文件。</li>
<li>sep : 数据分隔字符串，如果是空串，写入为二进制文件</li>
</ul>
</li>
</ul>
<details>
  <summary> 举个栗子 </summary>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 读入时丢失维度信息</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.arange(<span class="number">100</span>).reshape(<span class="number">5</span>,<span class="number">10</span>,<span class="number">2</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.tofile(<span class="string">'a.dat'</span>,sep=<span class="string">','</span>,format=<span class="string">'%d'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = np.fromfile(<span class="string">'a.dat'</span>,dtype=np.int,sep=<span class="string">','</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span></pre></td></tr><tr><td class="code"><pre><span class="line">array([ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>,  <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>,  <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">33</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="number">34</span>, <span class="number">35</span>, <span class="number">36</span>, <span class="number">37</span>, <span class="number">38</span>, <span class="number">39</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">42</span>, <span class="number">43</span>, <span class="number">44</span>, <span class="number">45</span>, <span class="number">46</span>, <span class="number">47</span>, <span class="number">48</span>, <span class="number">49</span>, <span class="number">50</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="number">51</span>, <span class="number">52</span>, <span class="number">53</span>, <span class="number">54</span>, <span class="number">55</span>, <span class="number">56</span>, <span class="number">57</span>, <span class="number">58</span>, <span class="number">59</span>, <span class="number">60</span>, <span class="number">61</span>, <span class="number">62</span>, <span class="number">63</span>, <span class="number">64</span>, <span class="number">65</span>, <span class="number">66</span>, <span class="number">67</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="number">68</span>, <span class="number">69</span>, <span class="number">70</span>, <span class="number">71</span>, <span class="number">72</span>, <span class="number">73</span>, <span class="number">74</span>, <span class="number">75</span>, <span class="number">76</span>, <span class="number">77</span>, <span class="number">78</span>, <span class="number">79</span>, <span class="number">80</span>, <span class="number">81</span>, <span class="number">82</span>, <span class="number">83</span>, <span class="number">84</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="number">85</span>, <span class="number">86</span>, <span class="number">87</span>, <span class="number">88</span>, <span class="number">89</span>, <span class="number">90</span>, <span class="number">91</span>, <span class="number">92</span>, <span class="number">93</span>, <span class="number">94</span>, <span class="number">95</span>, <span class="number">96</span>, <span class="number">97</span>, <span class="number">98</span>, <span class="number">99</span>])</span></pre></td></tr></table></figure>
</details>  

<hr>
<h4 id="Numpy的文件存取"><a href="#Numpy的文件存取" class="headerlink" title="Numpy的文件存取"></a>Numpy的文件存取</h4><p>np.save(fname, array)<br>np.load(fname)  </p>
<ul>
<li>fname : 文件名, 以npy为扩展名，压缩扩展名为.npz</li>
<li>array : 数组</li>
<li>函数写入时为二进制 在第一行写入数组的格式、维度等信息。</li>
</ul>
<hr>
<h2 id="Numpy随机数函数"><a href="#Numpy随机数函数" class="headerlink" title="Numpy随机数函数"></a>Numpy随机数函数</h2><p>Numpy的random子库</p>
<table>
<thead>
<tr>
<th align="left">函数</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">rand(d0,d1,…dn)</td>
<td align="left">根据d0-dn创建随机数数组, 浮点数，[0,1),均匀分布</td>
</tr>
<tr>
<td align="left">randn(d0,d1,…dn)</td>
<td align="left">根据d0-dn创建随机数数组, 标准正态分布</td>
</tr>
<tr>
<td align="left">randint(low[,high,shape])</td>
<td align="left">根据shape创建随整数或整数数组, 范围是[low,high]</td>
</tr>
<tr>
<td align="left">seed(s)</td>
<td align="left">随机数种子, s是给定的种子值</td>
</tr>
<tr>
<td align="left">shuffle(a)</td>
<td align="left">根据数组a的第1轴进行随排列，改变数组a</td>
</tr>
<tr>
<td align="left">permutation(a)</td>
<td align="left">根据数组a的第1轴产生一个新的乱序数组, 不改变原数组a</td>
</tr>
<tr>
<td align="left">choice(a[,size,replace,p])</td>
<td align="left">从一维数组a中以概率p抽取元素, 形成size形状的新数组<br>replace表示是否可以重用已经抽取过的元素, 默认为False</td>
</tr>
<tr>
<td align="left">uniform(low,high,size)</td>
<td align="left">产生具有均匀分布的数组,low起始值,high结束值,size形状</td>
</tr>
<tr>
<td align="left">normal(loc,scale,size)</td>
<td align="left">产生具有正态分布的数组,low起始值,high结束值,size形状</td>
</tr>
<tr>
<td align="left">poisson(lam,size)</td>
<td align="left">产生具有泊松分布的数组,low起始值,high结束值,size形状</td>
</tr>
</tbody></table>
<details>
  <summary> 举个栗子 </summary>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.random.rand(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a           <span class="comment"># a中每一个元素都是0-1的浮点数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">array([[[<span class="number">0.15452677</span>, <span class="number">0.25611673</span>, <span class="number">0.05996533</span>, <span class="number">0.30784688</span>, <span class="number">0.61076912</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [<span class="number">0.97419945</span>, <span class="number">0.07812127</span>, <span class="number">0.72102359</span>, <span class="number">0.45809998</span>, <span class="number">0.28069965</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [<span class="number">0.12610894</span>, <span class="number">0.73117787</span>, <span class="number">0.41185995</span>, <span class="number">0.18200208</span>, <span class="number">0.1278643</span> ],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [<span class="number">0.62614096</span>, <span class="number">0.67611614</span>, <span class="number">0.19570993</span>, <span class="number">0.23621144</span>, <span class="number">0.37644739</span>]],</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">       [[<span class="number">0.20285208</span>, <span class="number">0.27180896</span>, <span class="number">0.34547558</span>, <span class="number">0.6352247</span> , <span class="number">0.18222024</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [<span class="number">0.00388704</span>, <span class="number">0.61147218</span>, <span class="number">0.5460321</span> , <span class="number">0.55337017</span>, <span class="number">0.8906205</span> ],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [<span class="number">0.85353295</span>, <span class="number">0.22419908</span>, <span class="number">0.4497947</span> , <span class="number">0.58824257</span>, <span class="number">0.61810413</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [<span class="number">0.95949658</span>, <span class="number">0.66264975</span>, <span class="number">0.97781385</span>, <span class="number">0.2107439</span> , <span class="number">0.92236653</span>]],</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">       [[<span class="number">0.43066557</span>, <span class="number">0.16767049</span>, <span class="number">0.30620594</span>, <span class="number">0.12492713</span>, <span class="number">0.73658079</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [<span class="number">0.07904855</span>, <span class="number">0.20670315</span>, <span class="number">0.27737149</span>, <span class="number">0.81358689</span>, <span class="number">0.49246908</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [<span class="number">0.35980528</span>, <span class="number">0.24863938</span>, <span class="number">0.26525837</span>, <span class="number">0.94329196</span>, <span class="number">0.29929699</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [<span class="number">0.73756989</span>, <span class="number">0.09329615</span>, <span class="number">0.62325811</span>, <span class="number">0.11992955</span>, <span class="number">0.73830728</span>]]])</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>sn = np.random.randn(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>sn          <span class="comment"># sn中每一个元素都是正态分布选取出来的</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">array([[[<span class="number">-0.02838625</span>,  <span class="number">0.19725212</span>, <span class="number">-2.78155638</span>, <span class="number">-0.20910768</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">         <span class="number">-0.04593518</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [ <span class="number">2.54073355</span>,  <span class="number">1.43916364</span>, <span class="number">-0.78217134</span>,  <span class="number">1.10371546</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">         <span class="number">-0.05848329</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [<span class="number">-0.760398</span>  , <span class="number">-0.3234643</span> , <span class="number">-0.19071447</span>,  <span class="number">0.08849098</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">         <span class="number">-0.85069017</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [ <span class="number">2.0699686</span> ,  <span class="number">1.40936463</span>,  <span class="number">0.6563804</span> , <span class="number">-0.28913246</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">         <span class="number">-0.07916769</span>]],</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line">       [[ <span class="number">0.36832057</span>, <span class="number">-1.23341445</span>, <span class="number">-0.52761537</span>, <span class="number">-0.44418993</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">          <span class="number">0.35394305</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [ <span class="number">1.15618384</span>,  <span class="number">2.63391705</span>, <span class="number">-1.44616932</span>, <span class="number">-0.61483465</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">          <span class="number">0.07563172</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [ <span class="number">0.361544</span>  , <span class="number">-0.53745145</span>,  <span class="number">0.1297379</span> , <span class="number">-0.86456911</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">         <span class="number">-1.32498471</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [ <span class="number">0.59044686</span>, <span class="number">-1.01906988</span>,  <span class="number">1.21857283</span>,  <span class="number">1.20345922</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">          <span class="number">1.85626496</span>]],</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line">       [[<span class="number">-0.81428118</span>,  <span class="number">0.17491108</span>,  <span class="number">0.71956206</span>, <span class="number">-1.56531225</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">          <span class="number">0.26946859</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [<span class="number">-0.23272868</span>,  <span class="number">0.05699183</span>, <span class="number">-0.53726088</span>,  <span class="number">0.02311084</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">          <span class="number">1.76322287</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [ <span class="number">0.42410569</span>,  <span class="number">1.16464656</span>, <span class="number">-0.72119028</span>,  <span class="number">0.4869286</span> ,</span></pre></td></tr><tr><td class="code"><pre><span class="line">          <span class="number">0.36995811</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [<span class="number">-0.89525194</span>, <span class="number">-0.28817483</span>,  <span class="number">0.97878422</span>, <span class="number">-1.76652812</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">         <span class="number">-0.07994589</span>]]])</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = np.random.randint(<span class="number">100</span>,<span class="number">200</span>,(<span class="number">3</span>,<span class="number">4</span>))</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b           <span class="comment"># b的每个元素都在100~200之间</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">array([[<span class="number">151</span>, <span class="number">112</span>, <span class="number">160</span>, <span class="number">100</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">       [<span class="number">174</span>, <span class="number">105</span>, <span class="number">180</span>, <span class="number">111</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">       [<span class="number">186</span>, <span class="number">188</span>, <span class="number">192</span>, <span class="number">157</span>]])</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.random.randint(<span class="number">100</span>,<span class="number">200</span>,(<span class="number">3</span>,<span class="number">4</span>))</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span></pre></td></tr><tr><td class="code"><pre><span class="line">array([[<span class="number">110</span>, <span class="number">123</span>, <span class="number">155</span>, <span class="number">134</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">       [<span class="number">175</span>, <span class="number">176</span>, <span class="number">155</span>, <span class="number">192</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">       [<span class="number">131</span>, <span class="number">178</span>, <span class="number">109</span>, <span class="number">148</span>]])</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.random.shuffle(a)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span></pre></td></tr><tr><td class="code"><pre><span class="line">array([[<span class="number">175</span>, <span class="number">176</span>, <span class="number">155</span>, <span class="number">192</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">       [<span class="number">110</span>, <span class="number">123</span>, <span class="number">155</span>, <span class="number">134</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">       [<span class="number">131</span>, <span class="number">178</span>, <span class="number">109</span>, <span class="number">148</span>]])</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.random.shuffle(a)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span></pre></td></tr><tr><td class="code"><pre><span class="line">array([[<span class="number">175</span>, <span class="number">176</span>, <span class="number">155</span>, <span class="number">192</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">       [<span class="number">131</span>, <span class="number">178</span>, <span class="number">109</span>, <span class="number">148</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">       [<span class="number">110</span>, <span class="number">123</span>, <span class="number">155</span>, <span class="number">134</span>]])</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = np.random.randint(<span class="number">100</span>,<span class="number">200</span>,(<span class="number">8</span>,))</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span></pre></td></tr><tr><td class="code"><pre><span class="line">array([<span class="number">178</span>, <span class="number">113</span>, <span class="number">174</span>, <span class="number">128</span>, <span class="number">158</span>, <span class="number">193</span>, <span class="number">120</span>, <span class="number">156</span>])</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.random.choice(b, (<span class="number">3</span>,<span class="number">2</span>))</span></pre></td></tr><tr><td class="code"><pre><span class="line">array([[<span class="number">156</span>, <span class="number">158</span>],      <span class="comment"># 某个元素可以被重复选取 概率相等的</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">       [<span class="number">193</span>, <span class="number">158</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">       [<span class="number">158</span>, <span class="number">158</span>]])</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.random.choice(b,(<span class="number">3</span>,<span class="number">2</span>),replace=<span class="literal">False</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">array([[<span class="number">174</span>, <span class="number">156</span>],      <span class="comment"># 不允许选取相同的元素</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">       [<span class="number">158</span>, <span class="number">193</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">       [<span class="number">113</span>, <span class="number">120</span>]])</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.random.choice(b,(<span class="number">3</span>,<span class="number">2</span>),p=b/np.sum(b))</span></pre></td></tr><tr><td class="code"><pre><span class="line">array([[<span class="number">193</span>, <span class="number">158</span>],      <span class="comment"># 为每个元素赋值一个抽取概率</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">       [<span class="number">156</span>, <span class="number">158</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">       [<span class="number">178</span>, <span class="number">174</span>]])</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b           <span class="comment"># b没有改变</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">array([<span class="number">178</span>, <span class="number">113</span>, <span class="number">174</span>, <span class="number">128</span>, <span class="number">158</span>, <span class="number">193</span>, <span class="number">120</span>, <span class="number">156</span>])</span></pre></td></tr></table></figure>

</details>  


<hr>
<h2 id="Numpy的统计函数"><a href="#Numpy的统计函数" class="headerlink" title="Numpy的统计函数"></a>Numpy的统计函数</h2><table>
<thead>
<tr>
<th align="left">函数</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">sum(a, axis=None)</td>
<td align="left">根据给定轴axis计算组a相关元素之和, axis整数或元祖</td>
</tr>
<tr>
<td align="left">mean(a, axis=None)</td>
<td align="left">根据给定轴axis计算组a相关元素的期望, axis整数或元祖</td>
</tr>
<tr>
<td align="left">average(a, axis=None,weights=None)</td>
<td align="left">根据给定轴axis计算组a相关元素的加权平均值</td>
</tr>
<tr>
<td align="left">std(a, axis=None)</td>
<td align="left">根据给定轴axis计算组a相关元素的标准差</td>
</tr>
<tr>
<td align="left">var(a, axis=None)</td>
<td align="left">根据给定轴axis计算组a相关元素的方差</td>
</tr>
</tbody></table>
<details>
  <summary> 举个栗子 </summary>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.arange(<span class="number">15</span>).reshape(<span class="number">3</span>,<span class="number">5</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span></pre></td></tr><tr><td class="code"><pre><span class="line">array([[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>,  <span class="number">4</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">       [ <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>,  <span class="number">8</span>,  <span class="number">9</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">       [<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>]])</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.sum(a)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">105</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.mean(a, axis=<span class="number">1</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">array([ <span class="number">2.</span>,  <span class="number">7.</span>, <span class="number">12.</span>])</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.mean(a, axis = <span class="number">0</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">array([<span class="number">5.</span>, <span class="number">6.</span>, <span class="number">7.</span>, <span class="number">8.</span>, <span class="number">9.</span>])</span></pre></td></tr></table></figure>

</details>  


<table>
<thead>
<tr>
<th align="left">函数</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">min(a) max(a)</td>
<td align="left">计算数组a中元素最小值、最大值</td>
</tr>
<tr>
<td align="left">argmin(a) argmax(a)</td>
<td align="left">计算数组a中元素最小值、最大值的降一维后下标</td>
</tr>
<tr>
<td align="left">unravel_index(index,shape)</td>
<td align="left">根据shape将一维下标index转换成多维下标</td>
</tr>
<tr>
<td align="left">ptp(a)</td>
<td align="left">计算数组a中元素最大值与最小值的差</td>
</tr>
<tr>
<td align="left">median(a)</td>
<td align="left">计算数组a中元素的中位数 (中值)</td>
</tr>
</tbody></table>
<details>
  <summary> 举个栗子 </summary>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; b &#x3D; np.arange(15,0,-1).reshape(3,5)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; b</span></pre></td></tr><tr><td class="code"><pre><span class="line">array([[15, 14, 13, 12, 11],</span></pre></td></tr><tr><td class="code"><pre><span class="line">       [10,  9,  8,  7,  6],</span></pre></td></tr><tr><td class="code"><pre><span class="line">       [ 5,  4,  3,  2,  1]])</span></pre></td></tr><tr><td class="code"><pre><span class="line">        </span></pre></td></tr><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; np.max(b)</span></pre></td></tr><tr><td class="code"><pre><span class="line">15</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; np.argmax(b)</span></pre></td></tr><tr><td class="code"><pre><span class="line">0</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; np.unravel_index(np.argmax(b),b.shape)</span></pre></td></tr><tr><td class="code"><pre><span class="line">(0, 0)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; np.ptp(b)</span></pre></td></tr><tr><td class="code"><pre><span class="line">14</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; np.median(b)</span></pre></td></tr><tr><td class="code"><pre><span class="line">8.0</span></pre></td></tr></table></figure>

</details>  


<hr>
<h2 id="Numpy梯度函数"><a href="#Numpy梯度函数" class="headerlink" title="Numpy梯度函数"></a>Numpy梯度函数</h2><p>只有一个<br>函数|说明<br>:–:|:–:<br>np.gradient(f)|计算数组f中元素的梯度, 当f为多维时, 返回每个维度的梯度</p>
<p>梯度：</p>
<ul>
<li>连续值之间的变化率,  即斜率。</li>
<li>XY坐标轴连续三个X坐标对应的Y轴值: a,b,c,  其中b的梯度是： (c-a)/2</li>
</ul>
<p>梯度有什么用？</p>
<ul>
<li>梯度反映了元素的变化率。有助于发现图像、声音边缘。</li>
</ul>
<details>
  <summary> 举个栗子 </summary>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; np.random.randint(0,20,(5))</span></pre></td></tr><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a</span></pre></td></tr><tr><td class="code"><pre><span class="line">array([12, 10, 15, 19, 12])</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; np.gradient(a)</span></pre></td></tr><tr><td class="code"><pre><span class="line">array([-2. ,  1.5,  4.5, -1.5, -7. ])</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; b &#x3D; np.random.randint(0,20,(5))</span></pre></td></tr><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; b</span></pre></td></tr><tr><td class="code"><pre><span class="line">array([18,  2,  1,  5,  1])</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; np.gradient(b)</span></pre></td></tr><tr><td class="code"><pre><span class="line">array([-16. ,  -8.5,   1.5,   0. ,  -4. ])</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; c &#x3D; np.random.randint(0,50,(3,5))</span></pre></td></tr><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; c</span></pre></td></tr><tr><td class="code"><pre><span class="line">array([[24,  2, 12,  1,  7],</span></pre></td></tr><tr><td class="code"><pre><span class="line">       [10, 14, 27,  1, 39],</span></pre></td></tr><tr><td class="code"><pre><span class="line">       [42,  3, 30, 46,  5]])</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; np.gradient(c)</span></pre></td></tr><tr><td class="code"><pre><span class="line">[array([[-14. ,  12. ,  15. ,   0. ,  32. ],</span></pre></td></tr><tr><td class="code"><pre><span class="line">       [  9. ,   0.5,   9. ,  22.5,  -1. ],</span></pre></td></tr><tr><td class="code"><pre><span class="line">       [ 32. , -11. ,   3. ,  45. , -34. ]]), </span></pre></td></tr><tr><td class="code"><pre><span class="line"> array([[-22. ,  -6. ,  -0.5,  -2.5,   6. ],</span></pre></td></tr><tr><td class="code"><pre><span class="line">       [  4. ,   8.5,  -6.5,   6. ,  38. ],</span></pre></td></tr><tr><td class="code"><pre><span class="line">       [-39. ,  -6. ,  21.5, -12.5, -41. ]])]</span></pre></td></tr></table></figure>

</details>  

]]></content>
      <tags>
        <tag>python</tag>
        <tag>numpy</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask+HDFS云盘系统</title>
    <url>/2019/12/28/pan_flask/</url>
    <content><![CDATA[<p><a href="https://github.com/seeicb/Flask-Disk" target="_blank" rel="noopener">参考github</a><br>路过发现flask云盘开源项目<br>点进去逛了一圈 Hadoop连接居然失效了！<br>花了两天啃了Hadoop知识 粗略了解了下<br>已知问题：  </p>
<ul>
<li>内存不足会蹦 NameNode自动关闭   </li>
</ul>
<p>1核1G的虚拟机 还是太折腾了 已经挂了两个静态网站和一个qq机器人 机器人退下了才挂的稳<br><img src="http://hotobun.gitee.io/hexo/img/archive_img/pan_flask_top.png" alt=""></p>
<hr>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul>
<li>阿里云 CentOS 7 </li>
<li>java Hadoop …</li>
<li>python Flask …</li>
<li>创建了一个flask用户</li>
</ul>
<hr>
<h2 id="安装-java"><a href="#安装-java" class="headerlink" title="安装 java"></a>安装 java</h2><p><a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">java jdk官网</a><br>我这里用的rpm安装 注册就可以下载了 复制下载地址<br><img src="http://hotobun.gitee.io/hexo/img/archive_img/pan_flask_java.png" alt=""></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget file_url</span></pre></td></tr><tr><td class="code"><pre><span class="line">$ rpm -ivh file.rpm</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 查看java版本</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ java -version</span></pre></td></tr><tr><td class="code"><pre><span class="line">java version <span class="string">"1.8.0_231"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_231-b11)</span></pre></td></tr><tr><td class="code"><pre><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.231-b11, mixed mode)</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># java默认安装目录 </span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ ls /usr/java</span></pre></td></tr><tr><td class="code"><pre><span class="line">default  jdk1.8.0_231-amd64  latest</span></pre></td></tr></table></figure>

<hr>
<h2 id="安装Hadoop"><a href="#安装Hadoop" class="headerlink" title="安装Hadoop"></a>安装Hadoop</h2><p><a href="https://hadoop.apache.org/releases.html" target="_blank" rel="noopener">Hadoop官网</a><br><img src="http://hotobun.gitee.io/hexo/img/archive_img/pan_flask_hadoop.png" alt=""><br>下载完之后 解压在<code>/home/flask</code>目录下然后改个名<br><code>$ mv hadoop-2.10.0 hadoop</code></p>
<h3 id="设置ssh免密码登录-跳过也可以-每次连接都需要密码"><a href="#设置ssh免密码登录-跳过也可以-每次连接都需要密码" class="headerlink" title="设置ssh免密码登录 (跳过也可以 每次连接都需要密码)"></a>设置ssh免密码登录 (跳过也可以 每次连接都需要密码)</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -P<span class="string">''</span>-f〜/ .ssh / id_rsa  </span></pre></td></tr><tr><td class="code"><pre><span class="line">$ cat〜/ .ssh / id_rsa.pub &gt;&gt;〜/ .ssh / authorized_keys  </span></pre></td></tr><tr><td class="code"><pre><span class="line">$ chmod 0600〜/ .ssh / authorized_keys</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 查看可否无密码登录</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ ssh localhost</span></pre></td></tr></table></figure>

<h3 id="配置Hadoop"><a href="#配置Hadoop" class="headerlink" title="配置Hadoop"></a>配置Hadoop</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /home/flask/hadoop/etc/hadoop</span></pre></td></tr></table></figure>

<p>修改 hadoop-env.sh</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># The java implementation to use.</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># export JAVA_HOME=$&#123;JAVA_HOME&#125;    # java目录</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/java/jdk1.8.0_231-amd64</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 文件最后加上这句</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> HADOOP_OPTS=<span class="string">"<span class="variable">$HADOOP_OPTS</span> -Djava.net.preferIPv4Stack=true -Djava.library.path=<span class="variable">$HADOOP_HOME</span>/lib:<span class="variable">$HADOOP_COMMON_LIB_NATIVE_DIR</span>"</span></span></pre></td></tr></table></figure>

<p>修改 core-site.xml<br>填内网ip 临时文件夹 记得先建立文件夹  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://172.17.29.48:9003<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/home/flask/data/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.trash.interval<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>10080<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span></pre></td></tr></table></figure>

<p>修改 hdfs-site.xml<br>同样先创建填写的文件夹  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/home/flask/data/name<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.datanode.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/home/flask/data/data<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span></pre></td></tr></table></figure>

<p>格式化文件系统</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ bin/hdfs namenode -format</span></pre></td></tr></table></figure>

<p>启动/关闭 NameNode和DataNode </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 没配置ssh要输入三次密码</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ sbin/start-dfs.sh</span></pre></td></tr><tr><td class="code"><pre><span class="line">$ sbin/stop-dfs.sh</span></pre></td></tr></table></figure>

<p>查看进程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ jps</span></pre></td></tr><tr><td class="code"><pre><span class="line">9826 DataNode</span></pre></td></tr><tr><td class="code"><pre><span class="line">12596 Jps</span></pre></td></tr><tr><td class="code"><pre><span class="line">10023 SecondaryNameNode</span></pre></td></tr><tr><td class="code"><pre><span class="line">9722 NameNode</span></pre></td></tr></table></figure>

<p>没有配置YARN 因为启动YARN NameNode就崩了<br>阿里云后台 防火墙开放50070端口 就可以在浏览器上访问ip:50070的web界面了</p>
<hr>
<h2 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h2><p><code>$ vim /etc/profile</code>   </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/java/jdk1.8.0_231-amd64</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH USER LOGNAME MAIL HOSTNAME HISTSIZE HISTCONTROL</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> HADOOP_HOME=/home/flask/hadoop</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> HADOOP_COMMON_HOME=<span class="variable">$HADOOP_HOME</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> HADOOP_HDFS_HOME=<span class="variable">$HADOOP_HOME</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> HADOOP_MAPRED_HOME=<span class="variable">$HADOOP_HOME</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> HADOOP_YARN_HOME=<span class="variable">$HADOOP_HOME</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> HADOOP_CONF_DIR=<span class="variable">$HADOOP_HOME</span>/etc/hadoop</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>::<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$HADOOP_HOME</span>/bin:<span class="variable">$HADOOP_HOOME</span>/sbin:<span class="variable">$HADOOP_HOME</span>/lib</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> HADOOP_COMMON_LIB_NATIVE_DIR=<span class="variable">$HADOOP_HOME</span>/lib/native</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> HADOOP_OPTS=<span class="string">"-Djava.library.path=<span class="variable">$HADOOP_HOME</span>/lib"</span></span></pre></td></tr></table></figure>


<hr>
<h2 id="搭建Flask"><a href="#搭建Flask" class="headerlink" title="搭建Flask"></a>搭建Flask</h2><p>virtualenv虚拟环境 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pip3 install virtualenv</span></pre></td></tr><tr><td class="code"><pre><span class="line">$ virtualenv --version</span></pre></td></tr><tr><td class="code"><pre><span class="line">16.7.9</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line">$ virtualenv --no-site-packages /home/flask/pan</span></pre></td></tr><tr><td class="code"><pre><span class="line">$ <span class="built_in">source</span> /home/flask/pan/bin/activate</span></pre></td></tr></table></figure>
<p>在虚拟环境下安装项目依赖<br>后续 <a href="https://github.com/seeicb/Flask-Disk" target="_blank" rel="noopener">参考原文</a></p>
<hr>
<h2 id="上云"><a href="#上云" class="headerlink" title="上云"></a>上云</h2><p>推荐在virtualenv 环境下部署  </p>
<h3 id="nginx添加映射"><a href="#nginx添加映射" class="headerlink" title="nginx添加映射"></a>nginx添加映射</h3><p>公网访问hotococoa.com:23456 就转发到服务器23432<br><code>$ vim /etc/nginx/nginx.conf</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ...</span></pre></td></tr><tr><td class="code"><pre><span class="line">    server &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        listen 23456;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        server_name hotococoa.com;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        </span></pre></td></tr><tr><td class="code"><pre><span class="line">        location / &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                include         uwsgi_params;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                uwsgi_pass      127.0.0.1:23432;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                uwsgi_param  UWSGI_PYHOME /home/flask/pan;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                uwsgi_param  UWSGI_CHDIR  /home/flask/Flask-Disk;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                uwsgi_param  UWSGI_SCRIPT flask_web:application;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                uwsgi_read_timeout 300;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                uwsgi_connect_timeout 300;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                uwsgi_send_timeout 300;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ....</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h3 id="uwsgi-ini"><a href="#uwsgi-ini" class="headerlink" title="uwsgi.ini"></a>uwsgi.ini</h3><p>安装:<br><code>$ pip install uwsgi</code><br>修改<code>uwsgi.ini</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[uwsgi]</span></pre></td></tr><tr><td class="code"><pre><span class="line">master = <span class="literal">true</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">home = /home/flask/pan</span></pre></td></tr><tr><td class="code"><pre><span class="line">wsgi-file = manage.py</span></pre></td></tr><tr><td class="code"><pre><span class="line">callable = app</span></pre></td></tr><tr><td class="code"><pre><span class="line">socket = :23432</span></pre></td></tr><tr><td class="code"><pre><span class="line">processes = 4</span></pre></td></tr><tr><td class="code"><pre><span class="line">threads = 2</span></pre></td></tr><tr><td class="code"><pre><span class="line">buffer-size = 32768</span></pre></td></tr></table></figure>

<h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 检查nginx.conf语法</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ nginx -t </span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 重启nginx生效</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># nginx -s reload</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># uwsgi 后台静默运行 不添加的话 关闭服务器连接进程就没了</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ nohup uwsgi --ini uwsgi.ini &amp;</span></pre></td></tr></table></figure>

<h3 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 找到uwsgi进程pid</span></pre></td></tr><tr><td class="code"><pre><span class="line">$ lsof -i :23432 </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ kill -9 pid</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"># 查看nohup.out 还挺皮的</span></pre></td></tr><tr><td class="code"><pre><span class="line">...</span></pre></td></tr><tr><td class="code"><pre><span class="line">uWSGI worker 1 screams: UAAAAAAH my master disconnected: i will kill myself !!!</span></pre></td></tr><tr><td class="code"><pre><span class="line">uWSGI worker 2 screams: UAAAAAAH my master disconnected: i will kill myself !!!</span></pre></td></tr><tr><td class="code"><pre><span class="line">uWSGI worker 3 screams: UAAAAAAH my master disconnected: i will kill myself !!!</span></pre></td></tr><tr><td class="code"><pre><span class="line">uWSGI worker 4 screams: UAAAAAAH my master disconnected: i will kill myself !!!</span></pre></td></tr><tr><td class="code"><pre><span class="line">uWSGI worker 1 screams: UAAAAAAH my master disconnected: i will kill myself !!!</span></pre></td></tr><tr><td class="code"><pre><span class="line">uWSGI worker 2 screams: UAAAAAAH my master disconnected: i will kill myself !!!</span></pre></td></tr><tr><td class="code"><pre><span class="line">uWSGI worker 3 screams: UAAAAAAH my master disconnected: i will kill myself !!!</span></pre></td></tr><tr><td class="code"><pre><span class="line">uWSGI worker 4 screams: UAAAAAAH my master disconnected: i will kill myself !!!</span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>python</tag>
        <tag>hadoop</tag>
        <tag>网盘</tag>
      </tags>
  </entry>
  <entry>
    <title>爬B站视频评论</title>
    <url>/2019/12/25/bilibili_replies/</url>
    <content><![CDATA[<h4 id="github源码"><a href="#github源码" class="headerlink" title="github源码"></a><a href="https://github.com/Hotobun/Code/tree/master/python/spider/bilibili/replies" target="_blank" rel="noopener">github源码</a></h4><h2 id="本地环境"><a href="#本地环境" class="headerlink" title="本地环境"></a>本地环境</h2><ul>
<li>windows10 </li>
<li>python</li>
</ul>
<h2 id="使用到的第三方库"><a href="#使用到的第三方库" class="headerlink" title="使用到的第三方库"></a>使用到的第三方库</h2><ul>
<li>requests</li>
<li>pymysql</li>
<li>sqlalchemy</li>
</ul>
<h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><ul>
<li>mysql</li>
</ul>
<h2 id="食用方法"><a href="#食用方法" class="headerlink" title="食用方法"></a>食用方法</h2><ol>
<li>填写config相关参数 数据库 htmlheaders 等…  </li>
<li>第一次使用<pre><code class="bash">进入mysql 创建数据库 已有库就在`config.py`里面改 :
`mysql&gt; create database bilibili character <span class="built_in">set</span> utf8 collate utf8_general_ci;`
参数 character <span class="built_in">set</span> utf8 : 指定数据库采用字符集 不能使用utf-8
参数 collate : 指定数据库字符集的排序规则 通过show character <span class="built_in">set</span> 查看
在终端运行或者直接打开`replies_db.py` 创建数据表
`$ python replies_db.py`</code></pre>
</li>
<li>运行<code>replies_.py</code>  </li>
</ol>
<hr>
<p>续上篇 代码都差不多<br>一个视频的评论量都是用万做单位 就没有遍历番号爬了<br>记得在<code>config.py</code>填写oid 视频AV号<br>文件保存是相对路径<br>已请求的json都会保存到本地的AV号文件夹下面 留了3页做测试用<br>再次请求时会先判断本地有没有这个json 如果有直接拿出来入库<br>没有就去B站爬  </p>
<p><img src="http://hotobun.gitee.io/hexo/img/archive_img/bilibili_replies.png" alt=""></p>
]]></content>
      <tags>
        <tag>python</tag>
        <tag>mysql</tag>
        <tag>spider</tag>
      </tags>
  </entry>
  <entry>
    <title>ssl证书配置</title>
    <url>/2019/12/25/ssl/</url>
    <content><![CDATA[<p>下载申请的证书 随便放 记住位置<br>我这里放到<code>/etc/nginx/cert/</code>目录下<br>编辑<code>/etc/nginx/nginx.conf</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">...</span></pre></td></tr><tr><td class="code"><pre><span class="line">    server &#123; <span class="comment"># 在已部署好的server 添加rewrite 请求都跳转到https</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        listen    80;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        rewrite ^(.*)$ https://<span class="variable">$host</span><span class="variable">$1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ....</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line">    server &#123;  <span class="comment"># 新增server 443为https默认端口</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        listen 443 ssl;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        server_name hotococoa.com www.hotococoa.com;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        root        /home/hexo;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        ssl_certificate /etc/nginx/cert/hotococoa.pem;   <span class="comment">#name.pem替换成您证书的文件名。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        ssl_certificate_key /etc/nginx/cert/hotococoa.key;   <span class="comment">#name.key替换成您证书的密钥文件名。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        ssl_session_timeout 5m;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ssl_prefer_server_ciphers on;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        location / &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        index index.html index.htm;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ nginx -t # 检查语法正确性</span></pre></td></tr><tr><td class="code"><pre><span class="line">$ nginx -s reload # 重启nginx</span></pre></td></tr></table></figure>


]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>爬取B站所有番剧入库MySql</title>
    <url>/2019/12/23/bilibili_anime/</url>
    <content><![CDATA[<h4 id="github源码"><a href="#github源码" class="headerlink" title="github源码"></a><a href="https://github.com/Hotobun/Code/tree/master/python/spider/bilibili/anime" target="_blank" rel="noopener">github源码</a></h4><h2 id="本地环境"><a href="#本地环境" class="headerlink" title="本地环境"></a>本地环境</h2><ul>
<li>windows10 </li>
<li>python </li>
</ul>
<h2 id="使用到的第三方库"><a href="#使用到的第三方库" class="headerlink" title="使用到的第三方库"></a>使用到的第三方库</h2><ul>
<li>requests</li>
<li>pymysql</li>
<li>lxml</li>
<li>sqlalchemy</li>
</ul>
<h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><ul>
<li>mysql</li>
</ul>
<h2 id="食用方法"><a href="#食用方法" class="headerlink" title="食用方法"></a>食用方法</h2><ol>
<li>填写config相关参数 数据库 htmlheaders 等…  </li>
<li>第一次使用   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">进入mysql 创建数据库:  </span></pre></td></tr><tr><td class="code"><pre><span class="line">`mysql&gt; create database bilibili character <span class="built_in">set</span> utf8 collate utf8_general_ci;`  </span></pre></td></tr><tr><td class="code"><pre><span class="line">参数 character <span class="built_in">set</span> utf8 : 指定数据库采用字符集 不能使用utf-8  </span></pre></td></tr><tr><td class="code"><pre><span class="line">参数 collate : 指定数据库字符集的排序规则 通过show character <span class="built_in">set</span> 查看  </span></pre></td></tr><tr><td class="code"><pre><span class="line">在终端运行或者直接打开`bilibili_db.py` 创建数据表  </span></pre></td></tr><tr><td class="code"><pre><span class="line">`$ python bilibili_db.py`</span></pre></td></tr></table></figure></li>
<li>运行<code>blibili_anime.py</code></li>
</ol>
<hr>
<p>没什么防爬机制 f12查看Network<br>发现bilibili.com/…page=1… 里面有一页的20条数据<br>page+1 就是下一页<br>headers 复制过来 然后就愉快地爬了   </p>
<p>pkl文件夹里面的内容是每一页<code>requests.get(url)</code> 返回的<code>response</code>对象<br>喜欢的话可以打开查看 是一堆json  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 2019-12-23</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">"pkl/page1.pkl"</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    response = pickle.load(f)</span></pre></td></tr></table></figure>

<p><img src="http://hotobun.gitee.io/hexo/img/archive_img/bilibili_spider1.png" alt=""><br><img src="http://hotobun.gitee.io/hexo/img/archive_img/bilibili_spider2.png" alt=""></p>
]]></content>
      <tags>
        <tag>python</tag>
        <tag>mysql</tag>
        <tag>spider</tag>
      </tags>
  </entry>
  <entry>
    <title>python爬妹子图</title>
    <url>/2019/12/22/meizispider/</url>
    <content><![CDATA[<p>偶尔看点妹子养养眼吧<br>防爬机制只有referer 而且是当前页面的url<br><img src="http://hotobun.gitee.io/hexo/img/archive_img/meizi.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os, time</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line">url = <span class="string">"https://www.mzitu.com/japan/page/"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">head = &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="string">"user-agent"</span>:<span class="string">"Mozilla/5.0"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="string">"referer"</span>:<span class="string">"https://www.mzitu.com"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 图片保存路径 不存在就创建</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">imgpath = os.path.join(os.getcwd(),<span class="string">'meizitu'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(imgpath):</span></pre></td></tr><tr><td class="code"><pre><span class="line">    os.mkdir(imgpath)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 每张图片请求间隔 已测试0.3爬原图会图片不全 爬封面的话0也可以</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">timeout = <span class="number">0.5</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 仅爬取封面 False为爬取全图 大量图 小心身体</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">is_cover = <span class="literal">True</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">page_item</span><span class="params">(url, head)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment"># rtype = [[title,imgurl,referer, imgsIdurl]...]</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    r = requests.get(url, headers= head)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    t = etree.HTML(r.text)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    result = []</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> t.xpath(<span class="string">"//ul[@id='pins']/li"</span>):</span></pre></td></tr><tr><td class="code"><pre><span class="line">        title = i.xpath(<span class="string">"./a/img/@alt"</span>)[<span class="number">0</span>].replace(<span class="string">"?"</span>, <span class="string">''</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        imgurl = i.xpath(<span class="string">"./a/img/@data-original"</span>)[<span class="number">0</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line">        idurl = i.xpath(<span class="string">"./a/@href"</span>)[<span class="number">0</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line">        item = [title, imgurl, url,idurl]</span></pre></td></tr><tr><td class="code"><pre><span class="line">        result.append(item)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> result</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_cover_img</span><span class="params">(imgitem)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment"># imgitem type = [title,imgurl,referer, imgsIdurl] </span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    head[<span class="string">'referer'</span>] = imgitem[<span class="number">2</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line">    imgname = imgitem[<span class="number">0</span>].replace(<span class="string">'?'</span>,<span class="string">''</span>) + <span class="string">'.jpg'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    save(imgitem[<span class="number">1</span>], os.path.join( imgpath, imgname ), head)</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_origin_img</span><span class="params">(imgitem)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment"># imgitem type = [title,imgurl,referer, imgsIdurl] </span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    head[<span class="string">'referer'</span>] = imgitem[<span class="number">2</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line">    r = requests.get(imgitem[<span class="number">3</span>], headers = head)  </span></pre></td></tr><tr><td class="code"><pre><span class="line">    t = etree.HTML(r.text)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    max_page = int(t.xpath(<span class="string">"//div[@class='pagenavi']/a/@href"</span>)[<span class="number">-2</span>].split(<span class="string">'/'</span>)[<span class="number">-1</span>])</span></pre></td></tr><tr><td class="code"><pre><span class="line">    imgsrc = t.xpath(<span class="string">"//div[@class='main-image']/p/a/img/@src"</span>)[<span class="number">0</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line">    head[<span class="string">'referer'</span>] = imgitem[<span class="number">3</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> page <span class="keyword">in</span> range(<span class="number">1</span>, max_page+<span class="number">1</span>):</span></pre></td></tr><tr><td class="code"><pre><span class="line">        new_imgsrc = imgsrc.replace(<span class="string">'01.jpg'</span>, <span class="string">"&#123;0:02d&#125;.jpg"</span>.format(page))</span></pre></td></tr><tr><td class="code"><pre><span class="line">        imgname = imgitem[<span class="number">0</span>] + str(page) + <span class="string">'.jpg'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        save(new_imgsrc, os.path.join(imgpath, imgname), head)</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">(url, path, head)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    r = requests.get(url)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">with</span> open(path, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        f.write(r.content)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        print(path, <span class="string">'done'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    time.sleep(timeout)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">global</span> head</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> page <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">30</span>):</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> page_item(url+str(page)+<span class="string">"/"</span>, head = head):</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> is_cover:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                get_cover_img(item)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">else</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                get_origin_img(item)    </span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    main()</span></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos7挂酷Q机器人</title>
    <url>/2019/12/20/coolq/</url>
    <content><![CDATA[<p>看到破群里经常有机器人自动处理消息 自己也弄了一个。<br>在windows上挂酷Q还行 服务器装酷Q各种问题<br>按照教程一顿操作猛如虎 第一次就成功 然后我吧服务器重启了<br>熟悉的剧情出现了 这东西重启之后就用不了<br>快照回滚了12次 终于找到一个重启能用的<br>快照真是个好东西</p>
<h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ curl -sSL https:&#x2F;&#x2F;get.docker.com&#x2F; | sh</span></pre></td></tr><tr><td class="code"><pre><span class="line">$ systemctl start docker</span></pre></td></tr><tr><td class="code"><pre><span class="line">$ systemctl enable docker</span></pre></td></tr><tr><td class="code"><pre><span class="line"># 此处安装完应该存快照 存快照 存快照</span></pre></td></tr></table></figure>
<p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 Linux或Windows 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。</p>
<h3 id="安装酷Q"><a href="#安装酷Q" class="headerlink" title="安装酷Q"></a>安装酷Q</h3><p>注意：不要尝试更改酷Q文件拥有者或者权限 不然会连接不上 </p>
<ol>
<li>下载酷Q<br><code>$ docker pull coolq/wine-coolq</code>  </li>
<li>创建空文件夹存放酷Q数据<br><code>$ mkdir /home/Hoto/coolq</code>  </li>
<li>运行酷Q镜像<br><code>$ docker run --name=coolq -d -p 8080:9000 -v /home/Hoto/coolq:/home/user/coolq -e VNC_PASSWD=hotcocoa -e COOLQ_ACCOUNT=3397937019 coolq/wine-coolq</code><br> –name =coolq 为容器创建别名为 coolq<br> -p 8080:9000  将外部8080接口映射到内部9000 # 测试过两个端口都9000会连接不上<br> 真实存放数据的linux路径:映射的windows容器路径<br> 后面3个就是密码、默认QQ、镜像名字随便写</li>
</ol>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ol>
<li>查看酷Q运行日志<br> <code>$ docker logs coolq --tail 30</code>  # 数据量太多了 尽量加tail </li>
<li>启动和停止酷Q<br> <code>$ docker start coolq</code><br> <code>$ docker stop coolq</code></li>
<li>查看所有镜像<br> <code>$ docker images</code> </li>
<li>查看正在运行的容器、查看所有容器<br> <code>$ docker ps</code><br> <code>$ docker ps -a</code></li>
</ol>
<h2 id="重装"><a href="#重装" class="headerlink" title="重装"></a>重装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看id</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ docker ps  </span></pre></td></tr><tr><td class="code"><pre><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES</span></pre></td></tr><tr><td class="code"><pre><span class="line">587c77c5faa4        coolq/wine-coolq    <span class="string">"/init.entrypoint st…"</span>   10 seconds ago      Up 9 seconds        0.0.0.0:8080-&gt;9000/tcp   coolq</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 删除容器</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ docker rm 587c77c5faa4    </span></pre></td></tr><tr><td class="code"><pre><span class="line">587c77c5faa4</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 运行酷Q镜像</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">`$ docker run --name=coolq -d -p 8080:9000 -v /home/Hoto/coolq:/home/user/coolq -e VNC_PASSWD=hotcocoa -e COOLQ_ACCOUNT=3397937019 coolq/wine-coolq`  </span></pre></td></tr><tr><td class="code"><pre><span class="line">587c77c5faa4bfcca5bad9b1195806d1200764e0155bcbaafb905e327cc822ec</span></pre></td></tr></table></figure>




]]></content>
      <tags>
        <tag>QQ机器人</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>QQ邮箱无法收到WordPress邮件</title>
    <url>/2019/12/19/qqemail/</url>
    <content><![CDATA[<p>在WordPress注册时 发送的邮件在QQ邮箱上无法查收<br>百度了下是WordPress被QQ邮箱列入没名单<br>不是进垃圾箱 而是根本无法收到<br>通过添加白名单解决<br><img src="http://hotobun.gitee.io/hexo/img/archive_img/qqemail.png" alt="email"></p>
]]></content>
      <tags>
        <tag>email</tag>
      </tags>
  </entry>
  <entry>
    <title>git常用命令</title>
    <url>/2019/12/14/gitcmd/</url>
    <content><![CDATA[<h2 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在当前目录新建一个Git代码库</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git init</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 新建一个目录，将其初始化为Git代码库</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git init [project-name]</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 下载一个项目和它的整个代码历史</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> [url]</span></pre></td></tr></table></figure>

<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示当前的Git配置</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git config --list</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 编辑Git配置文件</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git config -e [--global]</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 设置提交代码时的用户信息</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git config [--global] user.name <span class="string">"[name]"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git config [--global] user.email <span class="string">"[email address]"</span></span></pre></td></tr></table></figure>

<h2 id="增加-删除文件"><a href="#增加-删除文件" class="headerlink" title="增加/删除文件"></a>增加/删除文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加指定文件到暂存区</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git add [file1] [file2] ...  </span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 添加指定目录到暂存区，包括子目录</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git add [dir]  </span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 添加当前目录的所有文件到暂存区</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git add .  </span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 添加每个变化前，都会要求确认</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 对于同一个文件的多处变化，可以实现分次提交</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git add -p  </span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 删除工作区文件，并且将这次删除放入暂存区</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git rm [file1] [file2] ...</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 停止追踪指定文件，但该文件会保留在工作区</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git rm --cached [file]</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 改名文件，并且将这个改名放入暂存区</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git mv [file-original] [file-renamed]</span></pre></td></tr></table></figure>


<h2 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 提交暂存区到仓库区</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git commit -m [message]</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 提交暂存区的指定文件到仓库区</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git commit [file1] [file2] ... -m [message]</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 提交工作区自上次commit之后的变化，直接到仓库区</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git commit -a</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 提交时显示所有diff信息</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git commit -v</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 使用一次新的commit，替代上一次提交</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git commit --amend -m [message]</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 重做上一次commit，并包括指定文件的新变化</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git commit --amend [file1] [file2] ...</span></pre></td></tr></table></figure>

<h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出所有本地分支</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git branch</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 列出所有远程分支</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git branch -r</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 列出所有本地分支和远程分支</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git branch -a</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 新建一个分支，但依然停留在当前分支</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git branch [branch-name]</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 新建一个分支，并切换到该分支</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git checkout -b [branch]</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 新建一个分支，指向指定commit</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git branch [branch] [commit]</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 新建一个分支，与指定的远程分支建立追踪关系</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git branch --track [branch] [remote-branch]</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 切换到指定分支，并更新工作区</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git checkout [branch-name]</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 切换到上一个分支</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git checkout -</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 建立追踪关系，在现有分支与指定的远程分支之间</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git branch --<span class="built_in">set</span>-upstream [branch] [remote-branch]</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 合并指定分支到当前分支</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git merge [branch]</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 选择一个commit，合并进当前分支</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git cherry-pick [commit]</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 删除分支</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git branch -d [branch-name]</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 删除远程分支</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git push origin --delete [branch-name]</span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git branch -dr [remote/branch]</span></pre></td></tr></table></figure>

<h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出所有tag</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git tag</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 新建一个tag在当前commit</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git tag [tag]</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 新建一个tag在指定commit</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git tag [tag] [commit]</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 删除本地tag</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git tag -d [tag]</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 删除远程tag</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git push origin :refs/tags/[tagName]</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 查看tag信息</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git show [tag]</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 提交指定tag</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git push [remote] [tag]</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 提交所有tag</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git push [remote] --tags</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 新建一个分支，指向某个tag</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git checkout -b [branch] [tag]</span></pre></td></tr></table></figure>

<h2 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示有变更的文件</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git status</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 显示当前分支的版本历史</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 显示commit历史，以及每次commit发生变更的文件</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --<span class="built_in">stat</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 搜索提交历史，根据关键词</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> -S [keyword]</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 显示某个commit之后的所有变动，每个commit占据一行</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> [tag] HEAD --pretty=format:%s</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 显示某个commit之后的所有变动，其"提交说明"必须符合搜索条件</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> [tag] HEAD --grep feature</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 显示某个文件的版本历史，包括文件改名</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --follow [file]</span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git whatchanged [file]</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 显示指定文件相关的每一次diff</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> -p [file]</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 显示过去5次提交</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> -5 --pretty --oneline</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 显示所有提交过的用户，按提交次数排序</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git shortlog -sn</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 显示指定文件是什么人在什么时间修改过</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git blame [file]</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 显示暂存区和工作区的差异</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git diff</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 显示暂存区和上一个commit的差异</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git diff --cached [file]</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 显示工作区与当前分支最新commit之间的差异</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git diff HEAD</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 显示两次提交之间的差异</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git diff [first-branch]...[second-branch]</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 显示今天你写了多少行代码</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git diff --shortstat <span class="string">"@&#123;0 day ago&#125;"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 显示某次提交的元数据和内容变化</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git show [commit]</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 显示某次提交发生变化的文件</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git show --name-only [commit]</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 显示某次提交时，某个文件的内容</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git show [commit]:[filename]</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 显示当前分支的最近几次提交</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git reflog</span></pre></td></tr></table></figure>

<h2 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载远程仓库的所有变动</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git fetch [remote]</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 显示所有远程仓库</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git remote -v</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 显示某个远程仓库的信息</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git remote show [remote]</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 增加一个新的远程仓库，并命名</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git remote add [shortname] [url]</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 取回远程仓库的变化，并与本地分支合并</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git pull [remote] [branch]</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 上传本地指定分支到远程仓库</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git push [remote] [branch]</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 强行推送当前分支到远程仓库，即使有冲突</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git push [remote] --force</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 推送所有分支到远程仓库</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git push [remote] --all</span></pre></td></tr></table></figure>

<h2 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 恢复暂存区的指定文件到工作区</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git checkout [file]</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 恢复某个commit的指定文件到暂存区和工作区</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git checkout [commit] [file]</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 恢复暂存区的所有文件到工作区</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git checkout .</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git reset [file]</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 重置暂存区与工作区，与上一次commit保持一致</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git reset --hard</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git reset [commit]</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git reset --hard [commit]</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git reset --keep [commit]</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 新建一个commit，用来撤销指定commit</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git revert [commit]</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 暂时将未提交的变化移除，稍后再移入</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git stash</span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git stash pop</span></pre></td></tr></table></figure>

<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成一个可供发布的压缩包</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git archive</span></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git裸仓库</title>
    <url>/2019/12/14/gitbare/</url>
    <content><![CDATA[<p><a href="https://git-scm.com/book/zh/v2/自定义-Git-Git-钩子" target="_blank" rel="noopener">git钩子文档</a>  </p>
<hr>
<h3 id="建立git裸仓库"><a href="#建立git裸仓库" class="headerlink" title="建立git裸仓库"></a>建立git裸仓库</h3><p>创建一个裸仓库 只保存<code>git</code>信息的<code>Repository</code><br>切换到git用户有有仓库所有权<br>一定要加 <code>-- bare</code> 这样才是裸库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ su root </span></pre></td></tr><tr><td class="code"><pre><span class="line">$ cd &#x2F;home&#x2F;git</span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git init --bare blog.git</span></pre></td></tr></table></figure>
<p>这时 <code>git</code>用户的<code>~</code>目录下就存在一个<code>blog.git</code>文件夹<br>可使用<code>ls</code>查看 再修改 <code>blog.git</code>权限<br><code>$ chown git:git -R blog.git</code></p>
<h3 id="使用git-hook-同步网站根目录"><a href="#使用git-hook-同步网站根目录" class="headerlink" title="使用git-hook 同步网站根目录"></a>使用git-hook 同步网站根目录</h3><p>这里使用<code>post-receive</code>这个钩子 当<code>git</code>有手法的时候会调用这个钩子<br>在<code>blog.git</code>裸库hook文件夹中 新建<code>post-receive</code>文件<br><code>$ vim blog.git/hooks/post-receive</code><br>填入一下内容 其中<code>/home/hexo</code>为网站根目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#! &#x2F;bin&#x2F;sh</span></pre></td></tr><tr><td class="code"><pre><span class="line">git --work-tree&#x3D;&#x2F;home&#x2F;hexo --git-dir&#x3D;&#x2F;home&#x2F;git&#x2F;blog.git checkout -f</span></pre></td></tr></table></figure>
<p>保存后 赋予这个文件可执行权限<br><code>$ chmod +x /home/git/blog.git/hooks/post-receive</code></p>
<hr>
]]></content>
      <tags>
        <tag>linux</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx端口转发</title>
    <url>/2019/12/13/nginx/</url>
    <content><![CDATA[<h2 id="二级域名转发"><a href="#二级域名转发" class="headerlink" title="二级域名转发"></a>二级域名转发</h2><p>已经部署两个网站</p>
<ul>
<li><code>hotococoa.com</code></li>
<li><code>hotococoa.com:9200</code></li>
</ul>
<p>早上尝试了下在<code>nginx.conf</code>只写两个<code>server</code><br>80端口接收到指定域名时 转发到9200端口<br>请求是转过来了 但是请求的是主站目录<br>不是9200网站目录 root也改几次 无果<br>后面发现有个二级域名的东西 尝试了下 居然一步到位</p>
<p>首先在阿里云后台打开域名-&gt;域名解析-&gt;添加记录<br><img src="http://hotobun.gitee.io/hexo/img/archive_img/nginx.png" alt=""><br><img src="http://hotobun.gitee.io/hexo/img/archive_img/nginx1.png" alt=""><br>添加完后编辑 <code>/etc/nginx/nginx.conf</code></p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span> default_server;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attribute">listen</span>       [::]:<span class="number">80</span> default_server;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attribute">server_name</span>  hotococoa.com;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attribute">root</span>         /home/hexo;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment"># Load configuration files for the default server block.</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attribute">include</span> /etc/nginx/default.d/<span class="regexp">*.conf</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attribute">location</span> / &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attribute">error_page</span> <span class="number">404</span> /<span class="number">404</span>.html;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="attribute">location</span> = /40x.html &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attribute">error_page</span> <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span> /50x.html;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="attribute">location</span> = /50x.html &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;                      </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attribute">root</span> /home/nginx/flask-advance;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attribute">index</span> index.html index.htm;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attribute">server_name</span> flask.hotococoa.com;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attribute">location</span> / &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ =<span class="number">404</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="attribute">proxy_pass</span> http://127.0.0.1:9200; </span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment"># 将80端口 flask.hotococoa.com 的请求 转发到9200</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment"># 如果不写这个server 请求flask.hotococoa.com 时就会匹配到上面的 hexo</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment"># 最后 可以用二级域名访问 也可以用端口号访问</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attribute">listen</span> <span class="number">9200</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attribute">listen</span> [::]:<span class="number">9200</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attribute">server_name</span> flask.hotococoa.com;  <span class="comment"># 这里填写刚刚创建的二级域名</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attribute">root</span> 	/home/Hoto/flask-advance;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attribute">location</span> / &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="attribute">index</span>	index.html index.html;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>linux</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>别人家的文章</title>
    <url>/2019/12/13/article/</url>
    <content><![CDATA[<ul>
<li>小工具：<ul>
<li><a href="https://www.nothamor.cn/eat/" target="_blank" rel="noopener">今天吃什么</a></li>
<li><a href="https://www.nothamor.cn/life/" target="_blank" rel="noopener">Lifespan</a></li>
<li><a href="https://coderlane.net/sandbox" target="_blank" rel="noopener">浏览器在线编程 Coderlane</a></li>
</ul>
</li>
</ul>
<p><a href="https://www.markhoo.com/index.php/archives/217/" target="_blank" rel="noopener">python资源大全</a><br><a href="https://www.markhoo.com/index.php/archives/105/" target="_blank" rel="noopener">python面试题目</a><br><a href="https://www.wmathor.com/index.php/archives/1190/" target="_blank" rel="noopener">python实现ddos攻击</a><br><a href="https://www.wmathor.com/index.php/archives/1174/" target="_blank" rel="noopener">搭建云端 Jupyter，有浏览器的地方就有 Python</a><br><a href="https://coderlane.net/sandbox" target="_blank" rel="noopener">Coderlane在线写代码</a></p>
]]></content>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>芯片问题</title>
    <url>/2019/12/11/chip_problem/</url>
    <content><![CDATA[<p>测试台可以放两块芯片 互相进行测试<br>测试报告只有 “好” or “坏”</p>
<ul>
<li>好芯片的报告一定是正确的</li>
<li>坏芯片的报告是不确定的</li>
</ul>
<h4 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h4><p>n片芯片，其中好芯片至少比坏芯片多1片。<br>设计一种测试方法，通过测试从n片芯片中挑出一片好芯片  </p>
<hr>
<p>测试报告分析:</p>
<table>
<thead>
<tr>
<th align="center">A报告</th>
<th align="center">B报告</th>
<th align="center">结论</th>
</tr>
</thead>
<tbody><tr>
<td align="center">B是好的</td>
<td align="center">A是好的</td>
<td align="center">A,B都好，或都坏</td>
</tr>
<tr>
<td align="center">B是好的</td>
<td align="center">A是坏的</td>
<td align="center">至少一片是坏的</td>
</tr>
<tr>
<td align="center">B是坏的</td>
<td align="center">A是好的</td>
<td align="center">至少一片是坏的</td>
</tr>
<tr>
<td align="center">B是坏的</td>
<td align="center">A是坏的</td>
<td align="center">至少一片是坏的</td>
</tr>
</tbody></table>
<hr>
<p>问题： 给定芯片A，判定A的好坏<br>方法： 用其他n-1片芯片对A测试。<br>根据题意得知 好芯片比坏芯片至少多1</p>
<h4 id="假设1：-n是奇数"><a href="#假设1：-n是奇数" class="headerlink" title="假设1： n是奇数"></a>假设1： n是奇数</h4><p>n=7: 好芯片数 &gt;= 4 </p>
<ul>
<li>A好，6个报告中至少有3个报告 “好”</li>
<li>A坏，6个报告中至少有4个报告 “坏”</li>
</ul>
<p>当n为奇数时：</p>
<ul>
<li>好芯片数 &gt;= (n+1)/2</li>
<li>A好，至少有(n-1)/2个报告 “好”</li>
<li>A坏，至少有(n+1)/2个报告 “坏”</li>
</ul>
<p>结论：</p>
<ul>
<li>至少一半报 “好”， A是好芯片</li>
<li>超过一半报 “坏”， A是坏芯片</li>
</ul>
<h4 id="假设2-n是偶数"><a href="#假设2-n是偶数" class="headerlink" title="假设2: n是偶数"></a>假设2: n是偶数</h4><p>n=8: 好芯片数 &gt;= 5 </p>
<ul>
<li>A好，7个报告中至少有4个报告 “好”</li>
<li>A坏，7个报告中至少有5个报告 “坏”</li>
</ul>
<p>当n为奇数时：</p>
<ul>
<li>好芯片数 &gt;= n/2+1</li>
<li>A好，至少有 n/2 个报告 “好”</li>
<li>A坏，至少有 n/2+1 个报告 “坏”</li>
</ul>
<p>结论：</p>
<ul>
<li>至少一半报 “好”， A是好芯片</li>
<li>超过一半报 “坏”， A是坏芯片</li>
</ul>
<hr>
<h2 id="蛮力算法"><a href="#蛮力算法" class="headerlink" title="蛮力算法"></a>蛮力算法</h2><h4 id="测试方法"><a href="#测试方法" class="headerlink" title="测试方法:"></a>测试方法:</h4><p>任取1片芯片测试，如果是好芯片，测试结束；如果是坏芯片，抛弃，再从剩下芯片任取1片测试，直到得到好芯片。</p>
<h4 id="时间估计-O-n²"><a href="#时间估计-O-n²" class="headerlink" title="时间估计 O(n²)"></a>时间估计 O(n²)</h4><hr>
<h2 id="分治算法"><a href="#分治算法" class="headerlink" title="分治算法"></a>分治算法</h2><p>假设n为偶数，将n片芯片两两一组做测试淘汰，剩下芯片构成子问题，进入下一轮分组淘汰。</p>
<h4 id="淘汰规则"><a href="#淘汰规则" class="headerlink" title="淘汰规则"></a>淘汰规则</h4><ul>
<li>“好，好” -&gt; 任意留一片,进入下轮</li>
<li>其他情况 -&gt; 全部抛弃</li>
</ul>
<h4 id="截止条件-n-lt-3"><a href="#截止条件-n-lt-3" class="headerlink" title="截止条件 n &lt;= 3"></a>截止条件 n &lt;= 3</h4><p>3片芯片，1次测试可得知好芯片。<br>1或2片芯片，不需测试 都是都是好芯片<br>仅存3片芯片时，至少有2片是好的 任意取两片测试</p>
<ul>
<li>两个都报告好，那就是真的都是好芯片</li>
<li>有一个报告坏，说明坏芯片在测试台上，没有上台的那片直接输出答案</li>
</ul>
<h4 id="分治算法正确性"><a href="#分治算法正确性" class="headerlink" title="分治算法正确性"></a>分治算法正确性</h4><p>命题1：当n是偶数时，在上述淘汰规则下，经过一轮淘汰，剩下好芯片毕坏芯片至少多1片。<br>证：设<br>A,B都是好芯片i组<br>A与B一好一坏j组<br>A与B都坏的k组<br>淘汰后好芯片至少i片坏芯片之多k片</p>
<ul>
<li>2i + 2j + 2k = n  # 初始芯片总数</li>
<li>2i + j &gt; 2k +j  # 左侧是原来好芯片数，右侧原来坏芯片数 </li>
<li>i &gt; k #  </li>
</ul>
<p>淘汰以后 好芯片依旧比坏芯片多 </p>
<p>命题2：当n为奇数时 可能会出问题<br>输入：”好 好 好 好 坏 坏 坏”<br>分组: [“好” “好”] [“好” “好”] [“坏” “坏”] “坏”<br>淘汰后: “好” “好” “坏” “坏”<br>处理方法： 当n为奇数时 增加一轮对轮空的芯片单独测试，<br>如果是好芯片，算法结束；<br>如果是坏芯片，淘汰坏芯片，保持好芯片比坏芯片至少多一片条件</p>
<h4 id="算法复杂度-O-n"><a href="#算法复杂度-O-n" class="headerlink" title="算法复杂度 O(n)"></a>算法复杂度 O(n)</h4><details>
  <summary> python代码 </summary>

<pre><code class="python"><span class="keyword">import</span> random

<span class="comment"># 是否使用测试用例</span>
debug_example = <span class="literal">False</span>
<span class="comment"># type example: [[int, bool], [int, bool] ... ]</span>
example =  [ [<span class="number">0</span>, <span class="literal">False</span>], [<span class="number">1</span>, <span class="literal">True</span>], [<span class="number">2</span>, <span class="literal">False</span>], [<span class="number">3</span>, <span class="literal">False</span>], [<span class="number">4</span>, <span class="literal">True</span>], [<span class="number">5</span>, <span class="literal">True</span>] ]

<span class="comment"># 随机创建实例个数范围</span>
rand_min = <span class="number">50</span>
rand_max = <span class="number">100</span>

<span class="class"><span class="keyword">class</span> <span class="title">chip</span><span class="params">()</span>:</span>
    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, number,quality)</span>:</span>
        self.number = number
        self.quality = quality

    <span class="function"><span class="keyword">def</span> <span class="title">test_target</span><span class="params">(self, target)</span>:</span>
        <span class="comment"># type target : chip</span>
        <span class="comment"># rtype ： bool</span>
        <span class="comment"># 接收一个芯片实例形参 判断该芯片好坏 返回bool</span>
        <span class="comment"># 如果本实例是好芯片 不会说谎 直接报告目标芯片的quality</span>
        <span class="comment"># 如果本实例不是好芯片 报告就有不确定性 返回一个随机值</span>
        <span class="keyword">if</span> self.quality:
            <span class="keyword">return</span> target.quality
        <span class="keyword">else</span>:
            <span class="keyword">return</span> random.choice((<span class="literal">True</span>,<span class="literal">False</span>))

<span class="function"><span class="keyword">def</span> <span class="title">create_chips</span><span class="params">()</span>:</span>
    <span class="comment"># rtype : list[chip,chip,...]</span>
    <span class="comment"># 随机创建实例 随机好坏</span>
    <span class="comment"># 最后补正好芯片比坏芯片多条件</span>
    <span class="comment"># 随机选取1或2个坏芯片改成好的 使得好芯片比坏芯片多</span>
    chips = []
    quality_count = <span class="number">0</span>
    badnums = []
    <span class="keyword">for</span> x <span class="keyword">in</span> range(random.randint(rand_min,rand_max)):
        <span class="keyword">if</span> random.choice((<span class="literal">True</span>,<span class="literal">False</span>)):
            chips.append(chip(number = x, quality = <span class="literal">True</span>))
            quality_count += <span class="number">1</span>
        <span class="keyword">else</span>:
            chips.append(chip(number = x, quality = <span class="literal">False</span>))
            badnums.append(x)
    <span class="keyword">while</span> quality_count &lt;= len(chips)/<span class="number">2</span>:
        <span class="keyword">for</span> _ <span class="keyword">in</span> range(random.choice((<span class="number">1</span>,<span class="number">2</span>))):
            num = badnums.pop(random.randint(<span class="number">0</span>,len(badnums)<span class="number">-1</span>))
            chips[num].quality = <span class="literal">True</span>
            quality_count += <span class="number">1</span>
    <span class="keyword">return</span> chips

<span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(A,B)</span>:</span>
    <span class="comment"># type A: chip</span>
    <span class="comment"># type B: chip</span>
    <span class="comment"># rtype : bool</span>
    <span class="keyword">return</span> A.test_target(B) <span class="keyword">and</span> B.test_target(A)

<span class="function"><span class="keyword">def</span> <span class="title">create_test_chips</span><span class="params">()</span>:</span>
    <span class="comment"># rtype : list[chip, chip...]</span>
    chips = []
    <span class="keyword">for</span> i <span class="keyword">in</span> example:
        chips.append(chip(number = i[<span class="number">0</span>], quality = i[<span class="number">1</span>]))
    <span class="keyword">return</span> chips    

<span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span>
    <span class="comment"># rtype : chip</span>
    <span class="keyword">if</span> debug_example:
        chips = create_test_chips()
    <span class="keyword">else</span>:
        chips = create_chips()
    <span class="keyword">while</span> len(chips) &gt; <span class="number">3</span>:
        <span class="comment"># 当总量为奇数时 对最后一个元素单独判断 </span>
        <span class="comment"># 循环遍历前面的元素 与最后一个元素测试 得到最后一片芯片的quality </span>
        <span class="keyword">if</span> len(chips)%<span class="number">2</span> != <span class="number">0</span>:    
            count = <span class="number">0</span>
            <span class="keyword">for</span> i <span class="keyword">in</span> chips[:<span class="number">-1</span>]:
                <span class="keyword">if</span> i.test_target(chips[<span class="number">-1</span>]):
                    count += <span class="number">1</span>
            <span class="keyword">if</span> count &gt;= len(chips)//<span class="number">2</span>: <span class="comment"># 此时已经发现最后一片是好芯片</span>
                <span class="keyword">return</span> chips[<span class="number">-1</span>]
            <span class="keyword">else</span>:
                chips.pop()
        <span class="keyword">else</span>:   <span class="comment"># 如果不是奇数 进入分组淘汰模式</span>
            surplus = []
            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(chips)//<span class="number">2</span>):
                <span class="comment"># 两两一组互相测试 都报告好芯片 就随机选一个进入下一轮</span>
                <span class="keyword">if</span> test( chips[i*<span class="number">2</span>], chips[i*<span class="number">2</span>+<span class="number">1</span>] ):
                    surplus.append( chips[ i*<span class="number">2</span> + random.choice((<span class="number">0</span>, <span class="number">1</span>))] )
            chips = surplus   

    <span class="keyword">if</span> len(chips) &lt;= <span class="number">2</span>:
        <span class="keyword">return</span> chips[<span class="number">0</span>]
    <span class="keyword">elif</span> len(chips) == <span class="number">3</span>:
        <span class="keyword">if</span> test(chips[<span class="number">0</span>],chips[<span class="number">1</span>]):
            <span class="keyword">return</span> chips[<span class="number">0</span>]
        <span class="keyword">else</span>:
            <span class="keyword">return</span> chips[<span class="number">2</span>]
    <span class="keyword">else</span>:
        print(<span class="string">"Error!"</span>)
        <span class="keyword">return</span>        

<span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:
    target = main()
    print(<span class="string">"target:\nnumber {}\nquality {}"</span>.format( target.number, target.quality))</code></pre>
</details>  





]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>本站的坑</title>
    <url>/2019/12/09/blog/</url>
    <content><![CDATA[<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><h4 id="本地环境："><a href="#本地环境：" class="headerlink" title="本地环境："></a>本地环境：</h4><ul>
<li>windows10</li>
<li>环境:git, Node.js, hexo…</li>
<li>生成本地静态网站</li>
</ul>
<h4 id="服务器环境："><a href="#服务器环境：" class="headerlink" title="服务器环境："></a>服务器环境：</h4><ul>
<li>阿里云 centos7</li>
<li>环境: git, Nginx, 创建git用户 略…</li>
<li>使用git自动化部署</li>
<li><code>yum install git</code></li>
<li><code>yum install nginx</code> 略..</li>
</ul>
<h4 id="秘钥配置"><a href="#秘钥配置" class="headerlink" title="秘钥配置"></a>秘钥配置</h4><p>本地使用windows gitBash<br><code>ssh-keygen -t rsa</code><br>可以不用填 直接回车三连<br>看到下图大概ok</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa</span></pre></td></tr><tr><td class="code"><pre><span class="line">Generating public&#x2F;private rsa key pair.</span></pre></td></tr><tr><td class="code"><pre><span class="line">Enter file in which to save the key (&#x2F;c&#x2F;Users&#x2F;cocoa&#x2F;.ssh&#x2F;id_rsa):</span></pre></td></tr><tr><td class="code"><pre><span class="line">Enter passphrase (empty for no passphrase):</span></pre></td></tr><tr><td class="code"><pre><span class="line">Enter same passphrase again:</span></pre></td></tr><tr><td class="code"><pre><span class="line">Your identification has been saved in &#x2F;c&#x2F;Users&#x2F;cocoa&#x2F;.ssh&#x2F;id_rsa.</span></pre></td></tr><tr><td class="code"><pre><span class="line">Your public key has been saved in &#x2F;c&#x2F;Users&#x2F;cocoa&#x2F;.ssh&#x2F;id_rsa.pub.</span></pre></td></tr><tr><td class="code"><pre><span class="line">The key fingerprint is:</span></pre></td></tr><tr><td class="code"><pre><span class="line">SHA256:aVu4RvVva6KAlg6j7IOrjxzUjjMPD8MJfZbRYzCVkDo cocoa@Hoto</span></pre></td></tr><tr><td class="code"><pre><span class="line">The key&#39;s randomart image is:</span></pre></td></tr><tr><td class="code"><pre><span class="line">+---[RSA 3072]----+</span></pre></td></tr><tr><td class="code"><pre><span class="line">|    ++..         |</span></pre></td></tr><tr><td class="code"><pre><span class="line">|    .+.          |</span></pre></td></tr><tr><td class="code"><pre><span class="line">|   .. +   .      |</span></pre></td></tr><tr><td class="code"><pre><span class="line">| .E  + . + .     |</span></pre></td></tr><tr><td class="code"><pre><span class="line">|...o+   S . .    |</span></pre></td></tr><tr><td class="code"><pre><span class="line">|+ +o   &#x3D; +   .   |</span></pre></td></tr><tr><td class="code"><pre><span class="line">| % .o + &#x3D;     o  |</span></pre></td></tr><tr><td class="code"><pre><span class="line">|oo@. &#x3D; . .  .... |</span></pre></td></tr><tr><td class="code"><pre><span class="line">|&#x3D;&#x3D;&#x3D;+  .   .. o.  |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+----[SHA256]-----+</span></pre></td></tr></table></figure>
<p>windows gitBash 有如下文件 known_hosts保存旧秘钥的 不需要可以删掉 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ls ~&#x2F;.ssh</span></pre></td></tr><tr><td class="code"><pre><span class="line">id_rsa  id_rsa.pub  known_hosts</span></pre></td></tr></table></figure>
<p>在服务器上 切换至git用户<br><code>mkdir ~/.ssh</code><br><code>vim ~/.ssh/authorized_keys</code><br>将本地<code>id_rsa.pub</code>文件内容粘贴到服务器<code>authorized_keys</code>里面<br>修改权限<br><code>cd ~</code><br><code>chmod 600 .ssh/authorzied_keys</code><br><code>chmod 700 .ssh</code></p>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>在本地windows上 使用<code>GitBash</code>测试是否能连接上服务器<br><code>ssh -v git@serverip</code><br>如果有错误提示 删除本地<code>known_hosts</code>文件里面纪录的服务器相关信息</p>
<h4 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h4><p>安装 <code>yum install nginx</code> 过程略…<br>使用 nginx -t 命令查看位置，一般为 /etc/nginx/nginx.conf<br>使用 vim /etc/nginx/nginx.conf 命令进行编辑，修改配置文件如下：  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    listen       80 default_server;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    listen       [::]:80 default_server;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    server_name  www.hotococoa.com;    # 修改为自己的域名</span></pre></td></tr><tr><td class="code"><pre><span class="line">    root         &#x2F;home&#x2F;hexo;    # 修改为网站的根目录</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    # Load configuration files for the default server block.</span></pre></td></tr><tr><td class="code"><pre><span class="line">    include &#x2F;etc&#x2F;nginx&#x2F;default.d&#x2F;*.conf;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    location &#x2F; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    error_page 404 &#x2F;404.html;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        location &#x3D; &#x2F;40x.html &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    error_page 500 502 503 504 &#x2F;50x.html;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        location &#x3D; &#x2F;50x.html &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p><code>root</code>为网站目录 就是部署上传的位置<br>使用<code>nginx -t</code>检查配置语法<br><code>systemctl restart nginx.service</code>重启nginx<br>完.</p>
<hr>
<h2 id="评论区的坑"><a href="#评论区的坑" class="headerlink" title="评论区的坑"></a>评论区的坑</h2><h4 id="创建一个新仓库"><a href="#创建一个新仓库" class="headerlink" title="创建一个新仓库"></a>创建一个新仓库</h4><p>记住这个仓库名字<br><img src="http://hotobun.gitee.io/hexo/img/archive_img/blog_pit1.png" alt=""></p>
<h4 id="创建GitHub-Application"><a href="#创建GitHub-Application" class="headerlink" title="创建GitHub Application"></a>创建GitHub Application</h4><p>没创建的 <a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">点这里申请</a><br>已创建的在<code>Settings</code> -&gt; <code>Developer settings</code> -&gt; <code>OAuth Apps</code>里面找<br>这个名字貌似随便填 反正没用上<br><img src="http://hotobun.gitee.io/hexo/img/archive_img/blog_pit2.png" alt=""></p>
<h4 id="填写config"><a href="#填写config" class="headerlink" title="填写config"></a>填写config</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Gitalk 评论插件（https://github.com/gitalk/gitalk）</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">gitalk:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment"># 是否自动展开评论框</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    autoExpand: <span class="literal">false</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment"># 应用编号</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    clientID: <span class="string">'2275782fd492bd7192d5'</span>  <span class="comment"># 步骤2 </span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment"># 应用秘钥</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    clientSecret: <span class="string">'4bdaa80e28e4a5764b22cae20807e6c39ff3be4d'</span>   <span class="comment"># 步骤2</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment"># issue仓库名</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    repo: <span class="string">'HexoGitalk'</span>   <span class="comment"># 步骤1 </span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment"># Github名</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    owner: <span class="string">'Hotobun'</span>     <span class="comment"># 后面自己填 </span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment"># Github名</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    admin: [<span class="string">'Hotobun'</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment"># Ensure uniqueness and length less than 50hexo  </span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    id: location.pathname</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment"># Facebook-like distraction free mode</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    distractionFreeMode: <span class="literal">false</span></span></pre></td></tr></table></figure>

<hr>
<h2 id="修改表格宽度"><a href="#修改表格宽度" class="headerlink" title="修改表格宽度"></a>修改表格宽度</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"># <span class="selector-tag">diaspora</span><span class="selector-class">.css</span> <span class="selector-tag">line</span> 220</span></pre></td></tr><tr><td class="code"><pre><span class="line"># 修改 <span class="selector-tag">table-layout</span> </span></pre></td></tr><tr><td class="code"><pre><span class="line"># 源文件</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="selector-class">.content</span> <span class="selector-tag">table</span> &#123;<span class="attribute">margin</span>:<span class="number">15px</span> <span class="number">0</span>;<span class="attribute">border-collapse</span>:collapse;<span class="attribute">display</span>:table;<span class="attribute">width</span>:<span class="number">100%</span>;<span class="attribute">table-layout</span>:fixed;<span class="attribute">word-wrap</span>:break-word;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"># 修改后</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="selector-class">.content</span> <span class="selector-tag">table</span> &#123;<span class="attribute">margin</span>:<span class="number">15px</span> <span class="number">0</span>;<span class="attribute">border-collapse</span>:collapse;<span class="attribute">display</span>:table;<span class="attribute">width</span>:<span class="number">100%</span>;<span class="attribute">table-layout</span>:automatic;<span class="attribute">word-wrap</span>:break-word;&#125;</span></pre></td></tr></table></figure>

<p><img src="http://hotobun.gitee.io/hexo/img/archive_img/blog_table1.png" alt=""><br><img src="http://hotobun.gitee.io/hexo/img/archive_img/blog_table2.png" alt=""></p>
]]></content>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>linux常用指令</title>
    <url>/2019/12/07/linuxcmd/</url>
    <content><![CDATA[<ul>
<li><p>系统信息： </p>
<ul>
<li>arch 显示机器的处理器架构(1)</li>
<li>uname -m 显示机器的处理器架构(2)</li>
<li>uname -r 显示正在使用的内核版本</li>
<li>dmidecode -q 显示硬件系统部件 - (SMBIOS / DMI)</li>
<li>hdparm -i /dev/hda 罗列一个磁盘的架构特性</li>
<li>hdparm -tT /dev/sda 在磁盘上执行测试性读取操作</li>
<li>cat /proc/cpuinfo 显示CPU info的信息</li>
<li>cat /proc/interrupts 显示中断</li>
<li>cat /proc/meminfo 校验内存使用</li>
<li>cat /proc/swaps 显示哪些swap被使用</li>
<li>cat /proc/version 显示内核的版本</li>
<li>cat /proc/net/dev 显示网络适配器及统计</li>
<li>cat /proc/mounts 显示已加载的文件系统</li>
<li>lspci -tv 罗列 PCI 设备</li>
<li>lsusb -tv 显示 USB 设备</li>
<li>date 显示系统日期</li>
<li>cal 2007 显示2007年的日历表</li>
<li>date 041217002007.00 设置日期和时间 - 月日时分年.秒</li>
<li>clock -w 将时间修改保存到 BIOS</li>
</ul>
</li>
<li><p>关机 (系统的关机、重启以及登出 )： </p>
<ul>
<li>shutdown -h now 关闭系统(1)</li>
<li>init 0 关闭系统(2)</li>
<li>telinit 0 关闭系统(3)</li>
<li>shutdown -h hours:minutes &amp; 按预定时间关闭系统</li>
<li>shutdown -c 取消按预定时间关闭系统</li>
<li>shutdown -r now 重启(1)</li>
<li>reboot 重启(2)</li>
<li>logout 注销</li>
</ul>
</li>
<li><p>文件和目录： </p>
<ul>
<li>cd /home 进入 ‘/ home’ 目录’</li>
<li>cd .. 返回上一级目录</li>
<li>cd ../.. 返回上两级目录</li>
<li>cd 进入个人的主目录</li>
<li>cd ~user1 进入个人的主目录</li>
<li>cd - 返回上次所在的目录</li>
<li>pwd 显示工作路径</li>
<li>ls 查看目录中的文件</li>
<li>ls -F 查看目录中的文件</li>
<li>ls -l 显示文件和目录的详细资料</li>
<li>ls -a 显示隐藏文件</li>
<li>ls <em>[0-9]</em> 显示包含数字的文件名和目录名</li>
<li>tree 显示文件和目录由根目录开始的树形结构(1)</li>
<li>lstree 显示文件和目录由根目录开始的树形结构(2)</li>
<li>mkdir dir1 创建一个叫做 ‘dir1’ 的目录’</li>
<li>mkdir dir1 dir2 同时创建两个目录</li>
<li>mkdir -p /tmp/dir1/dir2 创建一个目录树</li>
<li>rm -f file1 删除一个叫做 ‘file1’ 的文件’</li>
<li>rmdir dir1 删除一个叫做 ‘dir1’ 的目录’</li>
<li>rm -rf dir1 删除一个叫做 ‘dir1’ 的目录并同时删除其内容</li>
<li>rm -rf dir1 dir2 同时删除两个目录及它们的内容</li>
<li>mv dir1 new_dir 重命名/移动 一个目录</li>
<li>cp file1 file2 复制一个文件</li>
<li>cp dir/* . 复制一个目录下的所有文件到当前工作目录</li>
<li>cp -a /tmp/dir1 . 复制一个目录到当前工作目录</li>
<li>cp -a dir1 dir2 复制一个目录</li>
<li>ln -s file1 lnk1 创建一个指向文件或目录的软链接</li>
<li>ln file1 lnk1 创建一个指向文件或目录的物理链接</li>
</ul>
</li>
<li><p>文件搜索： </p>
<ul>
<li>find / -name file1 从 ‘/‘ 开始进入根文件系统搜索文件和目录</li>
<li>find / -user user1 搜索属于用户 ‘user1’ 的文件和目录</li>
<li>find /home/user1 -name *.bin 在目录 ‘/ home/user1’ 中搜索带有’.bin’ 结尾的文件</li>
<li>find /usr/bin -type f -atime +100 搜索在过去100天内未被使用过的执行文件</li>
<li>find /usr/bin -type f -mtime -10 搜索在10天内被创建或者修改过的文件</li>
<li>find / -name *.rpm -exec chmod 755 ‘{}’ ; 搜索以 ‘.rpm’ 结尾的文件并定义其权限</li>
<li>find / -xdev -name *.rpm 搜索以 ‘.rpm’ 结尾的文件，忽略光驱、捷盘等可移动设备</li>
<li>locate *.ps 寻找以 ‘.ps’ 结尾的文件 - 先运行 ‘updatedb’ 命令</li>
<li>whereis halt 显示一个二进制文件、源码或man的位置</li>
<li>which halt 显示一个二进制文件或可执行文件的完整路径</li>
</ul>
</li>
<li><p>磁盘空间： </p>
<ul>
<li>df -h 显示已经挂载的分区列表</li>
<li>ls -lSr |more 以尺寸大小排列文件和目录</li>
<li>du -sh dir1 估算目录 ‘dir1’ 已经使用的磁盘空间’</li>
<li>du -sk * | sort -rn 以容量大小为依据依次显示文件和目录的大小</li>
<li>rpm -q -a –qf ‘%10{SIZE}t%{NAME}n’ | sort -k1,1n 以大小为依据依次显示已安装的rpm包所使用的空* 间 (fedora, redhat类系统)</li>
<li>dpkg-query -W -f=’${Installed-Size;10}t${Package}n’ | sort -k1,1n 以大小为依据显示已安装的deb* 包所使用的空间 (ubuntu, debian类系统)</li>
</ul>
</li>
<li><p>用户和群组： </p>
<ul>
<li>groupadd group_name 创建一个新用户组</li>
<li>groupdel group_name 删除一个用户组</li>
<li>groupmod -n new_group_name old_group_name 重命名一个用户组</li>
<li>useradd -c “Name Surname “ -g admin -d /home/user1 -s /bin/bash user1 创建一个属于 “admin” * 用户组的用户</li>
<li>useradd user1 创建一个新用户</li>
<li>userdel -r user1 删除一个用户 ( ‘-r’ 排除主目录)</li>
<li>usermod -c “User FTP” -g system -d /ftp/user1 -s /bin/nologin user1 修改用户属性</li>
<li>passwd 修改口令</li>
<li>passwd user1 修改一个用户的口令 (只允许root执行)</li>
<li>chage -E 2005-12-31 user1 设置用户口令的失效期限</li>
<li>pwck 检查 ‘/etc/passwd’ 的文件格式和语法修正以及存在的用户</li>
<li>grpck 检查 ‘/etc/passwd’ 的文件格式和语法修正以及存在的群组</li>
<li>newgrp group_name 登陆进一个新的群组以改变新创建文件的预设群组</li>
</ul>
</li>
<li><p>文件的权限 - 使用 “+” 设置权限，使用 “-“ 用于取消： </p>
<ul>
<li>ls -lh 显示权限</li>
<li>ls /tmp | pr -T5 -W$COLUMNS 将终端划分成5栏显示</li>
<li>chmod ugo+rwx directory1 设置目录的所有人(u)、群组(g)以及其他人(o)以读（r ）、写(w)和执行(x)的* 权限</li>
<li>chmod go-rwx directory1 删除群组(g)与其他人(o)对目录的读写执行权限</li>
<li>chown user1 file1 改变一个文件的所有人属性</li>
<li>chown -R user1 directory1 改变一个目录的所有人属性并同时改变改目录下所有文件的属性</li>
<li>chgrp group1 file1 改变文件的群组</li>
<li>chown user1:group1 file1 改变一个文件的所有人和群组属性</li>
<li>find / -perm -u+s 罗列一个系统中所有使用了SUID控制的文件</li>
<li>chmod u+s /bin/file1 设置一个二进制文件的 SUID 位 - 运行该文件的用户也被赋予和所有者同样的权限</li>
<li>chmod u-s /bin/file1 禁用一个二进制文件的 SUID位</li>
<li>chmod g+s /home/public 设置一个目录的SGID 位 - 类似SUID ，不过这是针对目录的</li>
<li>chmod g-s /home/public 禁用一个目录的 SGID 位</li>
<li>chmod o+t /home/public 设置一个文件的 STIKY 位 - 只允许合法所有人删除文件</li>
<li>chmod o-t /home/public 禁用一个目录的 STIKY 位</li>
</ul>
</li>
<li><p>文件的特殊属性 - 使用 “+” 设置权限，使用 “-“ 用于取消： </p>
<ul>
<li>chattr +a file1 只允许以追加方式读写文件</li>
<li>chattr +c file1 允许这个文件能被内核自动压缩/解压</li>
<li>chattr +d file1 在进行文件系统备份时，dump程序将忽略这个文件</li>
<li>chattr +i file1 设置成不可变的文件，不能被删除、修改、重命名或者链接</li>
<li>chattr +s file1 允许一个文件被安全地删除</li>
<li>chattr +S file1 一旦应用程序对这个文件执行了写操作，使系统立刻把修改的结果写到磁盘</li>
<li>chattr +u file1 若文件被删除，系统会允许你在以后恢复这个被删除的文件</li>
<li>lsattr 显示特殊的属性</li>
</ul>
</li>
<li><p>打包和压缩文件： </p>
<ul>
<li>bunzip2 file1.bz2 解压一个叫做 ‘file1.bz2’的文件</li>
<li>bzip2 file1 压缩一个叫做 ‘file1’ 的文件</li>
<li>gunzip file1.gz 解压一个叫做 ‘file1.gz’的文件</li>
<li>gzip file1 压缩一个叫做 ‘file1’的文件</li>
<li>gzip -9 file1 最大程度压缩</li>
<li>rar a file1.rar test_file 创建一个叫做 ‘file1.rar’ 的包</li>
<li>rar a file1.rar file1 file2 dir1 同时压缩 ‘file1’, ‘file2’ 以及目录 ‘dir1’</li>
<li>rar x file1.rar 解压rar包</li>
<li>unrar x file1.rar 解压rar包</li>
<li>tar -cvf archive.tar file1 创建一个非压缩的 tarball</li>
<li>tar -cvf archive.tar file1 file2 dir1 创建一个包含了 ‘file1’, ‘file2’ 以及 ‘dir1’的档案文件</li>
<li>tar -tf archive.tar 显示一个包中的内容</li>
<li>tar -xvf archive.tar 释放一个包</li>
<li>tar -xvf archive.tar -C /tmp 将压缩包释放到 /tmp目录下</li>
<li>tar -cvfj archive.tar.bz2 dir1 创建一个bzip2格式的压缩包</li>
<li>tar -xvfj archive.tar.bz2 解压一个bzip2格式的压缩包</li>
<li>tar -cvfz archive.tar.gz dir1 创建一个gzip格式的压缩包</li>
<li>tar -xvfz archive.tar.gz 解压一个gzip格式的压缩包</li>
<li>zip file1.zip file1 创建一个zip格式的压缩包</li>
<li>zip -r file1.zip file1 file2 dir1 将几个文件和目录同时压缩成一个zip格式的压缩包</li>
<li>unzip file1.zip 解压一个zip格式压缩包</li>
</ul>
</li>
<li><p>查看文件内容： </p>
<ul>
<li>cat file1 从第一个字节开始正向查看文件的内容</li>
<li>tac file1 从最后一行开始反向查看一个文件的内容</li>
<li>more file1 查看一个长文件的内容</li>
<li>less file1 类似于 ‘more’ 命令，但是它允许在文件中和正向操作一样的反向操作</li>
<li>head -2 file1 查看一个文件的前两行</li>
<li>tail -2 file1 查看一个文件的最后两行</li>
<li>tail -f /var/log/messages 实时查看被添加到一个文件中的内容</li>
</ul>
</li>
<li><p>文本处理： </p>
<ul>
<li>cat file1 | command( sed, grep, awk, grep, etc…) &gt; result.txt 合并一个文件的详细说明文本，* 并将简介写入一个新文件中</li>
<li>cat file1 | command( sed, grep, awk, grep, etc…) &gt;&gt; result.txt 合并一个文件的详细说明文本，* 并将简介写入一个已有的文件中</li>
<li>grep Aug /var/log/messages 在文件 ‘/var/log/messages’中查找关键词”Aug”</li>
<li>grep ^Aug /var/log/messages 在文件 ‘/var/log/messages’中查找以”Aug”开始的词汇</li>
<li>grep [0-9] /var/log/messages 选择 ‘/var/log/messages’ 文件中所有包含数字的行</li>
<li>grep Aug -R /var/log/* 在目录 ‘/var/log’ 及随后的目录中搜索字符串”Aug”</li>
<li>sed ‘s/stringa1/stringa2/g’ example.txt 将example.txt文件中的 “string1” 替换成 “string2”</li>
<li>sed ‘/^$/d’ example.txt 从example.txt文件中删除所有空白行</li>
<li>sed ‘/ *#/d; /^$/d’ example.txt 从example.txt文件中删除所有注释和空白行</li>
<li>echo ‘esempio’ | tr ‘[:lower:]’ ‘[:upper:]’ 合并上下单元格内容</li>
<li>sed -e ‘1d’ result.txt 从文件example.txt 中排除第一行</li>
<li>sed -n ‘/stringa1/p’ 查看只包含词汇 “string1”的行</li>
<li>sed -e ‘s/ *$//‘ example.txt 删除每一行最后的空白字符</li>
<li>sed -e ‘s/stringa1//g’ example.txt 从文档中只删除词汇 “string1” 并保留剩余全部</li>
<li>sed -n ‘1,5p;5q’ example.txt 查看从第一行到第5行内容</li>
<li>sed -n ‘5p;5q’ example.txt 查看第5行</li>
<li>sed -e ‘s/00*/0/g’ example.txt 用单个零替换多个零</li>
<li>cat -n file1 标示文件的行数</li>
<li>cat example.txt | awk ‘NR%2==1’ 删除example.txt文件中的所有偶数行</li>
<li>echo a b c | awk ‘{print $1}’ 查看一行第一栏</li>
<li>echo a b c | awk ‘{print $1,$3}’ 查看一行的第一和第三栏</li>
<li>paste file1 file2 合并两个文件或两栏的内容</li>
<li>paste -d ‘+’ file1 file2 合并两个文件或两栏的内容，中间用”+”区分</li>
<li>sort file1 file2 排序两个文件的内容</li>
<li>sort file1 file2 | uniq 取出两个文件的并集(重复的行只保留一份)</li>
<li>sort file1 file2 | uniq -u 删除交集，留下其他的行</li>
<li>sort file1 file2 | uniq -d 取出两个文件的交集(只留下同时存在于两个文件中的文件)</li>
<li>comm -1 file1 file2 比较两个文件的内容只删除 ‘file1’ 所包含的内容</li>
<li>comm -2 file1 file2 比较两个文件的内容只删除 ‘file2’ 所包含的内容</li>
<li>comm -3 file1 file2 比较两个文件的内容只删除两个文件共有的部分</li>
</ul>
</li>
<li><p>字符设置和文件格式转换：</p>
<ul>
<li>dos2unix filedos.txt fileunix.txt 将一个文本文件的格式从MSDOS转换成UNIX</li>
<li>unix2dos fileunix.txt filedos.txt 将一个文本文件的格式从UNIX转换成MSDOS</li>
<li>recode ..HTML &lt; page.txt &gt; page.html 将一个文本文件转换成html</li>
<li>recode -l | more 显示所有允许的转换格式</li>
</ul>
</li>
<li><p>文件系统分析： </p>
<ul>
<li>badblocks -v /dev/hda1 检查磁盘hda1上的坏磁块</li>
<li>fsck /dev/hda1 修复/检查hda1磁盘上linux文件系统的完整性</li>
<li>fsck.ext2 /dev/hda1 修复/检查hda1磁盘上ext2文件系统的完整性</li>
<li>e2fsck /dev/hda1 修复/检查hda1磁盘上ext2文件系统的完整性</li>
<li>e2fsck -j /dev/hda1 修复/检查hda1磁盘上ext3文件系统的完整性</li>
<li>fsck.ext3 /dev/hda1 修复/检查hda1磁盘上ext3文件系统的完整性</li>
<li>fsck.vfat /dev/hda1 修复/检查hda1磁盘上fat文件系统的完整性</li>
<li>fsck.msdos /dev/hda1 修复/检查hda1磁盘上dos文件系统的完整性</li>
<li>dosfsck /dev/hda1 修复/检查hda1磁盘上dos文件系统的完整性</li>
</ul>
</li>
<li><p>初始化一个文件系统：</p>
<ul>
<li>mkfs /dev/hda1 在hda1分区创建一个文件系统</li>
<li>mke2fs /dev/hda1 在hda1分区创建一个linux ext2的文件系统</li>
<li>mke2fs -j /dev/hda1 在hda1分区创建一个linux ext3(日志型)的文件系统</li>
<li>mkfs -t vfat 32 -F /dev/hda1 创建一个 FAT32 文件系统</li>
<li>fdformat -n /dev/fd0 格式化一个软盘</li>
<li>mkswap /dev/hda3 创建一个swap文件系统</li>
</ul>
</li>
<li><p>SWAP文件系统： </p>
<ul>
<li>mkswap /dev/hda3 创建一个swap文件系统</li>
<li>swapon /dev/hda3 启用一个新的swap文件系统</li>
<li>swapon /dev/hda2 /dev/hdb3 启用两个swap分区</li>
</ul>
</li>
<li><p>备份： </p>
<ul>
<li>dump -0aj -f /tmp/home0.bak /home 制作一个 ‘/home’ 目录的完整备份</li>
<li>dump -1aj -f /tmp/home0.bak /home 制作一个 ‘/home’ 目录的交互式备份</li>
<li>restore -if /tmp/home0.bak 还原一个交互式备份</li>
<li>rsync -rogpav –delete /home /tmp 同步两边的目录</li>
<li>rsync -rogpav -e ssh –delete /home ip_address:/tmp 通过SSH通道rsync</li>
<li>rsync -az -e ssh –delete ip_addr:/home/public /home/local 通过ssh和压缩将一个远程目录同步到* 本地目录</li>
<li>rsync -az -e ssh –delete /home/local ip_addr:/home/public 通过ssh和压缩将本地目录同步到远程* 目录</li>
<li>dd bs=1M if=/dev/hda | gzip | ssh user@ip_addr ‘dd of=hda.gz’ 通过ssh在远程主机上执行一次备份* 本地磁盘的操作</li>
<li>dd if=/dev/sda of=/tmp/file1 备份磁盘内容到一个文件</li>
<li>tar -Puf backup.tar /home/user 执行一次对 ‘/home/user’ 目录的交互式备份操作</li>
<li>( cd /tmp/local/ &amp;&amp; tar c . ) | ssh -C user@ip_addr ‘cd /home/share/ &amp;&amp; tar x -p’ 通过ssh在* 远程目录中复制一个目录内容</li>
<li>( tar c /home ) | ssh -C user@ip_addr ‘cd /home/backup-home &amp;&amp; tar x -p’ 通过ssh在远程目录中* 复制一个本地目录</li>
<li>tar cf - . | (cd /tmp/backup ; tar xf - ) 本地将一个目录复制到另一个地方，保留原有权限及链接</li>
<li>find /home/user1 -name ‘<em>.txt’ | xargs cp -av –target-directory=/home/backup/ –parents 从</em> 一个目录查找并复制所有以 ‘.txt’ 结尾的文件到另一个目录</li>
<li>find /var/log -name ‘*.log’ | tar cv –files-from=- | bzip2 &gt; log.tar.bz2 查找所有以 ‘.log’ 结尾的文件并做成一个bzip包</li>
<li>dd if=/dev/hda of=/dev/fd0 bs=512 count=1 做一个将 MBR (Master Boot Record)内容复制到软盘的动作</li>
<li>dd if=/dev/fd0 of=/dev/hda bs=512 count=1 从已经保存到软盘的备份中恢复MBR内容</li>
</ul>
</li>
<li><p>光盘： </p>
<ul>
<li>cdrecord -v gracetime=2 dev=/dev/cdrom -eject blank=fast -force 清空一个可复写的光盘内容</li>
<li>mkisofs /dev/cdrom &gt; cd.iso 在磁盘上创建一个光盘的iso镜像文件</li>
<li>mkisofs /dev/cdrom | gzip &gt; cd_iso.gz 在磁盘上创建一个压缩了的光盘iso镜像文件</li>
<li>mkisofs -J -allow-leading-dots -R -V “Label CD” -iso-level 4 -o ./cd.iso data_cd 创建一个目录的iso镜像文件</li>
<li>cdrecord -v dev=/dev/cdrom cd.iso 刻录一个ISO镜像文件</li>
<li>gzip -dc cd_iso.gz | cdrecord dev=/dev/cdrom - 刻录一个压缩了的ISO镜像文件</li>
<li>mount -o loop cd.iso /mnt/iso 挂载一个ISO镜像文件</li>
<li>cd-paranoia -B 从一个CD光盘转录音轨到 wav 文件中</li>
<li>cd-paranoia – “-3” 从一个CD光盘转录音轨到 wav 文件中（参数-3）</li>
<li>cdrecord –scanbus 扫描总线以识别scsi通道</li>
<li>dd if=/dev/hdc | md5sum 校验一个设备的md5sum编码，例如一张 CD</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>c语言变量</title>
    <url>/2019/12/06/c_variable/</url>
    <content><![CDATA[<h2 id="变量的属性"><a href="#变量的属性" class="headerlink" title="变量的属性"></a>变量的属性</h2><h4 id="01-变量有两种属性"><a href="#01-变量有两种属性" class="headerlink" title="01 变量有两种属性"></a>01 变量有两种属性</h4><ol>
<li>变量的操作属性：<ul>
<li>变量的类型</li>
</ul>
</li>
<li>变量的存储属性：<ul>
<li>寄存器类型：寄存器、静态存储区、动态存储区</li>
<li>生存期：静态变量、动态变量</li>
<li>作用域：局部变量、全局变量</li>
</ul>
</li>
</ol>
<h4 id="02-变量定义"><a href="#02-变量定义" class="headerlink" title="02 变量定义"></a>02 变量定义</h4><p>变量定义格式为：储存类型 数据类型 变量表；<br>储存类型默认auto   </p>
<table>
<thead>
<tr>
<th align="center">储存类型</th>
<th align="center">例子</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">auto 自动型</td>
<td align="center">int sum;</td>
<td align="center">不能用于定义全局变量</td>
</tr>
<tr>
<td align="center">register 寄存器型</td>
<td align="center">register int i;</td>
<td align="center">必须是能被CPU所接受的类型，长度受限</td>
</tr>
<tr>
<td align="center">static 静态型</td>
<td align="center">static float x;</td>
<td align="center">静态全局变量，不能被不同源文件调用</td>
</tr>
<tr>
<td align="center">extern 外部型</td>
<td align="center">extern int v;</td>
<td align="center">此变量是在外部定义，在此处引用</td>
</tr>
</tbody></table>
<h4 id="03-局部变量与全局变量"><a href="#03-局部变量与全局变量" class="headerlink" title="03 局部变量与全局变量"></a>03 局部变量与全局变量</h4><ol>
<li>局部变量 — 内部变量<ul>
<li>定义：在函数或复合语句内定义，在定义它的函数或复合语句内有效</li>
<li>说明：<ul>
<li>不同函数中同名变量，占不同的存储单元</li>
<li>形参属于局部变量</li>
<li>局部变量值在函数内调用时起作用，函数调用结束，值消失</li>
</ul>
</li>
</ul>
</li>
<li>全局变量 — 外部变量<ul>
<li>定义：在函数外定义，可为本文件内所有函数公用。有效范围是从定义该变量的位置开始到本源文件结束，及有extern说明的其他源文件</li>
</ul>
</li>
</ol>
<p>“auto”类定义的自动变：鞋实质上是一个函数内部的局部变量，作用域是在所说明的函数中；“register”说明只能用于说明函数中的变量和参数中的形参，因此不允许将外部变量或静态变量说明为register；“extern”是定义在所有函数之外的全局变量，它可以被所有的函数访问，在所有函数体的内部是有效的，所以函数之间可以通过外部变量直接传递数据；“static”为允许本源文件中所有函数使用的全局变量。</p>
]]></content>
      <categories>
        <category>基础</category>
      </categories>
      <tags>
        <tag>c语言</tag>
      </tags>
  </entry>
  <entry>
    <title>工地英语</title>
    <url>/2019/12/06/english/</url>
    <content><![CDATA[<h2 id="01-英语五种基本句式"><a href="#01-英语五种基本句式" class="headerlink" title="01 英语五种基本句式"></a>01 英语五种基本句式</h2><ol>
<li><p>Subject(主语) + Verb（谓语）  </p>
<details>
<summary> The universe remains.   </summary>
宇宙长存
</details>
</li>
<li><p>Subject(主语) + L.V(系动词) + P(表语)  </p>
<details>
<summary> The food is delicious.  </summary>
这个食物很好吃
</details>
</li>
<li><p>Subject(主语) + Verb(谓语) + Object(宾语)</p>
<details>
<summary> He took his bag and left. </summary>
他拿着书包离开了
</details>   
</li>
<li><p>S(主语) + V(谓语) + I.o(间接宾语) + D.o（直接宾语）</p>
<details>
<summary>Her father bought her a dictionary.</summary>
她的爸爸给她买了一本词典
</details>  
</li>
<li><p>S(主语) + V(谓语) + O(宾语) + C(补语)</p>
<details>
<summary>We made him our monitor.</summary>
我们选他当班长
</details> 

</li>
</ol>
<hr>
<h2 id="02-Be动词的形式"><a href="#02-Be动词的形式" class="headerlink" title="02 Be动词的形式"></a>02 Be动词的形式</h2><p>be, is, am, are, was, were, being, baen </p>
<table>
<thead>
<tr>
<th align="left">主语</th>
<th align="center">现在</th>
<th align="center">过去</th>
</tr>
</thead>
<tbody><tr>
<td align="left">I (第一人称)</td>
<td align="center">am</td>
<td align="center">was</td>
</tr>
<tr>
<td align="left">He,She,It(第三人称单数)</td>
<td align="center">is</td>
<td align="center">was</td>
</tr>
<tr>
<td align="left">You,We,They(第二人称单数、复数；第一第三人称复数)</td>
<td align="center">are</td>
<td align="center">were</td>
</tr>
</tbody></table>
<p>动词的用法:<br>  后面接名词、形容词、地点副词、或短语做补足语  </p>
<details>
  <summary> The man is back. </summary>
  这个男人回来了 (单数主语 )
</details>  
<details>
  <summary> They are back. </summary>
  他们回来了 (复数主语 )
</details>  
<details>
  <summary> He was back </summary>
  他回来了   (过去时态 )
</details>  
<details>
  <summary> They were back. </summary>
  他们回来了 (过去时态)
</details>  
<details>
  <summary> They have been back. </summary>
  他们已经回来了 (现在完成时)
</details>  
<details>
  <summary> The man is a teacher. </summary>
  这个男人是一名教师
</details>  
<details>
  <summary> Mary's new dresses are colorful. </summary>
  玛丽的新裙子是五颜六色的
</details>  
<details>
  <summary> My mother was in the kitchen. </summary>
  我的妈妈在厨房里 
</details>  
练习：
<details>
  <summary> 他们是老师 </summary>
  They are teachers.
</details>  
<details>
  <summary> 他以前是一名老师 </summary>
  He was a teacher before.
</details>  
<details>
  <summary> 他已经当了3年的老师 </summary>
  He has been a teacher for 3 years.
</details>  

<hr>
<h2 id="03-Be动词的否定"><a href="#03-Be动词的否定" class="headerlink" title="03 Be动词的否定"></a>03 Be动词的否定</h2><p>在am, is, are, was, were 后面加not.<br>缩略式：am not; isn’t, aren’t, wasn’t, weren’t  </p>
<details>
  <summary> The man isn't back. </summary>
  这个男人没有回来
</details>  
<details>
  <summary> I am not back. </summary>
  我没有回来
</details>  
<details>
  <summary> They aren't back. </summary>
  他们没有回来
</details>  
<details>
  <summary> He wasn't back. </summary>
  他没有回来 （单数过去时）
</details>  
<details>
  <summary> They weren't back. </summary>
  他们没有回来 (复数过去时)
</details>  
<details>
  <summary> Is he a teacher? </summary>
  他是一名老师吗  
  yes,he is. / No,he isn't.
</details>  
<details>
  <summary> Are you a teacher? </summary>
  你是一名老师吗?  
  Yes,I am. / No,I am not.
</details>  
<details>
  <summary> Were they teachers? </summary>
  他们以前是老师吗？(过去时态句子)  
  Yes,they were. / No,they weren't
</details>  

<p>练习:  </p>
<details>
  <summary> 他是一名医生吗? </summary>
  Is he a doctor?
  Yes,he is.  /  No,he isn't.
</details>  
<details>
  <summary> 他们昨天在教室吗? </summary>
  Were they in the classroom yesterday?  
  Yes, they were. / No, they weren't.
</details>  
<details>
  <summary> 他们不在教室。 </summary>
  They weren't in the classroom yesteday
</details>

<hr>
<h2 id="04-代词的主格和宾格"><a href="#04-代词的主格和宾格" class="headerlink" title="04 代词的主格和宾格"></a>04 代词的主格和宾格</h2><table>
<thead>
<tr>
<th align="center">主</th>
<th align="center">宾</th>
<th align="center">形容词性物主代词</th>
<th align="center">名词性物主代词</th>
</tr>
</thead>
<tbody><tr>
<td align="center">i</td>
<td align="center">me</td>
<td align="center">my</td>
<td align="center">mine</td>
</tr>
<tr>
<td align="center">he</td>
<td align="center">him</td>
<td align="center">his</td>
<td align="center">his</td>
</tr>
<tr>
<td align="center">she</td>
<td align="center">her</td>
<td align="center">her</td>
<td align="center">hers</td>
</tr>
<tr>
<td align="center">it</td>
<td align="center">it</td>
<td align="center">its</td>
<td align="center">its</td>
</tr>
<tr>
<td align="center">you</td>
<td align="center">you</td>
<td align="center">your</td>
<td align="center">yours</td>
</tr>
<tr>
<td align="center">we</td>
<td align="center">us</td>
<td align="center">our</td>
<td align="center">ours</td>
</tr>
<tr>
<td align="center">they</td>
<td align="center">them</td>
<td align="center">their</td>
<td align="center">theirs</td>
</tr>
</tbody></table>
<ol>
<li>I am a teacher. </li>
<li>He is a teacher.</li>
<li>You are teachers.</li>
<li>He likes me.</li>
<li>We like her.</li>
<li>I like them.</li>
<li>Life is short, i use python.</li>
<li>I like it.</li>
<li>They know him.</li>
</ol>
<hr>
<h2 id="05-名词性、形容词性物主代词"><a href="#05-名词性、形容词性物主代词" class="headerlink" title="05 名词性、形容词性物主代词"></a>05 名词性、形容词性物主代词</h2><ol>
<li>This is my book.</li>
<li>We love our motherland.</li>
<li>Those are your socks.</li>
<li>The book is ours.</li>
<li>The apple is hers. </li>
<li>My teacher is a chinese.</li>
<li>This computer is theirs.</li>
<li>Our book is on the shelf. </li>
</ol>
<h2 id="06-反身代词"><a href="#06-反身代词" class="headerlink" title="06 反身代词"></a>06 反身代词</h2><p>有两个作用 做宾语 或 同位语 表示某人自己<br>myself<br>yourself<br>herself<br>himself<br>itself<br>yourselves<br>ourselves<br>themselves</p>
<details>
  <summary> Please help yourself to some fish. </summary>
  建议你为了自己吃点鱼
</details>  
<details>
  <summary> We enjoyed ourselves last night. </summary>
  我们昨天晚上很享受
</details>  
<details>
  <summary> The thing itself is not important </summary>
  这件事情本事并不重要 
</details>  
<details>
  <summary> Take good care of yourself. </summary>
  你好照顾好自己
</details>  
<details>
  <summary> She gained control of herself. </summary>
  她控制住了自己
</details>  

<hr>
<h2 id="07-实意动词的特征"><a href="#07-实意动词的特征" class="headerlink" title="07 实意动词的特征"></a>07 实意动词的特征</h2><p>动词应该有时态上的变化<br>come, read, go, watch, play, fly  </p>
<details>
  <summary> He comes from ShangHai. </summary>
  他从上海回来 (一般现在时主语第三人称 一般现在时 )
</details>  
<details>
  <summary> She is reading story books. </summary>
  她正在阅读故事书 (现在进行时)
</details>  
<details>
  <summary> They went to America yesteday. </summary>
  他们昨天去美国了 (went是go的一般过去时)
</details>  
<details>
  <summary> We have watched the game for three time. </summary>
  我们已经看这个游戏3遍了 (现在完成时)
</details>  
<details>
  <summary> My mother will fly back to China next month. </summary>
  我的妈妈将会在下个月飞回中国(动词将来时 动词不发生变化 在动词前面加will)
</details>  
<details>
  <summary> 他昨天来上海了 </summary>
  He come to ShangHai yesterday (come的过去时)
</details>  
<details>
  <summary> 我们正在写作业 </summary>
  We are writing homework.
</details>  
<details>
  <summary> 他们已经读这本书3遍了 </summary>
  They have read this book three times.
</details>  

<hr>
<h2 id="08-实意动词的否定-提问-回答"><a href="#08-实意动词的否定-提问-回答" class="headerlink" title="08 实意动词的否定 提问 回答"></a>08 实意动词的否定 提问 回答</h2><h4 id="使用助动词进行否定"><a href="#使用助动词进行否定" class="headerlink" title="使用助动词进行否定"></a>使用助动词进行否定</h4><p>在助动词do, does, did 后面加 not  </p>
<ol>
<li>do：do是动词原形。  </li>
<li>did：did是do的过去式。  </li>
<li>does：does是do的第三人称单数现在时形式。  </li>
</ol>
<ul>
<li>do not -&gt; don’t </li>
<li>does not -&gt; doesn’t  </li>
<li>did not -&gt; didn’t  </li>
</ul>
<details>
  <summary> I don't go to school by bus. </summary>
  我没有坐公共汽车去学校(一般现在 非第三人称 不管单数复数 )
</details>  
<details>
  <summary> She doesn't watch TV everyday </summary>
  她每天不看电视 (实意动词否定形式 单三助动词)
</details>  
<details>
  <summary> They didn't swim last night. </summary>
  他们昨天晚上没有游泳 (过去时态助动词did )
</details>  

<h4 id="使用助动词进行提问"><a href="#使用助动词进行提问" class="headerlink" title="使用助动词进行提问"></a>使用助动词进行提问</h4><details>
  <summary> He often plays golf. </summary>
  他经常打高尔夫球吗？<br>      
  Does he often play golf?<br>      
  Yes,he does. /  No,he doesn't<br>    
</details>  
<details>
  <summary> They go to school by bus. </summary>
  他们坐公共汽车去学校. (陈述句)<br>
  Do they go to school by bus?<br>      
  （一般现在时 主语非单三 使用原型they）<br>      
  Yes,they do. / No,they don't    
</details>  
<details>
  <summary> Sam had breakfast yesterday. </summary>
  山姆昨天吃早饭了(had一般过去时) <br>
  Did sam have breakfast yesteday?（过去式）  <br>
  Yes,he did. / No,he didn't.  
</details>  
<details>
  <summary> 他每天都学英语吗? </summary>
  Does he learn English everyday? <br>
  Yes, he does. / No, he doesn't.      
</details>  
<details>
  <summary> 汤姆昨天没吃早饭 </summary>
  Tom didn't have breakfast yesterday.  
</details>  

<hr>
<h2 id="09-使用疑问词进行提问回答"><a href="#09-使用疑问词进行提问回答" class="headerlink" title="09 使用疑问词进行提问回答"></a>09 使用疑问词进行提问回答</h2><p>when 什么时候, where 什么地方, who谁, what什么, how如何、怎么    </p>
<p>||||<br>:–:|:–:|:–:|:–:<br>when|什么时候|how long|多长时间<br>where|什么地方|how far|多远<br>who|谁|how often|多长时间一次<br>what|什么|why|为什么<br>who|如何、怎么||</p>
<p>疑问词要放在句首  </p>
<details>
  <summary> He bought three books yesterday. </summary>
  他昨天买了三本书 
</details>  
<details>
  <summary> 1. Who bought three books yesterday? </summary>
  谁昨天买了三本书?
</details>  
<details>
  <summary> 2. What did he buy yesterday? </summary>
  他昨天买什么了?
</details>  
<details>
  <summary> 3. When did he buy three books? </summary>
  他什么时候买了三本书？
</details>  

<details>
  <summary> They wanted to go to Shanghai by air </summary>
  他们想坐飞机去上海
</details>  
<details>
  <summary> 1. Who wanted to go to Shanghai by air? </summary>
  谁想坐飞机去上海
</details>  
<details>
  <summary> 2. Where did they want to go by air? </summary>
  他们想坐飞机去哪里
</details>  
<details>
  <summary> 3. How did they want to go to Shanghai? </summary>
  他们想怎么去上海
</details>  

<hr>
<h2 id="10-使用疑问词进行提问"><a href="#10-使用疑问词进行提问" class="headerlink" title="10 使用疑问词进行提问"></a>10 使用疑问词进行提问</h2><details>
  <summary> 1. They have been in China for three years. </summary>
  他们已经在中国三年了  
  How long have they been in China.  
  他们在中国多久了
</details>  
<details>
  <summary> 2. It is about 4 kilometers from Beijing to Xian </summary>
  从北京到西安大约4公里
  How far is it from Beijing to Xian  
  从北京到西安有多远
</details>  
<details>
  <summary> 3. They come to visit me once a week. </summary>
  他们每周来看我一次  
  How often do they come to visit me?  
  他们多长时间来砍我一次
</details>  
<details>
  <summary> 4. She came late,because she missed the bus. </summary>
  她来晚了，因为她错过了公共汽车  
  Why did she come late?  
  她为什么吃到
</details>  
<details>
  <summary> 1. 他们学汉语多长时间了 </summary>
  How long have they learned Chinese.
</details>  
<details>
  <summary> 2. 你多长时间看一次电影 </summary>
  How often do you watch movies?
</details>  
<details>
  <summary> 3. 你的家离学校多远? </summary>
  How far is it from your house to your school?
</details>  

<hr>
<h2 id="11-名词"><a href="#11-名词" class="headerlink" title="11 名词"></a>11 名词</h2><h5 id="名词分为两类"><a href="#名词分为两类" class="headerlink" title="名词分为两类"></a>名词分为两类</h5><ol>
<li><p>可数名词(countable noun)</p>
<ul>
<li>是指数得过来的概念</li>
<li>存在复数 改变后缀</li>
<li>apple </li>
<li>pencil  </li>
<li>student </li>
</ul>
</li>
<li><p>不可数名词(uncountable noun)</p>
<ul>
<li>无法计算的数量或抽象概念</li>
<li>无复数 只用单数表示</li>
<li>salt 盐</li>
<li>coffee </li>
<li>water 水</li>
<li>history 历史 抽象</li>
</ul>
</li>
</ol>
<h5 id="名词变复数规则"><a href="#名词变复数规则" class="headerlink" title="名词变复数规则"></a>名词变复数规则</h5><ol>
<li>一般末尾加上后缀 s   <code>friend -&gt; friends</code></li>
<li>以s、z、x、ch、sh 结尾的词，在末尾加 es  <code>bus -&gt; buses</code>  </li>
<li>辅音字母+y结尾的名词，将 y 改为 i 再加 es <code>candy -&gt; candies</code>  </li>
<li>以 o 结尾的名词，如果不是外来词或缩写，就加 es  <code>hippo -&gt; hippos</code></li>
</ol>
<details>
  <summary> He bought me a box of chocolates </summary>
  他给我买了一盒巧克力 (可是我看不到)
</details>  

<hr>
<h2 id="12-指示代词和不定代词"><a href="#12-指示代词和不定代词" class="headerlink" title="12 指示代词和不定代词"></a>12 指示代词和不定代词</h2><h4 id="指示代词："><a href="#指示代词：" class="headerlink" title="指示代词："></a>指示代词：</h4><ul>
<li>标识人或事物的代词，用来代替前面已提到过的名词。</li>
<li>This(these),  that(those)</li>
</ul>
<details>
  <summary> This is his book. </summary>
  这是他的书
</details>  
<details>
  <summary> Those apples were his </summary>
  那些苹果是他的
</details>  

<h4 id="不定代词："><a href="#不定代词：" class="headerlink" title="不定代词："></a>不定代词：</h4><ul>
<li>指代不确定的人或事物</li>
<li>one, the other, some, any something, nothing.</li>
</ul>
<details>
  <summary> No one knows where he is. </summary>
  没有人知道他在哪里
</details>  
<details>
  <summary> Some of the boys want to go to Shanghai,but the others want to go to Beijing. </summary>
  有一些男孩想去上海，但另一些男孩想去北京
</details>  
<details>
  <summary> Each of the students has got a book. </summary>
  每个学生都有一本书。
</details>  

<details>
  <summary> 这些教师都是从中国来的 </summary>
  These teachers are all from China
</details>  

<details>
  <summary> 我对这个人一无所知 </summary>
  I know nothing about this man
</details>  

<details>
  <summary> 我有事要告诉你 </summary>
  I have something to tell you
</details>  

<h2 id="13-形容词"><a href="#13-形容词" class="headerlink" title="13 形容词"></a>13 形容词</h2><h4 id="形容词通常形容人或事物的状态、性质、大小等，通常在名词前，be动词后"><a href="#形容词通常形容人或事物的状态、性质、大小等，通常在名词前，be动词后" class="headerlink" title="形容词通常形容人或事物的状态、性质、大小等，通常在名词前，be动词后"></a>形容词通常形容人或事物的状态、性质、大小等，通常在名词前，be动词后</h4><ul>
<li>old - the old</li>
<li>young - the young</li>
<li>The old need more care than the young<details>
<summary> She is a good student. </summary>
她是一个好学生
</details>  
<details>
<summary> This bike is very expensive  </summary>
这辆自行车很贵
</details>  
<details>
<summary> Rich people sometimes complain about their empty lives </summary>
富人有时抱怨他们空虚的生活
</details>  

</li>
</ul>
<hr>
<h2 id="14-副词"><a href="#14-副词" class="headerlink" title="14 副词"></a>14 副词</h2><h4 id="副词可以修饰动词，形容词，其他副词以及其他结构"><a href="#副词可以修饰动词，形容词，其他副词以及其他结构" class="headerlink" title="副词可以修饰动词，形容词，其他副词以及其他结构"></a>副词可以修饰动词，形容词，其他副词以及其他结构</h4><ul>
<li>Heruns fast.</li>
<li>She is very beautiful.</li>
<li>They work very hard.</li>
</ul>
<h4 id="副词的位置"><a href="#副词的位置" class="headerlink" title="副词的位置"></a>副词的位置</h4><ol>
<li>根据情况，放在助动词之后，实意动词之前或之后。</li>
<li>形容词之前，其他副词之前或之后</li>
<li>多个助动词时，副词一般放在第一个助动词后  </li>
</ol>
<details>
  <summary> He speaks very fast. </summary>
  他说的非常快
</details>  
<details>
  <summary> They have already left. </summary>
  他们已经离开了
</details>  
<details>
  <summary> They have already been repaired </summary>
  他们已经修好了
</details>  

<h4 id="常用的频度副词的位置"><a href="#常用的频度副词的位置" class="headerlink" title="常用的频度副词的位置"></a>常用的频度副词的位置</h4><p>always, usually, often, sometimes, never ..<br>一般放在动词前面， be动词后面，助动词或实意动词之间。  </p>
<details>
  <summary> They always come early. </summary>
  他们总是来得很早
</details>  
<details>
  <summary> Sam often writes homework at 7:00 </summary>
  Sam通常在7:00写作业
</details>  

<hr>
<h2 id="15-17-不确定量表达法"><a href="#15-17-不确定量表达法" class="headerlink" title="15-17 不确定量表达法"></a>15-17 不确定量表达法</h2><p>some any most every all </p>
<ul>
<li>some,any都表示一些  <ul>
<li>some主要用于肯定句，希望得到肯定回答时，也可用在疑问句中  </li>
<li>any 主要用在否定和疑问句中    </li>
</ul>
</li>
<li>most 作形容词时表示大部分的，后面接复数名词。   </li>
<li>every 表示”每一个”、”所有”，后面接单数名词  </li>
</ul>
<details>
  <summary> I'd been expecting some letters the whole morning, but there weren't any for me. </summary>
  我整个上午都在等一些信，但对我没有等来信件  
</details> 
<details>
  <summary> Most people here are from China. </summary>
  这里大多数的人来自中国
</details> 
<details>
  <summary> Every one likes the film. </summary>
  每一个人喜欢这个电影
</details>  
<details>
  <summary> All the cars are parked in the parking lot. </summary>
  所有的车都停在停车场
</details>  
<details>
  <summary> All the coffee is served on time  </summary>
  所有的咖啡都按时供应
</details>  
<details>
  <summary> Some boys went camping yesterday  </summary>
  昨天有些男孩去野营了
</details>  
<details>
  <summary> All the children like to play football </summary>
  所有的小孩都喜欢踢足球
</details>  
<details>
  <summary> Most teachers want to work here. </summary>
  大多数老师都想在这里工作
</details>  

<hr>
<ul>
<li>both   表示两者都，可做形容词、代词或副词</li>
<li>either 表示两者之一</li>
<li>neither 表示两者都不</li>
<li>many 修饰可数名词 表示许多</li>
<li>much 修饰不可数名词 表示许多</li>
<li>a lot of [lots of ], plenty of 均可修饰可数可不可数名词</li>
</ul>
<details>
  <summary> Both his eyes were severely  burned </summary>
  他的双眼被严重烧伤
</details>  
<details>
  <summary> There are trees on either side of the street. </summary>
  街道两边都有树
</details>  
<details>
  <summary> Neither answer is correct. </summary>
  没有一个回答时正确的
</details>  
<details>
  <summary> Both the hands are washed </summary>
  双手都洗过了
</details>  
<details>
  <summary> Sam drank a lot of coffee last night </summary>
  Sam昨晚喝了很多咖啡
</details>  

<hr>
<ul>
<li>a few 为肯定含义 “几个”</li>
<li>few 为否定含义 “没几个” 这两个词均和可数名词连用</li>
<li>a little 为肯定含义 “一点”</li>
<li>little 为否定含义的 “没多点” 这两个词均可和不可数名词连用</li>
<li>none 和 no one 的意思相同 主要做代词，翻译为”一个也不””一点也不”<ul>
<li>none 可以接of短语，动词可用单数也可以用复数</li>
<li>no one 不能接of短语，动词只能用单数</li>
</ul>
</li>
</ul>
<details>
  <summary> A few books are put into the box </summary>
  几本书放在了盒子里面
</details>  
<details>
  <summary> Few books are put into the box </summary>
  没几本书放在了盒子里面
</details>  
<details>
  <summary> There is a little water in the bottle. </summary>
  瓶子里有点水。
</details>  
<details>
  <summary> There is little water in the bottle. </summary>
  瓶子里几乎没有水
</details>  
<details>
  <summary> No one knows the answer. </summary>
  没有一个人知道那个答案
</details>  
<details>
  <summary> None of us have(has) arrived </summary>
  我们当中没有任何一个人到了
</details>  

<hr>
<h2 id="18-Three-here-be句型"><a href="#18-Three-here-be句型" class="headerlink" title="18 Three here be句型"></a>18 Three here be句型</h2><ul>
<li>Three be 通常翻译成 “有”</li>
<li>Here be  通常翻译成 “是”<br>be动词根据后面的单词有单数复数的变化。</li>
</ul>
<details>
  <summary> There is a book on the bookshelf. </summary>
  书架上面有一本书
</details>  
<details>
  <summary> There are some books on the bookshelf. </summary>
  在书架上有一些书
</details>  
<details>
  <summary> Here is the bus stop. </summary>
  这是汽车站
</details>  
<details>
  <summary> Here are your books. </summary>
  这些是你的书
</details>  

<details>
  <summary> There is a lot of water in the bottle. </summary>
  在瓶子里有一些水
</details>  
<details>
  <summary> Here is your car. </summary>
  这是你的车
</details>  
<details>
  <summary> There are many students in the room. </summary>
  在房间里有很多学生
</details>  


<hr>
<h2 id="19-一般现在时和现在进行时"><a href="#19-一般现在时和现在进行时" class="headerlink" title="19 一般现在时和现在进行时"></a>19 一般现在时和现在进行时</h2><p>一般现在时 表示通常性、规律性、习惯性的状态或者动作。<br>主语是单数第三人称时 动词有单三的变化<br>主语是非第三人称单数时 动词为原型</p>
<ul>
<li>一般现在时 动词的单三变化：  <ul>
<li>在动词尾直接加s </li>
<li>以字母s, x, ch, o 结尾的动词 加es</li>
<li>以辅音字母 + y结尾的动词 先变y为i 再加es</li>
<li>play -&gt; plays </li>
<li>guess -&gt; guesses</li>
<li>studey -&gt; studeies</li>
</ul>
</li>
</ul>
<details>
  <summary> They often get up at 7:00 </summary>
  他们经常在7点起床
</details>  
<details>
  <summary> He often gets up at 7:00 </summary>
  他经常在7点起床
</details>  

<ul>
<li>一般现在时否定和疑问句用do, doss帮助构成  </li>
</ul>
<details>
  <summary> He doesn't like the cat. </summary>

</details>  
<details>
  <summary> Does he like the car </summary>
  Yes, he does. / No, he doesn't
</details>  

<ul>
<li>现在进行时表示现在正在进行或发生的动作。</li>
<li>句子中通常有now 等时间副词呼应</li>
<li>基本构成形式为 be + doing</li>
</ul>
<details>
  <summary> They are watching TV. </summary>
  他们正在看电视
</details>  
<details>
  <summary> He is watching TV. </summary>
  他正在看电视
</details>  
<details>
  <summary> I am watching TV. </summary>
  我正在看电视
</details>  

<ul>
<li><p>动词现在分词的变化规则  </p>
<ul>
<li>一般情况下 直接在动词后加 ing<ul>
<li>work -&gt; working</li>
</ul>
</li>
<li>动词以不发音的 e结尾， 要去e加ing<ul>
<li>take -&gt; taking </li>
</ul>
</li>
<li>重读闭音节的动词 要双写词尾字母 再加ing<ul>
<li>cut -&gt; cutting</li>
</ul>
</li>
<li>以 ie 结尾的动词 变y加ing  <ul>
<li>lie -&gt; lying  </li>
</ul>
</li>
</ul>
</li>
<li><p>现在进行时变否定句和疑问句时 将be动词否定或提前  </p>
</li>
</ul>
<ol>
<li>They aren’t watching Tv.<br> Are the watching TV?  </li>
<li>He isn’twatching TV.<br> Is he watching TV?  </li>
<li>Am i watching TV?<br> yes,you are. / No, you aren’t  </li>
</ol>
<details>
  <summary> He works very late everyday. </summary>

</details>  
<details>
  <summary> Do you study English yourself? </summary>
  你自己学英语吗
  Yes, i do 
</details>  
<details>
  <summary> They are playing soccer now. </summary>
  他们正在踢足球
</details>  

<hr>
<h2 id="20-一般过去和过去进行时"><a href="#20-一般过去和过去进行时" class="headerlink" title="20 一般过去和过去进行时"></a>20 一般过去和过去进行时</h2><ul>
<li>一般过去时表示过去某个时间里发生了动作或状态 过去习惯性、经常性的行为</li>
<li>基本结构：  <ul>
<li>主语+动词过去式+其他 </li>
<li>一般动词在动词后面加ed </li>
<li>还有一些不规则动词不规则变化</li>
</ul>
</li>
</ul>
<p>play -&gt; played<br>come -&gt; came  </p>
<details>
  <summary> She worked very hard last night. </summary>
  昨晚他很努力
</details>  
<details>
  <summary> They came here by car. </summary>
  他们开车回来了
</details>  

<ul>
<li><p>动词一般过去时变化规则</p>
<ul>
<li>一般在动词后加ed <ul>
<li>play -&gt; played </li>
</ul>
</li>
<li>在以字母e结尾的动词后只加 d<ul>
<li>like -&gt; liked</li>
</ul>
</li>
<li>在以 “辅音字母 + y” 结尾的动词后 该y为i再加ed<ul>
<li>supply -&gt; supplied </li>
</ul>
</li>
<li>在以重读闭音节结尾且末尾只有一个辅音字母的动词后 双写最后一个辅音字母再加ed  <ul>
<li>plan -&gt; planned</li>
</ul>
</li>
</ul>
</li>
<li><p>过去进行时表示在过去某一时刻或某一时段内进行或法神改的动作</p>
<ul>
<li>其形式为 was/were + doing   </li>
</ul>
</li>
</ul>
<details>
  <summary> They were waiting for you.  </summary>
  他们在等你
</details>  
<details>
  <summary> He was talking with his friends just now. </summary>
  他刚才正在和他的朋友聊天
</details>  

<details>
  <summary> They went swimming. </summary>

</details>  
<details>
  <summary> Chino was watching TV at 19:00 last night </summary>
  智乃昨天晚上7:00在看电视
</details>  

<hr>
<h2 id="21-将来时"><a href="#21-将来时" class="headerlink" title="21 将来时"></a>21 将来时</h2><ul>
<li><p>一般将来时表示将来某一时刻的动作或状态 常常和表示将来的时间状语连用。</p>
<ul>
<li>tomorrow 明天</li>
<li>next week 下周</li>
<li>in the future 将来</li>
</ul>
</li>
<li><p>“助动词 will 或 shall + 动词原形”</p>
<ul>
<li>表示将来发生的事情<details>
<summary> They will go to Shanghai by ship tomorrow. </summary>
他们将要在明天坐船去上海
</details>  
<details>
<summary> We shall leave for Shagnhai next month. </summary>
下个月我们要去上海
</details>  
</li>
</ul>
</li>
<li><p>“be going to + 动词原形”</p>
<ul>
<li>用来表示近期或事先考虑过的将要发生的动作</li>
<li>已有迹象表明必将发生的谋士</li>
<li>意为 “打算  就要  “</li>
</ul>
</li>
</ul>
<details>
  <summary> They are going to play football this afternoon. </summary>
  他们今天下午要去踢足球
</details>  
<details>
  <summary> She is going to learn French next year. </summary>
  她明年要学法语
</details>  

<ul>
<li>“be doing “<ul>
<li>表示位置转移的动词</li>
<li>go, come, leave, start arrive,</li>
</ul>
</li>
</ul>
<details>
  <summary> They are leaving for Japan </summary>
  他们要离开去日本
</details>  
<details>
  <summary> She is arriving tomorrow. </summary>
  他明天到达
</details>  

<details>
  <summary> They are coming here soon. </summary>
  他们很快就要来了
</details>  
<details>
  <summary> Miku is going learn Chinese next month. </summary>
  初音下个月要去学中文
</details>  
<details>
  <summary> Peter and Miki will finish the job tomorrow morning.  </summary>
  Peter和miki将在明天早上完成工作
</details>  

<hr>
<h2 id="22-完成时"><a href="#22-完成时" class="headerlink" title="22 完成时"></a>22 完成时</h2><ul>
<li>现在完成时(have + p.p) 动作过去发生，已经完成，对现在造成影响或后果，动作可能还会持续。可使用的时间状语为：<ul>
<li>already 已经</li>
<li>yet 还</li>
</ul>
</li>
</ul>
<details>
  <summary> They have already arrived in Shanghai </summary>
  他们已经到上海了
</details>  
<details>
  <summary> She has played soccer for 3 hours. </summary>
  她踢足球已经3小时了
</details>  
<details>
  <summary> She hasn't finished the homework yet. </summary>
  她还没有完成作业
</details>  

<ul>
<li>过去完成时(had + .p.p.)表示句中的动作发生在过去之前，即过去时过去，已经完成，对过去造成了一定影响或结果  </li>
</ul>
<details>
  <summary> They had arrived in Shanghai.  </summary>
  他们已经到了上海  
</details>  
<details>
  <summary> She had played soccer for 3 hours. </summary>
  她踢了3个小时的足球  
</details>  
<details>
  <summary> They hadn't finished the work yet. </summary>
  他们还没有完成工作  
</details>  
<details>
  <summary> He has stopped the car outside. </summary> 
  他把车停在外面了   
</details>  
<details>
  <summary> She hasn't been to Shanghai yet. </summary>
  她还没去过上海  
</details>  
<details>
  <summary> Had they planned to stay here? </summary>
  他们计划留在这里吗？  
</details>  

<hr>
<h2 id="23-动词的用法"><a href="#23-动词的用法" class="headerlink" title="23 动词的用法"></a>23 动词的用法</h2><p>根据动词功能 分为四类：</p>
<ul>
<li>实意动词 (Notional Verb)</li>
<li>系动词 (Link Verb)</li>
<li>助动词 (Auxiliary Verb)</li>
<li>情态动词 (model Verb)</li>
</ul>
<ol>
<li>动词有数量和时态上的变化，通常分为三大时态：现在、过去、将来时</li>
<li>根据动作进项的状态可分为：一般时、进行时、完成时</li>
<li>使用动词时通常将（1）和（2）结合， 例如： 一般现在时、过去进行时…</li>
</ol>
<details>
  <summary> He goes to school every day. </summary>
  他每天上学
</details>  
<details>
  <summary> He went to hospital last night. </summary>
  昨天晚上他去了医院
</details>  


<ul>
<li>动词形态变化规则：</li>
</ul>
<table>
<thead>
<tr>
<th align="center">动词原形</th>
<th align="center">单三</th>
<th align="center">现在分词</th>
<th align="center">过去式</th>
<th align="center">过去分词</th>
</tr>
</thead>
<tbody><tr>
<td align="center">play</td>
<td align="center">plays</td>
<td align="center">playing</td>
<td align="center">played</td>
<td align="center">played</td>
</tr>
<tr>
<td align="center">have</td>
<td align="center">has</td>
<td align="center">having</td>
<td align="center">had</td>
<td align="center">had</td>
</tr>
<tr>
<td align="center">go</td>
<td align="center">goes</td>
<td align="center">going</td>
<td align="center">went</td>
<td align="center">gone</td>
</tr>
</tbody></table>
<hr>
<h2 id="24-情态动词1"><a href="#24-情态动词1" class="headerlink" title="24 情态动词1"></a>24 情态动词1</h2><h4 id="can-could-may-might"><a href="#can-could-may-might" class="headerlink" title="can/could/may/might"></a>can/could/may/might</h4><ol>
<li>can/could 表示能力，用be able to 代替<ul>
<li>can/could 现在/过去的能力</li>
<li>客观可能性(can的可能性大)</li>
</ul>
</li>
<li>may/might 表示可能性<ul>
<li>may的可能性大 </li>
<li>请求 允许，might更委婉</li>
</ul>
</li>
</ol>
<details>
  <summary> He can/could/is able to swim. </summary>
  他会游泳
</details>
<details>
  <summary> He can/could come tomorrow. </summary>
  他明天可以来
</details>  
<details>
  <summary> Can/could i stay here? </summary>
  我可以留在这吗
</details>  
<details>
  <summary> He may/might come here by bus. </summary>
  他可能乘公共汽车来这里
</details>  
<details>
  <summary> May/might i join you ? </summary>
  我可以和你一起去吗
</details>  

<hr>
<h2 id="25-情态动词2"><a href="#25-情态动词2" class="headerlink" title="25 情态动词2"></a>25 情态动词2</h2><h4 id="should-ought-to-must-have-to"><a href="#should-ought-to-must-have-to" class="headerlink" title="should/ought to /must(have to )"></a>should/ought to /must(have to )</h4><ol>
<li>must/have to 表示必须、必要<ul>
<li>must表示主观多一些 </li>
<li>have to 则表示客观多一些</li>
<li>have to 有时态和数量的变化</li>
<li>myst 和 have to 二者的否定意义不大相同</li>
<li>You mustn’t go 你不准去</li>
<li>You don’t have to go 你不必去</li>
</ul>
</li>
<li>Should 表示劝告、建议、命令，其同义词是ought to <ul>
<li>should 强调主观看法</li>
<li>ought to 强调客观要求</li>
<li>在疑问句中通常用 should 代替 ought to </li>
</ul>
</li>
</ol>
<details>
  <summary> You must get up early. </summary>
  你必须早点起来
</details>  
<details>
  <summary> It's going to rain,I have to go home now. </summary>
  外面将要下雨了,我现在必须回家了
</details>  
<details>
  <summary> You should/ought to do the job right now. </summary>
  你现在应该做这项工作
</details>  
<details>
  <summary> Should they stay here now? </summary>
  他们现在应该留在这里吗？
</details>  
<details>
  <summary> I must/have to  go and see my mother in hospital tomorrow. </summary>
  我明天得去医院看我妈妈
</details>  
<details>
  <summary> You should/ought to work harder than that. </summary>
  你应该更加努力地工作
</details>  

<hr>
<h2 id="26-情态动词3"><a href="#26-情态动词3" class="headerlink" title="26 情态动词3"></a>26 情态动词3</h2><h4 id="need-don’t-have-to"><a href="#need-don’t-have-to" class="headerlink" title="need/don’t have to"></a>need/don’t have to</h4><ol>
<li>need “需要” 可作为：<ul>
<li>情态动词 </li>
<li>实意动词 有第三人称单数和时态的变化，后面可以加带to 的不定式</li>
</ul>
</li>
<li>回答must 和 have to 的提问句时 否定式使用needn’t, don’t have to等回答方式 </li>
</ol>
<p>情态动词:</p>
<details>
  <summary> He need come here early. </summary>
  他得早点来
</details>  
<details>
  <summary> He needn't come here early. </summary>
  他不必早到这儿来。
</details>  
<details>
  <summary> Need he come here early? </summary>
  她需要早点来吗  
  Yes he need. / No he needn't
</details>  

<p>实意动词:</p>
<details>
  <summary> He needs to come here early. </summary>
  他得早点来
</details>  
<details>
  <summary> He doesn't need to come here early. </summary>
  他不必早来
</details>  
<details>
  <summary> Does he need to come here early? </summary>
  他需要早点来吗  
  Yes, he does. / No he doesn't
</details>      


<details>
  <summary> Must i come here early tomorrow? </summary>
  我明天必须早点来吗？
</details>  

<details>
  <summary> You needn't do it again. </summary>
  你不需要重复做了
</details>  
<details>
  <summary> He needn't worry about it. </summary>
  这件事他无需担心
</details>  
<details>
  <summary> Does he need to do homework first? </summary>
  他需要先做作业吗
</details>  

<hr>
<h2 id="27-情态动词4"><a href="#27-情态动词4" class="headerlink" title="27 情态动词4"></a>27 情态动词4</h2><h4 id="head-better-would-rather"><a href="#head-better-would-rather" class="headerlink" title="head better / would rather"></a>head better / would rather</h4><ol>
<li>head better 表示”最好做某事”<ul>
<li>had虽然是过去式，但不表征过去</li>
<li>better后面接动词原形</li>
</ul>
</li>
<li>would rather 表示 宁愿、宁可、最好、还是..为好 语感上比head better 要轻</li>
<li>否定形式分别为：<ul>
<li>had better not + 动词原形</li>
<li>would rather not + 动词原形</li>
</ul>
</li>
</ol>
<details>
  <summary> He had better eat more. </summary>
  他最好多吃点 
</details>  
<details>
  <summary> You'd better finish it right now. </summary>
  你最好现在就做完
</details>  
<details>
  <summary> You would rather deal with it now </summary>
  你宁愿现在就处理
</details>  
<details>
  <summary> He had better not eat more </summary>
  他最好不要再吃了
</details>  
<details>
  <summary> You would rather not deal with it now </summary>
  你最好现在别处理那件事
</details>  
<details>
  <summary> You had better stay here  </summary>
  你最好留在这里
</details>  
<details>
  <summary> I would rather not say it  </summary>
  我宁愿不说
</details>  

<hr>
<h2 id="28-情态动词5"><a href="#28-情态动词5" class="headerlink" title="28 情态动词5"></a>28 情态动词5</h2><h4 id="used-do-v-would-v"><a href="#used-do-v-would-v" class="headerlink" title="used do + v / would + v"></a>used do + v / would + v</h4><ol>
<li>Used to , would 表示过去习惯性动作，可翻译为”过去常常…”<ul>
<li>Used to 可指过去的状态或情况， would 则不能</li>
<li>Would 表示反复发生的动作，如果某一动作没有反复性，就不能用would，只能用used to </li>
<li>Used to 表示过去经常性或习惯性的动作或状态 现在已经结束了</li>
<li>Would 表示有可能在发生</li>
</ul>
</li>
</ol>
<details>
  <summary> The novel used to be popular. </summary>
  这本小说过去很受欢迎
</details>  
<details>
  <summary> He would practise English every week. </summary>
  他过去每一周都练习英语
</details>  
<details>
  <summary> I used to live in Beijing. </summary>
  我过去住在背景
</details>  
<details>
  <summary> People used to believe that the earth was flat </summary>
  人们过去认为地球是平的
</details>  
<details>
  <summary> He would go to the park as soon as he was free </summary>
  他一有时间就会去公园
</details>  
<details>
  <summary> The window used to be open. </summary>
  这个窗户过去一直开着
</details>  
<details>
  <summary> They would gather together every week. </summary>
  他们每一周都聚在一起
</details>  
<details>
  <summary> Sam used to  play golf, but he doesn't now. </summary>
  萨姆过去常打高尔夫球，但现在不打了
</details>  

<hr>
<h2 id="29-情态动词否定和疑问"><a href="#29-情态动词否定和疑问" class="headerlink" title="29 情态动词否定和疑问"></a>29 情态动词否定和疑问</h2><ol>
<li>情态动词的否定：<ul>
<li>情态动词 + not + v + 原形</li>
</ul>
</li>
<li>使用情态动词进行提问：<ul>
<li>情态动词 + 主语 + v原形</li>
</ul>
</li>
</ol>
<details>
  <summary> He can't sing an English song </summary>
  他不会唱英文歌
</details>  
<details>
  <summary> He may not know her. </summary>
  他可能不认识她
</details>  
<details>
  <summary> He mustn't go there. </summary>
  他不准许去那里
</details>  
<details>
  <summary> He doesn't have to go there </summary>
  他不必去那里
</details>  

<details>
  <summary> Can he sing an English song? </summary>
  他会唱一首英文歌吗？  
  Yes, he can. / No, he can't
</details>  
<details>
  <summary> Must he go there? </summary>
  他一定要去那里吗？  
  Yes, he must. / No, he needn't
</details>  
<details>
  <summary> Does he have to go there? </summary>
  他一定要去那里吗？
  Yes,he does. / No, he doesn't 
</details>  
<details>
  <summary> Can i stay here? </summary>
  我可以留在这里吗  
  Yes, please.
</details>  
<details>
  <summary> Must she go back now? </summary>
  她现在必须回去吗？  
  No, she needn't
</details>  
<details>
  <summary> Does he have to get up at 9:00? </summary>
  他必须9点起床吗？  
  Yes, he does! 
</details>  

<hr>
<h2 id="30-情态动词-have-p-p"><a href="#30-情态动词-have-p-p" class="headerlink" title="30 情态动词 + have + p.p"></a>30 情态动词 + have + p.p</h2><ol>
<li>情态动词 + have + p.p<ul>
<li>表达过去事实。</li>
<li>推测的含义</li>
</ul>
</li>
<li>should + have + p.p ： 本应该…做某事</li>
<li>needn’t have + p.p : 本不需要…</li>
<li>must have p.p : 准是已经…</li>
<li>can’t have p.p : 不可能已经…</li>
</ol>
<details>
  <summary> He can/could have arrived. </summary>
  他可能已经到达了
</details>  
<details>
  <summary> He may/might have arrived. </summary>
  他可能已经到了
</details>  
<details>
  <summary> He must have arrived. </summary>
  他一定到了
</details>  
<details>
  <summary> He should have arrived. </summary>
  他本来应该可以到了
</details>  
<details>
  <summary> They should have finished the work </summary>
  他们本该完成这项工作的
</details>  
<details>
  <summary> You needn't have done so </summary>
  你不必这么做
</details>  
<details>
  <summary> He must have arrived. </summary>
  他准是已经到了
</details>  
<details>
  <summary> He can't have arrived. </summary>
  他不可能已经到了
</details>  
<details>
  <summary> He can have arrived. </summary>
  他可能已经到了
</details>  
<details>
  <summary> He must have arrived. </summary>
  他一定已经到了 
</details>  
<details>
  <summary> You needn't have done so. </summary>
  你本不需要这么做
</details>  
<details>
  <summary> They should have finished the work. </summary>
  他不可能已经到了
</details>  
<details>
  <summary> He can't have arrived </summary>
  他不可能已经到了
</details>  

<hr>
<h2 id="31-被动语态1"><a href="#31-被动语态1" class="headerlink" title="31 被动语态1"></a>31 被动语态1</h2><p>被动语态的构成和含义：</p>
<ol>
<li>如果主语是动作的承受者，则用动词的被动语态做谓语.</li>
<li>被动语态的构成：<ul>
<li>be + 动词的过去分词(p.p) … by sb.</li>
</ul>
</li>
<li>被动语态有各种时态.</li>
</ol>
<details>
  <summary> He is taken to America by his mother </summary>
  他被妈妈带到了美国
</details>  
<details>
  <summary> The information is needed by us. </summary>
  我们需要那份信息
</details>  
<details>
  <summary> The book was being read by him. </summary>
  他正在读那本书
</details>  
<details>
  <summary> The computer has been used by her. </summary>
  她用过这台电脑
</details>  
<details>
  <summary> The room will be cleaned. </summary>
  这个房间将要被打扫
</details>  
<details>
  <summary> The computer could have been used by them  </summary>
  他们可能用过电脑
</details>  
<details>
  <summary> The information is needed  </summary>
  需要这些信息
</details>  
<details>
  <summary> The book was read </summary>
  这本书是读过的
</details>  
<details>
  <summary> The door has been opened  </summary>
  门已经打开了
</details>  
<details>
  <summary> The book was being read </summary>
  这本书正在读
</details>  
<details>
  <summary> The computer had been used </summary>
  计算机已经被使用过
</details>  
<details>
  <summary> The computer could have been used </summary>
  这台电脑本来可以用的
</details>  
<details>
  <summary> The room will be cleaned </summary>
  房间将要打扫了
</details>  

<hr>
<h2 id="32-被动语态2"><a href="#32-被动语态2" class="headerlink" title="32 被动语态2"></a>32 被动语态2</h2><p>被动语态和情态动词结合</p>
<ol>
<li>被动语态可以和情态动词结合<ul>
<li>can/could + be + 动词过去分词</li>
<li>may/might </li>
<li>must/havbe to </li>
<li>should/ought to </li>
<li>had better/ would rather</li>
<li>used to / would </li>
<li>need + doing / to be +  动词过去分词</li>
</ul>
</li>
</ol>
<details>
  <summary> The food could be taken away. </summary>
  食物可以带走
</details>  
<details>
  <summary> The food might be taken away </summary>
  食物可能被带走了
</details>  
<details>
  <summary> The food must be taken away </summary>
  食物必须带走
</details>  
<details>
  <summary> The food should be taken asay </summary>
  食物应该带走
</details>  
<details>
  <summary> The food needs taking away </summary>
  食物需要带走
</details>  
<details>
  <summary> The food had better be taken away </summary>
  最好把食物拿走
</details>  
<details>
  <summary> Books used to be returned in two days </summary>
  过去两天内退还书籍
</details>  
<details>
  <summary> The room may be cleaned. </summary>
  房间可能打扫
</details>  
<details>
  <summary> The door must be locked. </summary>
  门必须上锁
</details>  
<details>
  <summary> The house should be furnished. </summary>
  这个房子应该要装修了
</details>  
<details>
  <summary> The tree had better be watered now </summary>
  现在最好给树浇水
</details>  

<hr>
<h2 id="33-被动语态3"><a href="#33-被动语态3" class="headerlink" title="33 被动语态3"></a>33 被动语态3</h2><ul>
<li>动作的行为者不分明，或不中啊哟，或上下文提到了行为者是，”by + 行为者”可省略  </li>
</ul>
<details>
  <summary> The information is needed. </summary>
  该信息是必需的
</details>  
<details>
  <summary> The book is being read </summary>
  这本书正在被读
</details>  
<details>
  <summary> The door waas opened </summary>
  这个门被打开了
</details>  
<details>
  <summary> The pencil had been sharpend </summary>
  铅笔已经削尖了
</details>  

<hr>
<h2 id="34-被动语态4"><a href="#34-被动语态4" class="headerlink" title="34 被动语态4"></a>34 被动语态4</h2><ol>
<li>被动语态的一般疑问句：<ul>
<li>助动词+主语+(其他助动词)+动词过去分词</li>
</ul>
</li>
<li>被动语态的特殊疑问句：<ul>
<li>疑问词+助动词+主语+(其他助动词)+动词过去分词?</li>
</ul>
</li>
</ol>
<details>
  <summary> Is the information needed by him? </summary>
  这个信息被他需要吗    
  Yes, it is. / No, it isn't  
</details>  
<details>
  <summary> Has the computer been used by her? </summary>
  计算机电脑已经被他用了吗    
  Yes, it has ./  No, it hasn't  
</details>  
<details>
  <summary> Will the room be cleaned? </summary>
  房间将会被打扫干净吗    
  Yes, it will. /No, it won't  
</details>  
<details>
  <summary> The information is needed by them. </summary>
  他们需要这些信息    
  Whar is needed by them?  
  他们需要什么？  
</details>  
<details>
  <summary> The girl is taken to Shanghai ? </summary>
  这个女孩被带到上海了吗？  
  Where is the girl taken?    
  女孩被带到了哪里
</details>  
<details>
  <summary> The book has been read three times. </summary>
  这本书已经读了三遍。  
  How many times has the book been read?  
  这本书已经读了多少遍了？
</details>  
<details>
  <summary> Is the book being read by her? </summary>
  她正在读那本书吗?
</details>  
<details>
  <summary> Has the computer been used by them? </summary>
  他们用过那台电脑吗?
</details>  
<details>
  <summary> How often is the English class taken? </summary>
  英语课多长时间上一次
</details>  

<hr>
<h2 id="35-非谓语动词1"><a href="#35-非谓语动词1" class="headerlink" title="35 非谓语动词1"></a>35 非谓语动词1</h2><h4 id="to-动词原形-vs-动词原形"><a href="#to-动词原形-vs-动词原形" class="headerlink" title="to + 动词原形 vs.动词原形"></a>to + 动词原形 vs.动词原形</h4><ol>
<li>动词不定式：<ul>
<li>由to+动词原形构成。可以做主语、宾语、宾补、定于、表语、状语</li>
</ul>
</li>
<li>“动词原形+ing” 可作为名词用，具有动词特征和变化形式，但在句子中的用法及功能同名词：<ul>
<li>在句子中可以作为主语、宾语、表语、定于。他可以被副词修饰或者支配宾语<details>
<summary> 主语: To get there by bike will take us an hour. </summary>
骑自行车到那里要花一个小时
</details>  
<details>
<summary> 宾语: The dirver failed to see the car in time </summary>
驾驶员未能及时看到汽车
</details>  
<details>
<summary> 宾补: We believe him to be guilty. </summary>
我们认为他是有罪的
</details>  
<details>
<summary> 定语: The next train to arrive is from Shagnhai  </summary>
下一班火车是从上海来的
</details>  
<details>
<summary> 表语: My suggestion is to put off the meeting. </summary>
我的建议是推迟会议
</details>  
<details>
<summary> 状语: I come here only to say goodbye to you </summary>
我来这里只是为了对你说再见
</details>  
<details>
<summary> Reading is an art. </summary>
阅读是一门艺术
</details>  
<details>
<summary> They went on walking and never stopped talking  </summary>
他们继续走着，从未停止说话
</details>  
<details>
<summary> Your task is quickly cleaning the windows </summary>
您的任务是快速清洁窗户
</details>  
<details>
<summary> This is a reading room. </summary>
这是一个阅览室
</details>  
<details>
<summary> To finish the work will take us an hour. </summary>
完成工作将花费我们一个小时
</details>  
<details>
<summary> I come here to say goodby to you </summary>
我来这跟你说再见
</details>  
<details>
<summary> Talking is an art </summary>
说话是一门艺术
</details>  

</li>
</ul>
</li>
</ol>
<hr>
<h2 id="36-非谓语动词2"><a href="#36-非谓语动词2" class="headerlink" title="36 非谓语动词2"></a>36 非谓语动词2</h2><ol>
<li>to不定式或动名词可以在主语的位置上，但一般用it代替它作为主语，这种情况it叫形式主语.</li>
<li>在宾语的位置上，用it代替它作形式宾语，这种情况较形式宾语</li>
<li>对名词或不定式进行否定时，在不定式或动名词前加not否定就可以了</li>
</ol>
<details>
  <summary>  It's a great honor to be invited. </summary>
  被邀请很荣幸
</details>  
<details>
  <summary> It is no use crying over spilt milk </summary>
  为溢出的牛奶哭泣是没有用的
</details>  
<details>
  <summary> We think it important to learn English </summary>
  我们认为学英语很重要
</details>  
<details>
  <summary> I found it pleasant walking in the park </summary>
  我在公园散步很愉快
</details>  
<details>
  <summary> He pretended not to see her </summary>
  他假装没看见她
</details>  
<details>
  <summary> He regrets not joining them </summary>
  他很遗憾没有加入他们
</details>  

<hr>
<h2 id="37-非谓语动词3"><a href="#37-非谓语动词3" class="headerlink" title="37 非谓语动词3"></a>37 非谓语动词3</h2><p>to不定式表示目的语法</p>
<ol>
<li>in order to + v 表示目的<ul>
<li>由 in order to 引导的目的状语 值于句首句尾均可</li>
</ul>
</li>
<li>so as to + v 表示目的<ul>
<li>由 so as to 引导的目的状语 只能置于句尾</li>
</ul>
</li>
<li>他们的否定形式分别在to前面加not</li>
</ol>
<details>
  <summary> I've written it down in order to remember it. </summary>
  我写下来是为了记住它
</details>  
<details>
  <summary> He shouted and waved so as to be noticed. </summary>
  他叫喊着挥手以便引起注意。
</details>  
<details>
  <summary> I've written it down in order not to forget it. </summary>
  我写下来是为了不忘记它。
</details>  
<details>
  <summary> He said nothing so as not to be noticed. </summary>
  他什么也没说，以免被人注意。
</details>  
<details>
  <summary> He gets up early in order to arrive at school on time.</summary>
  他早起是为了准时到校。
</details>  
<details>
  <summary> He wrote it down in order not to forget it. </summary>
  他写下来是为了不忘记它。
</details>  

<hr>
<h2 id="38-非谓语动词4"><a href="#38-非谓语动词4" class="headerlink" title="38 非谓语动词4"></a>38 非谓语动词4</h2><h4 id="常见的不定式和动名词"><a href="#常见的不定式和动名词" class="headerlink" title="常见的不定式和动名词"></a>常见的不定式和动名词</h4><p>包含不定式和动名词的一些固定结构    </p>
<ol>
<li><p>too ~ to …: 太…以至于不能…</p>
<ul>
<li><details>
   <summary> The room is too small to live  </summary>
   这个房间太小了 以至于不能居住
 </details>  </li>
</ul>
</li>
<li><p>enough + n + to + v /</p>
<ul>
<li><p>adj + enough _ to _ v : 足够…可以…</p>
</li>
<li><details>
 <summary> The is enough food to eat. </summary>
 这些食物足够吃
</details>  
</li>
<li><details>
 <summary> The box is bit enough to contain six apples. </summary>
 这个盒子足够大 可以装6个苹果
</details>  </li>
</ul>
</li>
<li><p>On - int : ~ 一…就…</p>
<ul>
<li><details>
 <summary> On seeing the snake,the girl was very frightened. </summary>
 看到那条蛇，女孩非常害怕。
</details>  </li>
</ul>
</li>
<li><p>There is no hope of ~ ing : 没希望…</p>
<ul>
<li><details>
 <summary> There is no hope of seeing him </summary>
 没希望见到他
</details>  </li>
</ul>
</li>
<li><p>feel like -ing : 想要~</p>
<ul>
<li><details>
   <summary> I feel like eating ice cream not. </summary>
   我不想吃冰淇淋。
 </details>  
</li>
</ul>
</li>
<li><p>have a hard time -ing : 做~很困难 </p>
<ul>
<li><details>
  <summary> They have a hard time solving the problem themselves.   </summary>
      他们自己很难解决这个问题。
</details>  


</li>
</ul>
</li>
</ol>
<details>
  <summary> There are enough books to read </summary>
  有足够的书要读
</details>  
<details>
  <summary> I feel like coffee </summary>
  我想喝咖啡
</details>  
<details>
  <summary> The room is too small to live  </summary>
  这房间太小，住不下
</details>  

<hr>
<h2 id="39-非谓语动词5"><a href="#39-非谓语动词5" class="headerlink" title="39 非谓语动词5"></a>39 非谓语动词5</h2><ol>
<li>v+ing 可称之为动名词，也可称之为现在分词。 </li>
</ol>
<ul>
<li><details>
<summary> Writing books is his job. </summary>
写书是他的工作。
</details>
</li>
<li><details>
<summary> He is writing a book. </summary>
他正在写一本书。
</details>  
</li>
</ul>
<ol start="2">
<li>动词的p.p.形式可称之为动词的过去分词 用在完成时和被动语态当中</li>
</ol>
<ul>
<li><details>
<summary> He has written the homework. </summary>
他写了作业。
</details>
</li>
<li><details>
<summary> The homework is written. </summary>
作业写好了。
</details>  
</li>
</ul>
<ol start="3">
<li>分词句是包含现在分词和过去分词的分句.</li>
</ol>
<ul>
<li><details>
<summary> The students went out of the classroom,laughing and talking. </summary>
The students went out of the classroom,laughing and talking.
</details>  
</li>
<li><details>
<summary> Accompanied by his friend,he went to the railway station. </summary>
在朋友的陪同下，他去了火车站
</details>  


</li>
</ul>
<details>
  <summary> He likes drinking </summary>
  他喜欢喝酒
</details>  
<details>
  <summary> The door was locked </summary>
  门是锁着的
</details>  
<details>
  <summary> Given better attention,the plants could grow better. </summary>
  如果给予更好的关注，这些植物会生长得更好。
</details>  

<hr>
<h2 id="40-原型不定式1"><a href="#40-原型不定式1" class="headerlink" title="40 原型不定式1"></a>40 原型不定式1</h2><h4 id="使役动词"><a href="#使役动词" class="headerlink" title="使役动词"></a>使役动词</h4><ol>
<li><p>使役动词 表示”使/让…”</p>
<ul>
<li><p>have, make, let 做使役动词 构成形式为：</p>
<ul>
<li><p><code>have/meke/let + 宾语 + v</code></p>
</li>
<li><details>
 <summary> He made me laugh </summary>

</details>
</li>
<li><details>
 <summary> I let him go  </summary>
 我让他走了
</details>  
</li>
<li><details>
 <summary> Please have him come here. </summary>
 请叫他过来。
</details>  </li>
</ul>
</li>
</ul>
</li>
<li><p><code>get</code>和<code>help</code>都做使役动词</p>
<ul>
<li><p><code>get</code>的使役动词句为：”get + 宾语 + to + v “ </p>
</li>
<li><p><code>help</code>的使役动词为 : “help + 宾语 + (to) + v”</p>
<ul>
<li><details>
 <summary> I can't get anyone to do the work properly. </summary>
 我不能让任何人把工作做好。
</details>  
</li>
<li><details>
 <summary> I helped him (to) repair the car. </summary>
 我帮他修车。
</details>  

</li>
</ul>
</li>
</ul>
</li>
</ol>
<hr>
<h2 id="41-原形不定式2"><a href="#41-原形不定式2" class="headerlink" title="41 原形不定式2"></a>41 原形不定式2</h2><h4 id="感官动词"><a href="#感官动词" class="headerlink" title="感官动词"></a>感官动词</h4><ul>
<li><p>感官动词see/watch/observe/notice/hear/smell/taste/feel/+ 宾语+ 动词原形/现在分词</p>
<ul>
<li>+动词原形，表示动作的真实性。</li>
<li>+现在分词，表示动作的连续性，进行性。<details>
<summary> I saw him work in the garden yesterday. </summary>
昨天我看到他在花园里工作。
</details>  
<details>
<summary> I saw him working in the garden yesterday. </summary>
昨天我看见他在花园里工作。
</details>  
</li>
</ul>
</li>
<li><p>和使役动词相似，感官动词后可接过去分词</p>
<ul>
<li>“感官动词 + 宾语 + 过去分词”<details>
<summary> John saw the man knocked down by the car. </summary>
约翰看见那人被汽车撞倒了。
</details>  

</li>
</ul>
</li>
</ul>
<details>
  <summary> I watched a dog running in the garden yesterday. </summary>
  昨天我看着一条狗在花园里奔跑。
</details>  
<details>
  <summary> I heard Sam sent to the hospital. </summary>
  听说山姆被送到医院了。
</details>  

<hr>
<h2 id="42-假设1"><a href="#42-假设1" class="headerlink" title="42 假设1"></a>42 假设1</h2><h4 id="单纯条件的假设"><a href="#单纯条件的假设" class="headerlink" title="单纯条件的假设"></a>单纯条件的假设</h4><ul>
<li>条件状语从句。用”if”引导条件状语从句，从句为现在时 通常译作”如果”<details>
<summary> If you get up early you will catch up with the train </summary>
如果您起得早，您将赶上火车
</details>  </li>
<li>if 引导的条件状语从句，可以放在句首或句尾。<details>
<summary> If you ask him,he will help you. </summary>
如果你问他，他会帮助你的。
</details>  
<details>
<summary> She will be upset if you fail the exam. </summary>
如果考试不及格，她会很生气。
</details>  

</li>
</ul>
<details>
  <summary> If he runs, he will get there in time. </summary>
  如果他跑步，他会及时到达那里。
</details>  
<details>
  <summary> The cat scratch you if you pull her tail. </summary>
  如果您拉扯猫的尾巴，猫就会挠您。
</details>  

<hr>
<h2 id="43-假设2"><a href="#43-假设2" class="headerlink" title="43 假设2"></a>43 假设2</h2><h4 id="与现在事实相反的虚拟语气"><a href="#与现在事实相反的虚拟语气" class="headerlink" title="与现在事实相反的虚拟语气"></a>与现在事实相反的虚拟语气</h4><ul>
<li>if从句是一种虚拟的条件或假设，和现在事实相反的。主句从句时态具体如下:<ul>
<li>从句： 动词过去式(be 用 were)</li>
<li>主句： would/could/should/might + 动词原形</li>
<li><details>
<summary> If i were you, I would join them. </summary>
如果我是你，我会加入他们
</details>  </li>
<li><details>
<summary> She would come with you if you inviten her </summary>
  如果你邀请她，她会和你一起去
</details>  

</li>
</ul>
</li>
</ul>
<details>
  <summary> If i knew his telephone number, I would tell you </summary>
  如果我知道他的电话号码，我会告诉你
</details>  
<details>
  <summary> If i had any meney with me, I would lend you some. </summary>
  如果我有钱，我可以借给你一些。
</details>  
<details>
  <summary> If i were you, i would take an umberella. </summary>
  如果我是你，我会打伞。
</details>  

<h2 id="44-假设3"><a href="#44-假设3" class="headerlink" title="44 假设3"></a>44 假设3</h2><h4 id="与过去事实相反的虚拟语气"><a href="#与过去事实相反的虚拟语气" class="headerlink" title="与过去事实相反的虚拟语气"></a>与过去事实相反的虚拟语气</h4><ul>
<li>if从句是一种虚拟的条件或假设，和过去事实相反的。主句从句时态具体如下:<ul>
<li>从句： had + 动词过去式</li>
<li>主句： would/could/should/might+have + 动词过去分词</li>
<li><details>
<summary> If I had got there earlier, I should have met her. </summary>
  如果我早点到那儿，我应该早点见她的。
</details>  </li>
<li><details>
<summary> If he had taken my advice, he would not have made such a mistake. </summary>
  如果他听了我的建议，他就不会犯这样的错误。
</details>  

</li>
</ul>
</li>
</ul>
<details>
  <summary> If he had studied harder, he might have passed the exam. </summary>
  如果他努力学习，他可能已经通过了考试。
</details>  
<details>
  <summary> If there had been a heavy snow, we should not have go skating. </summary>
  如果有大雪，我们不应该去滑冰。
</details>  
<details>
  <summary> If i had get there earlier, I would have met her. </summary>
  如果我早点到那儿，我会见她的。
</details>  

<hr>
<h2 id="45-假设4"><a href="#45-假设4" class="headerlink" title="45 假设4"></a>45 假设4</h2><h4 id="wish-as-if-过去-过去完成时"><a href="#wish-as-if-过去-过去完成时" class="headerlink" title="wish/as if + 过去/过去完成时"></a>wish/as if + 过去/过去完成时</h4><ul>
<li>wish后面的从句，翻译为：”希望…就好了”,是不可能实现的假设<ul>
<li>a. 与现在事实相反愿望  <details>
      <summary> I wish I were as tall as you </summary>
          我希望我和你一样高
      </details>   </li>
<li>b. 与过去事实相反愿望  <details>
    <summary> He wished he hadn't said that. </summary>
      他希望自己不要这么说。
  </details>  </li>
<li>c. 将来不太可能实现的愿望  <details>
    <summary> I wish it would rain tomorrow. </summary>
      我希望明天会下雨。
  </details>  </li>
</ul>
</li>
<li>as if ， 翻译为”看起来好像…”<ul>
<li>a. 如果从句表示与现在事实相反  <details>
    <summary> You look as if you didn't care. </summary>
      你看起来好像不在乎。
  </details>  </li>
<li>b. 从句表示与过去事实相反  <details>
    <summary> He talks about Rome as if he had been there before.  </summary>
      他谈论罗马，就好像他曾经去过那里一样。
  </details>  </li>
<li>c. 从句表示与将来事实相反  <details>
    <summary> He opened his mouth as if he would say something. </summary>
      他张开嘴，好像他会说些什么。
  </details>  

</li>
</ul>
</li>
</ul>
<details>
  <summary> I wish I were as tall as you. </summary>
  我希望我和你一样高。
</details>  
<details>
  <summary> He talks as if he knew where she was. </summary>
  他说话好像他知道她在哪里。
</details>  
<details>
  <summary>  I wish it would rain tomorrow. </summary>
  我希望明天会下雨。
</details>  

<hr>
<h2 id="46-定语从句关系代词"><a href="#46-定语从句关系代词" class="headerlink" title="46 定语从句关系代词"></a>46 定语从句关系代词</h2><ul>
<li>定语从句：<ul>
<li>在句中做定语，修饰一个名词或代词，被修饰的名词，叫先行词。其后的从句就是定语从句，有关系词引出。</li>
</ul>
</li>
<li>关系代词：<ul>
<li>在从句中做一定的成分，代替先行词，起到连接先行词和从句的作用，常用关系代词：<ul>
<li>that, who, which, whom, whose</li>
</ul>
</li>
<li><details>
    <summary> The girl whom/that I spoke to is my cousin. </summary>
  我与之交谈的那个女孩是我的表弟。
  </details>  </li>
</ul>
</li>
<li>a. 先行词是人的话活that,who, whom.whose来引导定语从句<ul>
<li>“whom” 咋从句中做宾语</li>
<li>“who”和”that”在从句中既可作主语又可做宾语</li>
<li><details>
<summary> They are the people that/who were seen yesterday. </summary>
  他们是昨天见过的人。
</details>  </li>
<li><details>
<summary> They are the people whom/that/who I saw yesterday. </summary>
  他们是我昨天见过的那个人。
</details>  </li>
<li><details>
<summary> They are the people whose wallets were lost yesterday. </summary>
  他们是昨天丢失钱包的人。
</details>  </li>
</ul>
</li>
<li>b. 先行词是动物/事物的话，用which,that,whose来引定语从句<ul>
<li>which, that 在从句中可作主语和宾语，做宾语时可以省略</li>
<li><details>
<summary> He came back for the book which/that he had forgotten </summary>
   他回来找那本他已经忘记的书
</details></li>
<li><details>
<summary> He come back for the book which/that was on the desk. </summary>
   他回来找桌上那本书。
</details></li>
<li><details>
<summary> This is the chair whose legs were broken. </summary>
   这是腿断的椅子。
</details>

</li>
</ul>
</li>
</ul>
<p>|指人|指物<br>:–:|:–|:–<br>主格|who   that|which   that<br>宾格|whom   who   that|which   that<br>属格|whose|whese</p>
<details>
  <summary> He was the person who/that join the army that year. </summary>
  他是那年参军的人。
</details>  
<details>
  <summary> He came back for the book which/that he had forgotten </summary>
  他回来找那本他已经忘记的书
</details>  
<details>
  <summary> He is the man whose wife is a teacher. </summary>
  他是妻子为老师的男人。
</details>  

<hr>
<h2 id="47-定语从句关系副词"><a href="#47-定语从句关系副词" class="headerlink" title="47 定语从句关系副词"></a>47 定语从句关系副词</h2><h3 id="when-where-why-时间，地点，原因"><a href="#when-where-why-时间，地点，原因" class="headerlink" title="when,where, why 时间，地点，原因"></a>when,where, why 时间，地点，原因</h3><ul>
<li>why： 用于修饰表示原因的名词(eg. the reason)<ul>
<li><details>
<summary> We don't know the reason why he didn't show up. </summary>
  我们不知道他不出现的原因。
</details>  </li>
</ul>
</li>
<li>when: 修饰表示时间的名词 (eg. next week)<ul>
<li><details>
    <summary> We'll put off the picnic until next week, when the weather may be better  </summary>
  我们将野餐推迟到下周，届时天气可能会好些
  </details>  </li>
</ul>
</li>
<li>where: 修饰表示地点的名词 (eg. the place )<ul>
<li><details>
    <summary> We don't know the place where he lives. </summary>
  我们不知道他住的地方。
  </details>  

</li>
</ul>
</li>
</ul>
<details>
  <summary> He works in a factory where TV sets are made. </summary>
  他在制造电视机的工厂里工作。
</details>  
<details>
  <summary> She didn't tell me the reason why she refused the offer. </summary>
  她没有告诉我她拒绝这份工作的原因。
</details>  

<hr>
<h2 id="48-宾语从句-连词"><a href="#48-宾语从句-连词" class="headerlink" title="48 宾语从句 连词"></a>48 宾语从句 连词</h2><ul>
<li><p>宾语从句: 在句子中齐宾语作用的从句</p>
</li>
<li><p>从属连词: what, if, whether</p>
<ul>
<li><details>
<summary> He said that he was there yesterday. </summary>
  他说他昨天在那里。
</details>  </li>
<li><details>
<summary> He doesn't know if/whether he was there. </summary>
  他不知道他是否在那儿。
</details>  </li>
</ul>
</li>
<li><p>连接代词: who, whom, whose, what</p>
<ul>
<li><details>
<summary> Do you know who has won the game?  </summary>
  你知道谁赢了比赛吗？
</details>  </li>
<li><details>
<summary> Do you know whom he likes? </summary>
  你知道他喜欢谁吗？
</details>  </li>
<li><details>
<summary> Do you know whose book it is?  </summary>
  你知道那是谁的书吗？
</details>  </li>
<li><details>
<summary> Do you know what he is looking at? </summary>
  你知道他在看什么吗？
</details>  
</li>
</ul>
</li>
<li><p>连接副词: when, where, why, how</p>
<ul>
<li><details>
<summary> He wants to know when the party is. </summary>
  他想知道聚会的时间。
</details>  </li>
<li><details>
<summary> He wants to know where the party is. </summary>
  他想知道聚会在哪里。
</details>  </li>
<li><details>
<summary> He wants to know why they have a party. </summary>
  他想知道他们为什么要开派对。
</details>  </li>
<li><details>
<summary> He wants to know how they come. </summary>
  他想知道它们是怎么来的。
</details>  


</li>
</ul>
</li>
</ul>
<details>
  <summary> He told me that he would go to college the next year </summary>
  他告诉我明年要上大学
</details>  
<details>
  <summary> He doesn't know that she is at school. </summary>
  他不知道她在学校。
</details>  
<details>
  <summary> He wants to know where she is. </summary>
  他想知道她在哪里。
</details>  
<details>
  <summary> He wants to know why she comes. </summary>
  他想知道她为什么来。
</details>  
<details>
  <summary> He wants to know what she is reading. </summary>
  他想知道她在读什么。
</details>  
<details>
  <summary> He wants to know whose book it is. </summary>
  他想知道这是谁的书。
</details>  

<hr>
<h2 id="49-比较级-amp-最高级"><a href="#49-比较级-amp-最高级" class="headerlink" title="49 比较级&amp;最高级"></a>49 比较级&amp;最高级</h2><ul>
<li><h4 id="通常在形容词和副词后加-“er”-“est”"><a href="#通常在形容词和副词后加-“er”-“est”" class="headerlink" title="通常在形容词和副词后加 “er” “est”"></a>通常在形容词和副词后加 “er” “est”</h4><ul>
<li>hard - harder - the hardest</li>
<li>硬 - 更硬  - 最硬</li>
</ul>
</li>
<li><h4 id="词尾是不发音的单音节-“e”时，加-“r”-“st”"><a href="#词尾是不发音的单音节-“e”时，加-“r”-“st”" class="headerlink" title="词尾是不发音的单音节 “e”时，加 “r” “st”"></a>词尾是不发音的单音节 “e”时，加 “r” “st”</h4><ul>
<li>nice - nicer - the nicest</li>
<li>很好-更好-最好</li>
</ul>
</li>
<li><h4 id="词尾是辅音-y-的双音节时，去掉-“y”-加-“ier”-“iest”"><a href="#词尾是辅音-y-的双音节时，去掉-“y”-加-“ier”-“iest”" class="headerlink" title="词尾是辅音 +y 的双音节时，去掉 “y” 加 “ier” “iest”"></a>词尾是辅音 +y 的双音节时，去掉 “y” 加 “ier” “iest”</h4><ul>
<li>dry - drier - the driest</li>
<li>干-干燥-最干燥</li>
</ul>
</li>
<li><h4 id="以一个辅音结尾的重读闭音节时，双写最后一个字，加-“er”-“est”"><a href="#以一个辅音结尾的重读闭音节时，双写最后一个字，加-“er”-“est”" class="headerlink" title="以一个辅音结尾的重读闭音节时，双写最后一个字，加 “er” “est”"></a>以一个辅音结尾的重读闭音节时，双写最后一个字，加 “er” “est”</h4><ul>
<li>hot - hotter - the hottest</li>
<li>热-更热-最热</li>
</ul>
</li>
<li><h4 id="多音节和双音节-在形容词和副词前加"><a href="#多音节和双音节-在形容词和副词前加" class="headerlink" title="多音节和双音节, 在形容词和副词前加"></a>多音节和双音节, 在形容词和副词前加</h4><ul>
<li>程度加强: more - the most </li>
<li>程度减弱: less - the least</li>
<li>interesting - more interesting - the most interesting</li>
<li>有趣-更有趣-最有趣</li>
<li>interesting - less interesting - the least interesting</li>
<li>有趣-不太有趣-最少有趣</li>
</ul>
</li>
<li><h4 id="不规则变化"><a href="#不规则变化" class="headerlink" title="不规则变化:"></a>不规则变化:</h4><ul>
<li>good - better - the best</li>
<li>好-更好-最好</li>
<li>many - more - the most</li>
<li>很多-更多-最</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th align="left">原形</th>
<th align="left">更高级</th>
<th align="left">最高级</th>
<th align="left">翻译</th>
</tr>
</thead>
<tbody><tr>
<td align="left">high</td>
<td align="left">higher</td>
<td align="left">the highest</td>
<td align="left">高-较高-最高</td>
</tr>
<tr>
<td align="left">late</td>
<td align="left">later</td>
<td align="left">the latest</td>
<td align="left">晚-后来-最新</td>
</tr>
<tr>
<td align="left">heavy</td>
<td align="left">heavier</td>
<td align="left">the heaviest</td>
<td align="left">重-非常重-最重</td>
</tr>
<tr>
<td align="left">thin</td>
<td align="left">thinner</td>
<td align="left">thinnest</td>
<td align="left">薄-更薄-最薄</td>
</tr>
<tr>
<td align="left">famous</td>
<td align="left">more famous</td>
<td align="left">the more famous</td>
<td align="left">著名-更著名-最著名</td>
</tr>
<tr>
<td align="left">little</td>
<td align="left">less</td>
<td align="left">the least</td>
<td align="left">少-更少-最少</td>
</tr>
</tbody></table>
<hr>
<h2 id="50-比较级-amp-最高级"><a href="#50-比较级-amp-最高级" class="headerlink" title="50 比较级&amp;最高级"></a>50 比较级&amp;最高级</h2><ul>
<li>形容词或副词的比较级: 表示 “比较…”<ul>
<li><details>
<summary> He is taller than his brother. </summary>
他比哥哥高。
</details>  </li>
<li><details>
<summary> The book is more expensive than the pen. </summary>
这本书比笔还贵。
</details>  </li>
<li><details>
<summary> Her English is better than his. </summary>
她的英语比他的英语好。
</details>  </li>
</ul>
</li>
<li>形容词的最高级: 表示”最…”<ul>
<li><details>
<summary> He is the tallest in his class. </summary>
他是班上最高的。
</details>  </li>
<li><details>
<summary> The book is the most expensive of the three. </summary>
这本书是三本书中最昂贵的。
</details>  </li>
<li><details>
<summary> Her English is the best among the three. </summary>
她的英语是三门课中最好的。
</details>  

</li>
</ul>
</li>
</ul>
<details>
  <summary> The girl is cleverer than the boy.  </summary>
  这个女孩比男孩聪明。
</details>  
<details>
  <summary> The computer is the most expensive among the three. </summary>
  这台电脑是三者中最昂贵的。
</details>  
<details>
  <summary> The man is healthier than his wife. </summary>
  这个男人比他的妻子更健康。
</details>  






]]></content>
      <categories>
        <category>基础</category>
      </categories>
      <tags>
        <tag>English</tag>
      </tags>
  </entry>
  <entry>
    <title>windows</title>
    <url>/2019/12/05/windows/</url>
    <content><![CDATA[<h2 id="win32api"><a href="#win32api" class="headerlink" title="win32api"></a>win32api</h2><p>鼠标左键按下<br><code>win32api.mouse_event(win32con.MOUSEEVENTF_LEFTDOWN, 0, 0, 0, 0)</code><br>鼠标左键放开<br><code>win32api.mouse_event(win32con.MOUSEEVENTF_LEFTUP, 0, 0, 0, 0)</code><br>鼠标右键按下<br><code>win32api.mouse_event(win32con.MOUSEEVENTF_LEFTDOWN, 0, 0, 0, 0)</code><br>鼠标右键放开<br><code>win32api.mouse_event(win32con.MOUSEEVENTF_LEFTUP, 0, 0, 0, 0)</code><br>设置鼠标位置<br><code>win32api.SetCursorPos((x, y))</code><br>键盘输入事件<br><code>win32api.keybd_event(VK_CODE[word], 0, 0, 0)</code><br><code>win32api.keybd_event(VK_CODE[word], 0, win32con.KEYEVENTF_KEYUP, 0)</code>  </p>
<hr>
]]></content>
      <tags>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>01背包问题</title>
    <url>/2019/12/04/knapsack/</url>
    <content><![CDATA[<p>有n个物品，它们有各自的体积和价值，现有给定容量20的背包，如何让背包里装入的物品具有最大的价值总和？  </p>
<table>
<thead>
<tr>
<th align="center">编号</th>
<th align="center">重量</th>
<th align="center">价格</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">2</td>
<td align="center">3</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">3</td>
<td align="center">4</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">4</td>
<td align="center">5</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">5</td>
<td align="center">8</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">9</td>
<td align="center">10</td>
</tr>
</tbody></table>
<p>变量B存储图表 w物品列表 v物品对应价格<br>k，C遍历物品及背包容量</p>
<p>例如：    </p>
<p><img src="http://hotobun.gitee.io/hexo/img/archive_img/knapsack.png" alt=""></p>
<p>极端条件 最后一个物品 重量等于背包容量20 而这个物品价值999<br>k的循环最后一次是<br><code>k=5 C=1 C&lt;W</code><br><code>w[5] = 20</code><br><code>w[5] &gt; C</code><br>条件成立 这件物品的重量大于背包剩下容量 无法添加<br>B[5][1] 直接装入前一个格子的最优价格 依次类推<br>跳过一部分。。。<br>到最后一个物品的最后一次遍历背包容量时<br><code>k=5, C=20</code><br>判断 <code>w[k] &gt; C</code> 不成立<br>这件物品不能装入背包 然后else考虑 偷这件物品和不偷这件物品的收益<br>偷的情况:  </p>
<ul>
<li><code>B[k-1][C-w[k]]</code> C-w[k]是整个背包容量 减去偷这件物品的容量 得到下标</li>
<li>代入计算的出 B[4][0] 这个位置的价值是0</li>
<li><code>int value1 = B[k - 1][C - w[k]] + v[k];</code> 加上v[k]这个物品的价格</li>
<li>得出 value1 = 0 + 999 = 0  </li>
</ul>
<p>不偷的情况：  </p>
<ul>
<li>直接放入上一个容量的最优价钱 </li>
</ul>
<p>最后对比 得出这个容量的最优价钱</p>
<details>
  <summary> c </summary>  

<pre><code class="c"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span>
<span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span>
<span class="meta"># <span class="meta-keyword">define</span> N 6</span>
<span class="meta"># <span class="meta-keyword">define</span> W 21</span>

<span class="keyword">int</span> B[N][W] = { <span class="number">0</span> };
<span class="keyword">int</span> w[<span class="number">6</span>] = { <span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">9</span> };
<span class="keyword">int</span> v[<span class="number">6</span>] = { <span class="number">0</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">10</span> };

<span class="function"><span class="keyword">void</span> <span class="title">knapsack</span><span class="params">()</span> </span>{
    <span class="keyword">int</span> k, C;
    <span class="keyword">for</span> (k = <span class="number">1</span>; k &lt; N; k++) {
        <span class="keyword">for</span> (C = <span class="number">1</span>; C &lt; W; C++) {
            <span class="keyword">if</span> (w[k] &gt; C) {
                B[k][C] = B[k - <span class="number">1</span>][C];
            }
            <span class="keyword">else</span> {
                <span class="keyword">int</span> value1 = B[k - <span class="number">1</span>][C - w[k]] + v[k];
                <span class="keyword">int</span> value2 = B[k - <span class="number">1</span>][C];
                <span class="keyword">if</span> (value2 &gt; value1) {
                    B[k][C] = value2;
                }
                <span class="keyword">else</span> {
                    B[k][C] = value1;
                }
            }
        }
    }
}

<span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>{
    knapsack();
    <span class="built_in">printf</span>(<span class="string">"%d \n"</span>, B[<span class="number">5</span>][<span class="number">20</span>]);
    system(<span class="string">"pause"</span>);
    <span class="keyword">return</span> <span class="number">0</span>;
}  </code></pre>
</details>   


<details>  
  <summary> python </summary>  

<pre><code class="python"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span>
    W = <span class="number">21</span>
    w = [<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">9</span>]
    v = [<span class="number">0</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">10</span>]
    N = len(w)
    B = [[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(W)] <span class="keyword">for</span> i <span class="keyword">in</span> range(N)]

    <span class="keyword">for</span> k <span class="keyword">in</span> range(N):
        <span class="keyword">for</span> C <span class="keyword">in</span> range(W):
            <span class="keyword">if</span> w[k] &gt; C:
                B[k][C] = B[k<span class="number">-1</span>][C]
            <span class="keyword">else</span>:
                value1 = B[k<span class="number">-1</span>][C-w[k]] + v[k]
                value2 = B[k<span class="number">-1</span>][C]
                B[k][C] = max(value1,value2)
    <span class="keyword">return</span> B[<span class="number">-1</span>][<span class="number">-1</span>]</code></pre>
</details>    
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>c语言</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Sqlalchemy笔记</title>
    <url>/2019/12/04/Sqlalchemy/</url>
    <content><![CDATA[<h2 id="使用SQLAlchemy去连接数据库："><a href="#使用SQLAlchemy去连接数据库：" class="headerlink" title="使用SQLAlchemy去连接数据库："></a>使用SQLAlchemy去连接数据库：</h2><p>使用SQLALchemy去连接数据库，需要使用一些配置信息，然后将他们组合成满足条件的字符串：  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">HOSTNAME = <span class="string">'127.0.0.1'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">PORT = <span class="string">'3306'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">DATABASE = <span class="string">'first_sqlalchemy'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">USERNAME = <span class="string">'root'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">PASSWORD = <span class="string">'root'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># dialect+driver://username:password@host:port/database</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">DB_URI = <span class="string">"mysql+pymysql://&#123;username&#125;:&#123;password&#125;@&#123;host&#125;:&#123;port&#125;/&#123;db&#125;?charset=utf8"</span>.format(username=USERNAME,password=PASSWORD,host=HOSTNAME,port=PORT,db=DATABASE)</span></pre></td></tr></table></figure>

<p>然后使用<code>create_engine</code>创建一个引擎<code>engine</code>，然后再调用这个引擎的<code>connect</code>方法，就可以得到这个对象，然后就可以通过这个对象对数据库进行操作了：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">engine = create_engine(DB_URI)</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 判断是否连接成功</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">conn = engine.connect()</span></pre></td></tr><tr><td class="code"><pre><span class="line">result = conn.execute(<span class="string">'select 1'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">print(result.fetchone())</span></pre></td></tr></table></figure>


<h2 id="ORM介绍："><a href="#ORM介绍：" class="headerlink" title="ORM介绍："></a>ORM介绍：</h2><ol>
<li>ORM：Object Relationship Mapping</li>
<li>大白话：对象模型与数据库表的映射</li>
</ol>
<h2 id="将ORM模型映射到数据库中："><a href="#将ORM模型映射到数据库中：" class="headerlink" title="将ORM模型映射到数据库中："></a>将ORM模型映射到数据库中：</h2><ol>
<li>用<code>declarative_base</code>根据<code>engine</code>创建一个ORM基类。 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span></pre></td></tr><tr><td class="code"><pre><span class="line">engine = create_engine(DB_URI)</span></pre></td></tr><tr><td class="code"><pre><span class="line">Base = declarative_base(engine)</span></pre></td></tr></table></figure></li>
<li>用这个<code>Base</code>类作为基类来写自己的ORM类。要定义<code>__tablename__</code>类属性，来指定这个模型映射到数据库中的表名。 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(Base)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    __tablename__ = <span class="string">'person'</span></span></pre></td></tr></table></figure></li>
<li>创建属性来映射到表中的字段，所有需要映射到表中的属性都应该为Column类型： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(Base)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    __tablename__ = <span class="string">'person'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment"># 2. 在这个ORM模型中创建一些属性，来跟表中的字段进行一一映射。这些属性必须是sqlalchemy给我们提供好的数据类型。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    id = Column(Integer,primary_key=<span class="literal">True</span>,autoincrement=<span class="literal">True</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    name = Column(String(<span class="number">50</span>))</span></pre></td></tr><tr><td class="code"><pre><span class="line">    age = Column(Integer)</span></pre></td></tr></table></figure></li>
<li>使用<code>Base.metadata.create_all()</code>来将模型映射到数据库中。</li>
<li>一旦使用<code>Base.metadata.create_all()</code>将模型映射到数据库中后，即使改变了模型的字段，也不会重新映射了。</li>
</ol>
<h2 id="用session做数据的增删改查操作："><a href="#用session做数据的增删改查操作：" class="headerlink" title="用session做数据的增删改查操作："></a>用session做数据的增删改查操作：</h2><ol>
<li>构建session对象：所有和数据库的ORM操作都必须通过一个叫做<code>session</code>的会话对象来实现，通过以下代码来获取会话对象： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">engine = create_engine(DB_URI)</span></pre></td></tr><tr><td class="code"><pre><span class="line">session = sessionmaker(engine)()</span></pre></td></tr></table></figure></li>
<li>添加对象：<ul>
<li>创建对象，也即创建一条数据：  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p = Person(name=<span class="string">'zhiliao'</span>,age=<span class="number">18</span>,country=<span class="string">'china'</span>)</span></pre></td></tr></table></figure></li>
<li>将这个对象添加到<code>session</code>会话对象中：  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">session.add(p)</span></pre></td></tr></table></figure></li>
<li>将session中的对象做commit操作（提交）：  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">session.commit()</span></pre></td></tr></table></figure></li>
<li>一次性添加多条数据：  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p1 = Person(name=<span class="string">'zhiliao1'</span>,age=<span class="number">19</span>,country=<span class="string">'china'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">p2 = Person(name=<span class="string">'zhiliao2'</span>,age=<span class="number">20</span>,country=<span class="string">'china'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">session.add_all([p1,p2])</span></pre></td></tr><tr><td class="code"><pre><span class="line">session.commit()</span></pre></td></tr></table></figure></li>
</ul>
</li>
<li>查找对象： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查找某个模型对应的那个表中所有的数据：</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">all_person = session.query(Person).all()</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 使用filter_by来做条件查询</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">all_person = session.query(Person).filter_by(name=<span class="string">'zhiliao'</span>).all()</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 使用filter来做条件查询</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">all_person = session.query(Person).filter(Person.name==<span class="string">'zhiliao'</span>).all()</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 使用get方法查找数据，get方法是根据id来查找的，只会返回一条数据或者None</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">person = session.query(Person).get(primary_key)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 使用first方法获取结果集中的第一条数据</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">person = session.query(Person).first()</span></pre></td></tr></table></figure></li>
<li>修改对象：首先从数据库中查找对象，然后将这条数据修改为你想要的数据，最后做commit操作就可以修改数据了。 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">person = session.query(Person).first()</span></pre></td></tr><tr><td class="code"><pre><span class="line">person.name = <span class="string">'ketang'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">session.commit()</span></pre></td></tr></table></figure></li>
<li>删除对象：将需要删除的数据从数据库中查找出来，然后使用<code>session.delete</code>方法将这条数据从session中删除，最后做commit操作就可以了。 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">person = session.query(Person).first()</span></pre></td></tr><tr><td class="code"><pre><span class="line">session.delete(person)</span></pre></td></tr><tr><td class="code"><pre><span class="line">session.commit()</span></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="SQLAlchemy常用数据类型："><a href="#SQLAlchemy常用数据类型：" class="headerlink" title="SQLAlchemy常用数据类型："></a>SQLAlchemy常用数据类型：</h2><ol>
<li>Integer：整形，映射到数据库中是int类型。</li>
<li>Float：浮点类型，映射到数据库中是float类型。他占据的32位。</li>
<li>Double：双精度浮点类型，映射到数据库中是double类型，占据64位。</li>
<li>String：可变字符类型，映射到数据库中是varchar类型.</li>
<li>Boolean：布尔类型，映射到数据库中的是tinyint类型。</li>
<li>DECIMAL：定点类型。是专门为了解决浮点类型精度丢失的问题的。在存储钱相关的字段的时候建议大家都使用这个数据类型。并且这个类型使用的时候需要传递两个参数，第一个参数是用来标记这个字段总能能存储多少个数字，第二个参数表示小数点后有多少位。</li>
<li>Enum：枚举类型。指定某个字段只能是枚举中指定的几个值，不能为其他值。在ORM模型中，使用Enum来作为枚举，示例代码如下： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span><span class="params">(Base)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    __tablename__ = <span class="string">'article'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    id = Column(Integer,primary_key=<span class="literal">True</span>,autoincrement=<span class="literal">True</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    tag = Column(Enum(<span class="string">"python"</span>,<span class="string">'flask'</span>,<span class="string">'django'</span>))</span></pre></td></tr></table></figure>
 在Python3中，已经内置了enum这个枚举的模块，我们也可以使用这个模块去定义相关的字段。示例代码如下： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TagEnum</span><span class="params">(enum.Enum)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    python = <span class="string">"python"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    flask = <span class="string">"flask"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    django = <span class="string">"django"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span><span class="params">(Base)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    __tablename__ = <span class="string">'article'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    id = Column(Integer,primary_key=<span class="literal">True</span>,autoincrement=<span class="literal">True</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    tag = Column(Enum(TagEnum))</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">article = Article(tag=TagEnum.flask)</span></pre></td></tr></table></figure></li>
<li>Date：存储时间，只能存储年月日。映射到数据库中是date类型。在Python代码中，可以使用<code>datetime.date</code>来指定。示例代码如下： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span><span class="params">(Base)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    __tablename__ = <span class="string">'article'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    id = Column(Integer,primary_key=<span class="literal">True</span>,autoincrement=<span class="literal">True</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    create_time = Column(Date)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">article = Article(create_time=date(<span class="number">2017</span>,<span class="number">10</span>,<span class="number">10</span>))</span></pre></td></tr></table></figure></li>
<li>DateTime：存储时间，可以存储年月日时分秒毫秒等。映射到数据库中也是datetime类型。在Python代码中，可以使用<code>datetime.datetime</code>来指定。示例代码如下： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span><span class="params">(Base)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    __tablename__ = <span class="string">'article'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    id = Column(Integer,primary_key=<span class="literal">True</span>,autoincrement=<span class="literal">True</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    create_time = Column(DateTime)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">article = Article(create_time=datetime(<span class="number">2011</span>,<span class="number">11</span>,<span class="number">11</span>,<span class="number">11</span>,<span class="number">11</span>,<span class="number">11</span>))</span></pre></td></tr></table></figure></li>
<li>Time：存储时间，可以存储时分秒。映射到数据库中也是time类型。在Python代码中，可以使用<code>datetime.time</code>来至此那个。示例代码如下：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span><span class="params">(Base)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    __tablename__ = <span class="string">'article'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    id = Column(Integer,primary_key=<span class="literal">True</span>,autoincrement=<span class="literal">True</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    create_time = Column(Time)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">article = Article(create_time=time(hour=<span class="number">11</span>,minute=<span class="number">11</span>,second=<span class="number">11</span>))</span></pre></td></tr></table></figure></li>
<li>Text：存储长字符串。一般可以存储6W多个字符。如果超出了这个范围，可以使用LONGTEXT类型。映射到数据库中就是text类型。</li>
<li>LONGTEXT：长文本类型，映射到数据库中是longtext类型。</li>
</ol>
<h2 id="Column常用参数："><a href="#Column常用参数：" class="headerlink" title="Column常用参数："></a>Column常用参数：</h2><ol>
<li>primary_key：设置某个字段为主键。</li>
<li>autoincrement：设置这个字段为自动增长的。</li>
<li>default：设置某个字段的默认值。在发表时间这些字段上面经常用。</li>
<li>nullable：指定某个字段是否为空。默认值是True，就是可以为空。</li>
<li>unique：指定某个字段的值是否唯一。默认是False。</li>
<li>onupdate：在数据更新的时候会调用这个参数指定的值或者函数。在第一次插入这条数据的时候，不会用onupdate的值，只会使用default的值。常用的就是<code>update_time</code>（每次更新数据的时候都要更新的值）。</li>
<li>name：指定ORM模型中某个属性映射到表中的字段名。如果不指定，那么会使用这个属性的名字来作为字段名。如果指定了，就会使用指定的这个值作为参数。这个参数也可以当作位置参数，在第1个参数来指定。 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">title = Column(String(<span class="number">50</span>),name=<span class="string">'title'</span>,nullable=<span class="literal">False</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">title = Column(<span class="string">'my_title'</span>,String(<span class="number">50</span>),nullable=<span class="literal">False</span>)</span></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="query可用参数："><a href="#query可用参数：" class="headerlink" title="query可用参数："></a>query可用参数：</h2><ol>
<li>模型对象。指定查找这个模型中所有的对象。</li>
<li>模型中的属性。可以指定只查找某个模型的其中几个属性。</li>
<li>聚合函数。<ul>
<li>func.count：统计行的数量。</li>
<li>func.avg：求平均值。</li>
<li>func.max：求最大值。</li>
<li>func.min：求最小值。</li>
<li>func.sum：求和。<br><code>func</code>上，其实没有任何聚合函数。但是因为他底层做了一些魔术，只要mysql中有的聚合函数，都可以通过func调用。</li>
</ul>
</li>
</ol>
<h2 id="filter过滤条件："><a href="#filter过滤条件：" class="headerlink" title="filter过滤条件："></a>filter过滤条件：</h2><p>过滤是数据提取的一个很重要的功能，以下对一些常用的过滤条件进行解释，并且这些过滤条件都是只能通过filter方法实现的：</p>
<ol>
<li><p>equals：</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">article = session.query(Article).filter(Article.title == <span class="string">"title0"</span>).first()</span></pre></td></tr><tr><td class="code"><pre><span class="line">print(article)</span></pre></td></tr></table></figure></li>
<li><p>not equals:</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">query.filter(User.name != <span class="string">'ed'</span>)</span></pre></td></tr></table></figure></li>
<li><p>like：</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">query.filter(User.name.like(<span class="string">'%ed%'</span>))</span></pre></td></tr></table></figure>
</li>
<li><p>in：</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">query.filter(User.name.in_([<span class="string">'ed'</span>,<span class="string">'wendy'</span>,<span class="string">'jack'</span>]))</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 同时，in也可以作用于一个Query</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">query.filter(User.name.in_(session.query(User.name).filter(User.name.like(<span class="string">'%ed%'</span>))))</span></pre></td></tr></table></figure>
</li>
<li><p>not in：</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">query.filter(~User.name.in_([<span class="string">'ed'</span>,<span class="string">'wendy'</span>,<span class="string">'jack'</span>]))</span></pre></td></tr></table></figure></li>
<li><p>is null：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">query.filter(User.name==<span class="literal">None</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 或者是</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">query.filter(User.name.is_(<span class="literal">None</span>))</span></pre></td></tr></table></figure>
</li>
<li><p>is not null:</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">query.filter(User.name != <span class="literal">None</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 或者是</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">query.filter(User.name.isnot(<span class="literal">None</span>))</span></pre></td></tr></table></figure>
</li>
<li><p>and：</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> and_</span></pre></td></tr><tr><td class="code"><pre><span class="line">query.filter(and_(User.name==<span class="string">'ed'</span>,User.fullname==<span class="string">'Ed Jones'</span>))</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 或者是传递多个参数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">query.filter(User.name==<span class="string">'ed'</span>,User.fullname==<span class="string">'Ed Jones'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 或者是通过多次filter操作</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">query.filter(User.name==<span class="string">'ed'</span>).filter(User.fullname==<span class="string">'Ed Jones'</span>)</span></pre></td></tr></table></figure>
</li>
<li><p>or：</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> or_  query.filter(or_(User.name==<span class="string">'ed'</span>,User.name==<span class="string">'wendy'</span>))</span></pre></td></tr></table></figure>

</li>
</ol>
<p>如果想要查看orm底层转换的sql语句，可以在filter方法后面不要再执行任何方法直接打印就可以看到了。比如：<br>    <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">articles = session.query(Article).filter(or_(Article.title==<span class="string">'abc'</span>,Article.content==<span class="string">'abc'</span>))</span></pre></td></tr><tr><td class="code"><pre><span class="line">print(articles)</span></pre></td></tr></table></figure></p>
<h2 id="外键："><a href="#外键：" class="headerlink" title="外键："></a>外键：</h2><p>使用SQLAlchemy创建外键非常简单。在从表中增加一个字段，指定这个字段外键的是哪个表的哪个字段就可以了。从表中外键的字段，必须和父表的主键字段类型保持一致。<br>示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(Base)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    __tablename__ = <span class="string">'user'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    id = Column(Integer,primary_key=<span class="literal">True</span>,autoincrement=<span class="literal">True</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    username = Column(String(<span class="number">50</span>),nullable=<span class="literal">False</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span><span class="params">(Base)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    __tablename__ = <span class="string">'article'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    id = Column(Integer,primary_key=<span class="literal">True</span>,autoincrement=<span class="literal">True</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    title = Column(String(<span class="number">50</span>),nullable=<span class="literal">False</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    content = Column(Text,nullable=<span class="literal">False</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    uid = Column(Integer,ForeignKey(<span class="string">"user.id"</span>))</span></pre></td></tr></table></figure>
<p>外键约束有以下几项：</p>
<ol>
<li>RESTRICT：父表数据被删除，会阻止删除。默认就是这一项。</li>
<li>NO ACTION：在MySQL中，同RESTRICT。</li>
<li>CASCADE：级联删除。</li>
<li>SET NULL：父表数据被删除，子表数据会设置为NULL。</li>
</ol>
<h2 id="ORM关系以及一对多："><a href="#ORM关系以及一对多：" class="headerlink" title="ORM关系以及一对多："></a>ORM关系以及一对多：</h2><p>mysql级别的外键，还不够ORM，必须拿到一个表的外键，然后通过这个外键再去另外一张表中查找，这样太麻烦了。SQLAlchemy提供了一个<code>relationship</code>，这个类可以定义属性，以后在访问相关联的表的时候就直接可以通过属性访问的方式就可以访问得到了。示例代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(Base)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    __tablename__ = <span class="string">'user'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    id = Column(Integer,primary_key=<span class="literal">True</span>,autoincrement=<span class="literal">True</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    username = Column(String(<span class="number">50</span>),nullable=<span class="literal">False</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment"># articles = relationship("Article")</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="string">"&lt;User(username:%s)&gt;"</span> % self.username</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span><span class="params">(Base)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    __tablename__ = <span class="string">'article'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    id = Column(Integer,primary_key=<span class="literal">True</span>,autoincrement=<span class="literal">True</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    title = Column(String(<span class="number">50</span>),nullable=<span class="literal">False</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    content = Column(Text,nullable=<span class="literal">False</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    uid = Column(Integer,ForeignKey(<span class="string">"user.id"</span>))</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    author = relationship(<span class="string">"User"</span>,backref=<span class="string">"articles"</span>)</span></pre></td></tr></table></figure>
<p>另外，可以通过<code>backref</code>来指定反向访问的属性名称。articles是有多个。他们之间的关系是一个一对多的关系。</p>
<h2 id="一对一的关系："><a href="#一对一的关系：" class="headerlink" title="一对一的关系："></a>一对一的关系：</h2><p>在sqlalchemy中，如果想要将两个模型映射成一对一的关系，那么应该在父模型中，指定引用的时候，要传递一个<code>uselist=False</code>这个参数进去。就是告诉父模型，以后引用这个从模型的时候，不再是一个列表了，而是一个对象了。示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(Base)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    __tablename__ = <span class="string">'user'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    id = Column(Integer,primary_key=<span class="literal">True</span>,autoincrement=<span class="literal">True</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    username = Column(String(<span class="number">50</span>),nullable=<span class="literal">False</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    extend = relationship(<span class="string">"UserExtend"</span>,uselist=<span class="literal">False</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="string">"&lt;User(username:%s)&gt;"</span> % self.username</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserExtend</span><span class="params">(Base)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    __tablename__ = <span class="string">'user_extend'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    id = Column(Integer, primary_key=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    school = Column(String(<span class="number">50</span>))</span></pre></td></tr><tr><td class="code"><pre><span class="line">    uid = Column(Integer,ForeignKey(<span class="string">"user.id"</span>))</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    user = relationship(<span class="string">"User"</span>,backref=<span class="string">"extend"</span>)</span></pre></td></tr></table></figure>
<p>当然，也可以借助<code>sqlalchemy.orm.backref</code>来简化代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(Base)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    __tablename__ = <span class="string">'user'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    id = Column(Integer,primary_key=<span class="literal">True</span>,autoincrement=<span class="literal">True</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    username = Column(String(<span class="number">50</span>),nullable=<span class="literal">False</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment"># extend = relationship("UserExtend",uselist=False)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="string">"&lt;User(username:%s)&gt;"</span> % self.username</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserExtend</span><span class="params">(Base)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    __tablename__ = <span class="string">'user_extend'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    id = Column(Integer, primary_key=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    school = Column(String(<span class="number">50</span>))</span></pre></td></tr><tr><td class="code"><pre><span class="line">    uid = Column(Integer,ForeignKey(<span class="string">"user.id"</span>))</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    user = relationship(<span class="string">"User"</span>,backref=backref(<span class="string">"extend"</span>,uselist=<span class="literal">False</span>))</span></pre></td></tr></table></figure>

<h2 id="多对多的关系："><a href="#多对多的关系：" class="headerlink" title="多对多的关系："></a>多对多的关系：</h2><ol>
<li>多对多的关系需要通过一张中间表来绑定他们之间的关系。</li>
<li>先把两个需要做多对多的模型定义出来</li>
<li>使用Table定义一个中间表，中间表一般就是包含两个模型的外键字段就可以了，并且让他们两个来作为一个“复合主键”。</li>
<li>在两个需要做多对多的模型中随便选择一个模型，定义一个relationship属性，来绑定三者之间的关系，在使用relationship的时候，需要传入一个secondary=中间表。</li>
</ol>
<h2 id="ORM层面的删除数据："><a href="#ORM层面的删除数据：" class="headerlink" title="ORM层面的删除数据："></a>ORM层面的删除数据：</h2><p>ORM层面删除数据，会无视mysql级别的外键约束。直接会将对应的数据删除，然后将从表中的那个外键设置为NULL。如果想要避免这种行为，应该将从表中的外键的<code>nullable=False</code>。<br>在SQLAlchemy，只要将一个数据添加到session中，和他相关联的数据都可以一起存入到数据库中了。这些是怎么设置的呢？其实是通过relationship的时候，有一个关键字参数cascade可以设置这些属性：</p>
<ol>
<li>save-update：默认选项。在添加一条数据的时候，会把其他和他相关联的数据都添加到数据库中。这种行为就是save-update属性影响的。</li>
<li>delete：表示当删除某一个模型中的数据的时候，是否也删掉使用relationship和他关联的数据。</li>
<li>delete-orphan：表示当对一个ORM对象解除了父表中的关联对象的时候，自己便会被删除掉。当然如果父表中的数据被删除，自己也会被删除。这个选项只能用在一对多上，不能用在多对多以及多对一上。并且还需要在子模型中的relationship中，增加一个single_parent=True的参数。</li>
<li>merge：默认选项。当在使用session.merge，合并一个对象的时候，会将使用了relationship相关联的对象也进行merge操作。</li>
<li>expunge：移除操作的时候，会将相关联的对象也进行移除。这个操作只是从session中移除，并不会真正的从数据库中删除。</li>
<li>all：是对save-update, merge, refresh-expire, expunge, delete几种的缩写。</li>
</ol>
<h2 id="排序："><a href="#排序：" class="headerlink" title="排序："></a>排序：</h2><ol>
<li><p>order_by：可以指定根据这个表中的某个字段进行排序，如果在前面加了一个-，代表的是降序排序。</p>
</li>
<li><p>在模型定义的时候指定默认排序：有些时候，不想每次在查询的时候都指定排序的方式，可以在定义模型的时候就指定排序的方式。有以下两种方式：</p>
<ul>
<li><p>relationship的order_by参数：在指定relationship的时候，传递order_by参数来指定排序的字段。</p>
</li>
<li><p>在模型定义中，添加以下代码：</p>
<p><strong>mapper_args</strong> = {<br>   “order_by”: title<br> }<br>即可让文章使用标题来进行排序。</p>
</li>
</ul>
</li>
<li><p>正序排序与倒序排序：默认是使用正序排序。如果需要使用倒序排序，那么可以使用这个字段的<code>desc()</code>方法，或者是在排序的时候使用这个字段的字符串名字，然后在前面加一个负号。</p>
</li>
</ol>
<h2 id="limit、offset和切片操作："><a href="#limit、offset和切片操作：" class="headerlink" title="limit、offset和切片操作："></a>limit、offset和切片操作：</h2><ol>
<li>limit：可以限制每次查询的时候只查询几条数据。</li>
<li>offset：可以限制查找数据的时候过滤掉前面多少条。</li>
<li>切片：可以对Query对象使用切片操作，来获取想要的数据。可以使用<code>slice(start,stop)</code>方法来做切片操作。也可以使用<code>[start:stop]</code>的方式来进行切片操作。一般在实际开发中，中括号的形式是用得比较多的。希望大家一定要掌握。示例代码如下：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">articles = session.query(Article).order_by(Article.id.desc())[<span class="number">0</span>:<span class="number">10</span>]</span></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="懒加载："><a href="#懒加载：" class="headerlink" title="懒加载："></a>懒加载：</h2><p>在一对多，或者多对多的时候，如果想要获取多的这一部分的数据的时候，往往能通过一个属性就可以全部获取了。比如有一个作者，想要或者这个作者的所有文章，那么可以通过user.articles就可以获取所有的。但有时候我们不想获取所有的数据，比如只想获取这个作者今天发表的文章，那么这时候我们可以给relationship传递一个lazy=’dynamic’，以后通过user.articles获取到的就不是一个列表，而是一个AppenderQuery对象了。这样就可以对这个对象再进行一层过滤和排序等操作。<br>通过<code>lazy=&#39;dynamic&#39;</code>，获取出来的多的那一部分的数据，就是一个<code>AppenderQuery</code>对象了。这种对象既可以添加新数据，也可以跟<code>Query</code>一样，可以再进行一层过滤。<br>总而言之一句话：如果你在获取数据的时候，想要对多的那一边的数据再进行一层过滤，那么这时候就可以考虑使用<code>lazy=&#39;dynamic&#39;</code>。<br>lazy可用的选项：</p>
<ol>
<li><code>select</code>：这个是默认选项。还是拿<code>user.articles</code>的例子来讲。如果你没有访问<code>user.articles</code>这个属性，那么sqlalchemy就不会从数据库中查找文章。一旦你访问了这个属性，那么sqlalchemy就会立马从数据库中查找所有的文章，并把查找出来的数据组装成一个列表返回。这也是懒加载。</li>
<li><code>dynamic</code>：这个就是我们刚刚讲的。就是在访问<code>user.articles</code>的时候返回回来的不是一个列表，而是<code>AppenderQuery</code>对象。</li>
</ol>
<h2 id="group-by："><a href="#group-by：" class="headerlink" title="group_by："></a>group_by：</h2><p>根据某个字段进行分组。比如想要根据性别进行分组，来统计每个分组分别有多少人，那么可以使用以下代码来完成：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">session.query(User.gender,func.count(User.id)).group_by(User.gender).all()</span></pre></td></tr></table></figure>

<h2 id="having："><a href="#having：" class="headerlink" title="having："></a>having：</h2><p>having是对查找结果进一步过滤。比如只想要看未成年人的数量，那么可以首先对年龄进行分组统计人数，然后再对分组进行having过滤。示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = session.query(User.age,func.count(User.id)).group_by(User.age).having(User.age &gt;= <span class="number">18</span>).all()</span></pre></td></tr></table></figure>

<h2 id="join："><a href="#join：" class="headerlink" title="join："></a>join：</h2><ol>
<li>join分为left join（左外连接）和right join（右外连接）以及内连接（等值连接）。</li>
<li>参考的网页：<a href="http://www.jb51.net/article/15386.htm" target="_blank" rel="noopener">http://www.jb51.net/article/15386.htm</a></li>
<li>在sqlalchemy中，使用join来完成内连接。在写join的时候，如果不写join的条件，那么默认将使用外键来作为条件连接。</li>
<li>query查找出来什么值，不会取决于join后面的东西，而是取决于query方法中传了什么参数。就跟原生sql中的select 后面那一个一样。<br>比如现在要实现一个功能，要查找所有用户，按照发表文章的数量来进行排序。示例代码如下：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = session.query(User,func.count(Article.id)).join(Article).group_by(User.id).order_by(func.count(Article.id).desc()).all()</span></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="subquery："><a href="#subquery：" class="headerlink" title="subquery："></a>subquery：</h2><p>子查询可以让多个查询变成一个查询，只要查找一次数据库，性能相对来讲更加高效一点。不用写多个sql语句就可以实现一些复杂的查询。那么在sqlalchemy中，要实现一个子查询，应该使用以下几个步骤：</p>
<ol>
<li>将子查询按照传统的方式写好查询代码，然后在<code>query</code>对象后面执行<code>subquery</code>方法，将这个查询变成一个子查询。</li>
<li>在子查询中，将以后需要用到的字段通过<code>label</code>方法，取个别名。</li>
<li>在父查询中，如果想要使用子查询的字段，那么可以通过子查询的返回值上的<code>c</code>属性拿到。<br>整体的示例代码如下：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">stmt = session.query(User.city.label(<span class="string">"city"</span>),User.age.label(<span class="string">"age"</span>)).filter(User.username==<span class="string">'李A'</span>).subquery()</span></pre></td></tr><tr><td class="code"><pre><span class="line">result = session.query(User).filter(User.city==stmt.c.city,User.age==stmt.c.age).all()</span></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>flask</title>
    <url>/2019/12/04/flask/</url>
    <content><![CDATA[<h2 id="建立第一个项目"><a href="#建立第一个项目" class="headerlink" title="建立第一个项目"></a>建立第一个项目</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from flask import Flaskapp &#x3D; Flask(__name__)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">@app.route(&#39;&#x2F;&#39;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">def hello_world():</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return &#39;Hello World!&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    app.run()</span></pre></td></tr></table></figure>
<p>运行  hello.py<br>$ python hello.py<br>* Running on <a href="http://127.0.0.1:5000" target="_blank" rel="noopener">http://127.0.0.1:5000</a><br>route()装饰器告诉Flask什么样的URL能触发函数。<br>用户访问 / 首页时调用hello_world()函数<br>app.run(host= None, port=None , debug=False, **options )  </p>
<ul>
<li>host : 主机ip地址 默认127.0.0.1，如果需要开放给其他机器访问可以填0.0.0.0  </li>
<li>port : 端口 默认5000  </li>
<li>debug: 调试模式  </li>
<li>options: 官方没讲 只丢了个连接。    </li>
</ul>
<hr>
<h2 id="变量规则"><a href="#变量规则" class="headerlink" title="变量规则"></a>变量规则</h2><ul>
<li>在route装饰器括号内 可以使用特殊标记 <var_name>传递参数 例：  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@app.route(&#39;&#x2F;user&#x2F;&lt;usrname&gt;&#39;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">def show_name(username):</span></pre></td></tr><tr><td class="code"><pre><span class="line">    # 函数参数username 必须与装饰器内特殊标记变量名一致</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return &#39;hello %s&#39; % username</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">@app.route(&#39;&#x2F;user&#x2F;&lt;int:number&gt;&#39;):</span></pre></td></tr><tr><td class="code"><pre><span class="line">def show_number(number):</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return &#39;这里接收了数字：%d&#39; % number</span></pre></td></tr><tr><td class="code"><pre><span class="line">    # 可以用这样的形式指定变量类型 &lt;type:name&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    # 类型无法转换则不匹配</span></pre></td></tr><tr><td class="code"><pre><span class="line">    # 转换器有下面几种</span></pre></td></tr><tr><td class="code"><pre><span class="line">         int : 接收整数</span></pre></td></tr><tr><td class="code"><pre><span class="line">       float ：接收浮点数</span></pre></td></tr><tr><td class="code"><pre><span class="line">        path ：路径类型 接收斜杠</span></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<h2 id="URL-重定向行为："><a href="#URL-重定向行为：" class="headerlink" title="URL/ 重定向行为："></a>URL/ 重定向行为：</h2><p>1 @app.route(‘/url_one/‘)   # URL路径后有斜杠   </p>
<ul>
<li>可以匹配 :   <a href="http://127.0.0.1:5000/url_one" target="_blank" rel="noopener">http://127.0.0.1:5000/url_one</a></li>
<li>这两个URL都会重定向到这:   <a href="http://127.0.0.1:5000/url_one/" target="_blank" rel="noopener">http://127.0.0.1:5000/url_one/</a>  </li>
<li>2 @app.route(‘/url_two’)    # URL路径后没有斜杠</li>
<li>不可以匹配: <a href="http://127.0.0.1:5000/url_two" target="_blank" rel="noopener">http://127.0.0.1:5000/url_two</a></li>
<li>可以匹配：<a href="http://127.0.0.1:5000/url_two/" target="_blank" rel="noopener">http://127.0.0.1:5000/url_two/</a></li>
</ul>
<p>这个行文使得遗忘斜杠时 允许关联的URL接任工作 保证URL唯一性<br>如果规则以斜杠结尾 当用户不带斜杠的形式请求 用户被自动重定向到带有斜杠的也页面<br>如果规则没有斜杠结尾 用户必须带斜杠请求 否则抛出404  </p>
<hr>
<h2 id="URL路由规则"><a href="#URL路由规则" class="headerlink" title="URL路由规则"></a>URL路由规则</h2><p>1 使用 flask.Flask.route() 装饰器<br>2 使用 flask.Flask.add_url_rule() 函数<br>3 直接访问暴露为 flask.Flask.url_map 的底层的Werkzeug 路由系统  ？？啥东西  </p>
<hr>
<h2 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h2><p>用 Flask 处理文件上传很简单。只要确保你没忘记在 HTML 表单中设置enctype=”multipart/form-data” 属性，不然你的浏览器根本不会发送文件。已上传的文件存储在内存或是文件系统中一个临时的位置。你可以通过请求对象的 files属性访问它们。每个上传的文件都会存储在这个字典里。它表现近乎为一个标准的 Python file 对象，但它还有一个 save() 方法，这个方法允许你把文件保存到服务器的文件系统上。这里是一个用它保存文件的例子:  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from flask import request</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">@app.route(&#39;&#x2F;upload&#39;, methods&#x3D;[&#39;GET&#39;, &#39;POST&#39;])def upload_file():</span></pre></td></tr><tr><td class="code"><pre><span class="line">if request.method &#x3D;&#x3D; &#39;POST&#39;:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    f &#x3D; request.files[&#39;the_file&#39;] #　这个the_file 与模版里上传文件名一致</span></pre></td></tr><tr><td class="code"><pre><span class="line">    f.save(&#39;&#x2F;path&#x2F;file_name&#39;)</span></pre></td></tr></table></figure>

<p>传文件可是个经典的好问题了。文件上传的基本概念实际上非常简单， 他基本是这样工作的:<br>1 一个&lt;form&gt; 标签被标记有 enctype=multipart/form-data ，并且在里面包含一个&lt;input type=file&gt; 标签。<br>2 服务端应用通过请求对象上的 files 字典访问文件。<br>3 使用文件的 save() 方法将文件永久地保存在文件系统上的某处。  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import os</span></pre></td></tr><tr><td class="code"><pre><span class="line">from flask</span></pre></td></tr><tr><td class="code"><pre><span class="line">import Flask, request, redirect, url_for</span></pre></td></tr><tr><td class="code"><pre><span class="line">from werkzeug import secure_filename</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">UPLOAD_FOLDER &#x3D; &#39;&#x2F;path&#x2F;to&#x2F;the&#x2F;uploads&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">ALLOWED_EXTENSIONS &#x3D; set([&#39;txt&#39;, &#39;pdf&#39;, &#39;png&#39;, &#39;jpg&#39;, &#39;jpeg&#39;, &#39;gif&#39;])</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">app &#x3D; Flask(__name__)</span></pre></td></tr><tr><td class="code"><pre><span class="line">app.config[&#39;UPLOAD_FOLDER&#39;] &#x3D; UPLOAD_FOLDER</span></pre></td></tr></table></figure>
<p>UPLOAD_FOLDER 是我们储存上传的文件的地方，而ALLOWED_EXTENSIONS 则是允许的文件类型的集合。然后我们手动为应用添加一个的 URL 规则。我们通常很少这样做，但是为什么这里要如此呢？原因是我们希望实际部署的服务器 (或者我们的开发服务器）来为我们提供这些文件的访问服务，所以我们只需要一个规则用来生成指向这些文件的 URL 。  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def allowed_file(filename):</span></pre></td></tr><tr><td class="code"><pre><span class="line">    # 这里检查后缀名</span></pre></td></tr><tr><td class="code"><pre><span class="line">   return &#39;.&#39; in filename and \</span></pre></td></tr><tr><td class="code"><pre><span class="line">       filename.rsplit(&#39;.&#39;, 1)[1] in ALLOWED_EXTENSIONS</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">@app.route(&#39;&#x2F;&#39;, methods&#x3D;[&#39;GET&#39;, &#39;POST&#39;])</span></pre></td></tr><tr><td class="code"><pre><span class="line">def upload_file():</span></pre></td></tr><tr><td class="code"><pre><span class="line">   if request.method &#x3D;&#x3D; &#39;POST&#39;:</span></pre></td></tr><tr><td class="code"><pre><span class="line">       file &#x3D; request.files[&#39;file&#39;]</span></pre></td></tr><tr><td class="code"><pre><span class="line">       if file and allowed_file(file.filename):</span></pre></td></tr><tr><td class="code"><pre><span class="line">           filename &#x3D; secure_filename(file.filename)</span></pre></td></tr><tr><td class="code"><pre><span class="line">           file.save(os.path.join(app.config[&#39;UPLOAD_FOLDER&#39;], filename))</span></pre></td></tr><tr><td class="code"><pre><span class="line">           return redirect(url_for(&#39;uploaded_file&#39;,filename&#x3D;filename))</span></pre></td></tr><tr><td class="code"><pre><span class="line">   return &#39;&#39;&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       &lt;!doctype html&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       &lt;title&gt;Upload new File&lt;&#x2F;title&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       &lt;h1&gt;Upload new File&lt;&#x2F;h1&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       &lt;form action&#x3D;&quot;&quot; method&#x3D;post enctype&#x3D;multipart&#x2F;form-data&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">         &lt;p&gt;&lt;input type&#x3D;file name&#x3D;file&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           &lt;input type&#x3D;submit value&#x3D;Upload&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">         &lt;&#x2F;form&gt;</span></pre></td></tr></table></figure>

<p>尽量使用secure_filename() 作为文件名<br>现在我们来研究一下这个函数的功能:<br><code>&gt;&gt;&gt; secure_filename(&#39;../../../../home/username/.bashrc&#39;)</code><br><code>&#39;home_username_.bashrc&#39;</code>  </p>
<p>指定一个文件大小的上限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from flask import Flask, Request</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">app &#x3D; Flask(__name__)</span></pre></td></tr><tr><td class="code"><pre><span class="line">app.config[&#39;MAX_CONTENT_LENGTH&#39;] &#x3D; 16 * 1024 * 1024  # 限制了16M 超出会抛 RequestEntityToolarge异常</span></pre></td></tr></table></figure>

<p><img src="http://hotobun.gitee.io/hexo/img/archive_img/flask1.png" alt="flask1"><br><img src="http://hotobun.gitee.io/hexo/img/archive_img/flask2.png" alt="flask2"></p>
<hr>
<h2 id="静态文件"><a href="#静态文件" class="headerlink" title="静态文件"></a>静态文件</h2><p>render_template 和 url_for 的应用:<br><img src="http://hotobun.gitee.io/hexo/img/archive_img/flask3.png" alt="flask3"><br><img src="http://hotobun.gitee.io/hexo/img/archive_img/flask4.png" alt="flask4"></p>
<p>html模版语言中  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123; value_name &#125;&#125;  两个花括号内的是变量名 值是从render_template参数传过去  </span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;% if .. %&#125;    花括号类似编程语法 注意结束时 endif    </span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;% endif %&#125;    for 等操作同理</span></pre></td></tr></table></figure>


<hr>
<h2 id="模版渲染"><a href="#模版渲染" class="headerlink" title="模版渲染"></a>模版渲染</h2><p>render_template 渲染模版 默认传进的参数 带有html标签符会自动转义<br>如果想要从render_template传递带有标签符的内容 使用Markup函数：<br># 只有 Markup 不转义<br><img src="http://hotobun.gitee.io/hexo/img/archive_img/flask5.png" alt="flask5"><br><img src="http://hotobun.gitee.io/hexo/img/archive_img/flask6.png" alt="flask6"></p>
<hr>
<h2 id="用户注册"><a href="#用户注册" class="headerlink" title="用户注册"></a>用户注册</h2><p><img src="http://hotobun.gitee.io/hexo/img/archive_img/flask7.png" alt="flask7"><br>request.form 接收用户post的表单 用法与字典类似。<br>request.args 接收用户get的url参数  </p>
<hr>
<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><ul>
<li>在项目目录下 新建一个config.py 文件  </li>
<li>在文件里面写入配置信息  </li>
<li>项目主文件通过以下方式即可导入  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import config  </span></pre></td></tr><tr><td class="code"><pre><span class="line">app.config.from_object(config)</span></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<h2 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h2><p>使用mysql 依赖库： pymysql、 flask_sqlalchemy  </p>
<ul>
<li>创建 config.py</li>
<li>写入 SQLALCHEMY_DATABASE_URI<br><img src="http://hotobun.gitee.io/hexo/img/archive_img/flask8.png" alt="flask8"><br><img src="http://hotobun.gitee.io/hexo/img/archive_img/flask9.png" alt="flask9"></li>
</ul>
<hr>
<h2 id="ORM模型"><a href="#ORM模型" class="headerlink" title="ORM模型"></a>ORM模型</h2><p>模型类需要继承 上面第7行的db.Model属性<br>需要映射到表中的属性，必须写成 db.Column()的数据类型  </p>
<ul>
<li>db.Integer：整形  </li>
<li>db.String： 字符串，需要指定最长的长度  </li>
<li>db.Text：  text类型  </li>
<li>primary_key  –&gt; 主键  </li>
<li>autoincrement –&gt; 自增长  </li>
<li>nullable    –&gt; 默认可为空  False则不允许为空  </li>
</ul>
<p>最后调用 db.create_all() 将模型创建到数据库<br><img src="http://hotobun.gitee.io/hexo/img/archive_img/flask10.png" alt="flask10"></p>
<hr>
<h2 id="数据库增删改查"><a href="#数据库增删改查" class="headerlink" title="数据库增删改查"></a>数据库增删改查</h2><p>定义若干视图函数，当url访问时再调用函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@app.route(&quot;&#x2F;&quot;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">def sql_xxx():</span></pre></td></tr><tr><td class="code"><pre><span class="line">    # 增:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    article1 &#x3D; Article(title &#x3D; &#39;aaaaa&#39;, content &#x3D; &#39;bbbbb&#39;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    db.session.add(article1)  # 通过session属性 增加到数据库事务</span></pre></td></tr><tr><td class="code"><pre><span class="line">    db.session.commit()       # 这句话才是将事务提交 将数据保存至数据库</span></pre></td></tr><tr><td class="code"><pre><span class="line">   </span></pre></td></tr><tr><td class="code"><pre><span class="line">    ---------分割线</span></pre></td></tr><tr><td class="code"><pre><span class="line">    # 查：</span></pre></td></tr><tr><td class="code"><pre><span class="line">       # Article继承自db.Model，通过父类query属性进行查找操作 所有查找必须通过这个属性</span></pre></td></tr><tr><td class="code"><pre><span class="line">       # 通过filter过滤 参数: 模型类.属性名 &#x3D; val  </span></pre></td></tr><tr><td class="code"><pre><span class="line">       # .all()后下标可以换成.first() 如果没有数据 返回None  都是取出第一个数据</span></pre></td></tr><tr><td class="code"><pre><span class="line">    article2 &#x3D; Article.query.filter(Article.title&#x3D;&#x3D;&#39;aaaaa&#39;).all()[0]</span></pre></td></tr><tr><td class="code"><pre><span class="line">    print (&quot;title   --&gt; &quot;, article2.title)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    print (&#39;content --&gt; &#39;, article2.content)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">   ---------分割线</span></pre></td></tr><tr><td class="code"><pre><span class="line">    # 改:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    1 把数据查找出来</span></pre></td></tr><tr><td class="code"><pre><span class="line">    2 修改这条数据</span></pre></td></tr><tr><td class="code"><pre><span class="line">    3 提交事务</span></pre></td></tr><tr><td class="code"><pre><span class="line">    article3 &#x3D; Article.query.filter(Article.title &#x3D;&#x3D; &#39;aaaaa&#39;).first()</span></pre></td></tr><tr><td class="code"><pre><span class="line">    article3.content &#x3D; &#39;new content&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    db.session.commit()</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">   ---------分割线</span></pre></td></tr><tr><td class="code"><pre><span class="line">    # 删:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    1 把数据查找出来</span></pre></td></tr><tr><td class="code"><pre><span class="line">    2 把这条数据删除</span></pre></td></tr><tr><td class="code"><pre><span class="line">    3 做事务提交</span></pre></td></tr><tr><td class="code"><pre><span class="line">    article4 Article.query.filter(Article.title &#x3D;&#x3D; &#39;aaaaa&#39;).first()</span></pre></td></tr><tr><td class="code"><pre><span class="line">    db.session.delete(article4)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    db.session.commit()</span></pre></td></tr></table></figure>

<hr>
<h2 id="flask-script-使用命令行操作Flask"><a href="#flask-script-使用命令行操作Flask" class="headerlink" title="flask_script 使用命令行操作Flask:"></a>flask_script 使用命令行操作Flask:</h2><p><img src="http://hotobun.gitee.io/hexo/img/archive_img/flask11.png" alt="flask11"><br><img src="http://hotobun.gitee.io/hexo/img/archive_img/flask12.png" alt="flask12"><br><img src="http://hotobun.gitee.io/hexo/img/archive_img/flask13.png" alt="flask13"><br><img src="http://hotobun.gitee.io/hexo/img/archive_img/flask14.png" alt="flask14">  </p>
<hr>
<h2 id="循环引用问题："><a href="#循环引用问题：" class="headerlink" title="循环引用问题："></a>循环引用问题：</h2><p>主文件导入Models<br>Models文件又导入主文件的app 就会产生循环引用的问题<br>解决方法：<br>新建一个exts.py 里面创建SQLAlichemy实例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from flask_sqlalchemy import SQLAlchemy</span></pre></td></tr><tr><td class="code"><pre><span class="line">db &#x3D; SQLAlchemy()</span></pre></td></tr></table></figure>
<p>Models和主文件都从这里导入db 就切断循环引用<br>主文件内使用  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from exts import db</span></pre></td></tr><tr><td class="code"><pre><span class="line">db.init_app(app)</span></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>flask</tag>
      </tags>
  </entry>
  <entry>
    <title>linux笔记</title>
    <url>/2019/12/04/linux/</url>
    <content><![CDATA[<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>注意权限 适当添加<code>sudo</code>或切换至<code>root</code><br>修改密码<br><code>paasswd user # 当前用户可省略user</code><br>新建用户和用户组<br><code>groupadd name # 新建用户组</code><br><code>adduser -g group name  # 新建用户并指定用户组</code><br>赠与某用户 sudo权限 <code>vim /etc/sudoers</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root  ALL&#x3D;(ALL) ALL     # 找到这一行 添加用户在下面写</span></pre></td></tr><tr><td class="code"><pre><span class="line">chino ALL&#x3D;(ALL) ALL     # chino用户允许使用sudo</span></pre></td></tr><tr><td class="code"><pre><span class="line">syaro ALL&#x3D;(ALL) NOPASSWD:ALL     # syaro用户使用sudo不需要密码</span></pre></td></tr><tr><td class="code"><pre><span class="line">%cooca ALL&#x3D;(ALL) ALL    # cocoa用户组成员可以使用sudo</span></pre></td></tr></table></figure>
<p>修改hostname<br><code>$ hostmanectl set-hostname name</code><br>不小心按了ctrl + s<br><code>$ :noh</code><br> 根据端口号获取PID<br> <code>$ netstat -nlp | grep :{port}| awk &#39;{print $7}&#39; | awk -F&quot;/&quot; &#39;{ print $1 }</code><br> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> uname -a # 查看内核&#x2F;操作系统&#x2F;CPU信息的linux系统信息  </span></pre></td></tr><tr><td class="code"><pre><span class="line">head -n l &#x2F;etc&#x2F;issue # 查看操作系统版本  </span></pre></td></tr><tr><td class="code"><pre><span class="line">cat &#x2F;proc&#x2F;cpuinfo # 查看CPU信息  </span></pre></td></tr><tr><td class="code"><pre><span class="line">hostname # 查看计算机名的linux系统信息命令  </span></pre></td></tr><tr><td class="code"><pre><span class="line">lspci -tv # 列出所有PCI设备   </span></pre></td></tr><tr><td class="code"><pre><span class="line">lsusb -tv # 列出所有USB设备的linux系统信息命令  </span></pre></td></tr><tr><td class="code"><pre><span class="line">lsmod # 列出加载的内核模块   </span></pre></td></tr><tr><td class="code"><pre><span class="line">env # 查看环境变量资源  </span></pre></td></tr><tr><td class="code"><pre><span class="line">free -m # 查看内存使用量和交换区使用量   </span></pre></td></tr><tr><td class="code"><pre><span class="line">df -h # 查看各分区使用情况  </span></pre></td></tr><tr><td class="code"><pre><span class="line">du -sh # 查看指定目录的大小   </span></pre></td></tr><tr><td class="code"><pre><span class="line">grep MemTotal &#x2F;proc&#x2F;meminfo # 查看内存总量  </span></pre></td></tr><tr><td class="code"><pre><span class="line">grep MemFree &#x2F;proc&#x2F;meminfo # 查看空闲内存量   </span></pre></td></tr><tr><td class="code"><pre><span class="line">uptime # 查看系统运行时间、用户数、负载  </span></pre></td></tr><tr><td class="code"><pre><span class="line">cat &#x2F;proc&#x2F;loadavg # 查看系统负载磁盘和分区   </span></pre></td></tr><tr><td class="code"><pre><span class="line">mount | column -t # 查看挂接的分区状态  </span></pre></td></tr><tr><td class="code"><pre><span class="line">fdisk -l # 查看所有分区   </span></pre></td></tr><tr><td class="code"><pre><span class="line">swapon -s # 查看所有交换分区  </span></pre></td></tr><tr><td class="code"><pre><span class="line">hdparm -i &#x2F;dev&#x2F;hda # 查看磁盘参数(仅适用于IDE设备)   </span></pre></td></tr><tr><td class="code"><pre><span class="line">dmesg | grep IDE # 查看启动时IDE设备检测状况网络  </span></pre></td></tr><tr><td class="code"><pre><span class="line">ifconfig # 查看所有网络接口的属性   </span></pre></td></tr><tr><td class="code"><pre><span class="line">iptables -L # 查看防火墙设置  </span></pre></td></tr><tr><td class="code"><pre><span class="line">route -n # 查看路由表   </span></pre></td></tr><tr><td class="code"><pre><span class="line">netstat -lntp # 查看所有监听端口  </span></pre></td></tr><tr><td class="code"><pre><span class="line">netstat -antp # 查看所有已经建立的连接   </span></pre></td></tr><tr><td class="code"><pre><span class="line">netstat -s # 查看网络统计信息进程  </span></pre></td></tr><tr><td class="code"><pre><span class="line">ps -ef # 查看所有进程   </span></pre></td></tr><tr><td class="code"><pre><span class="line">top # 实时显示进程状态用户  </span></pre></td></tr><tr><td class="code"><pre><span class="line">w # 查看活动用户   </span></pre></td></tr><tr><td class="code"><pre><span class="line">id # 查看指定用户信息  </span></pre></td></tr><tr><td class="code"><pre><span class="line">last # 查看用户登录日志   </span></pre></td></tr><tr><td class="code"><pre><span class="line">cut -d: -f1 &#x2F;etc&#x2F;passwd # 查看系统所有用户  </span></pre></td></tr><tr><td class="code"><pre><span class="line">cut -d: -f1 &#x2F;etc&#x2F;group # 查看系统所有组   </span></pre></td></tr><tr><td class="code"><pre><span class="line">crontab -l # 查看当前用户的计划任务服务  </span></pre></td></tr><tr><td class="code"><pre><span class="line">chkconfig –list # 列出所有系统服务   </span></pre></td></tr><tr><td class="code"><pre><span class="line">chkconfig –list | grep on # 列出所有启动的系统服务程序  </span></pre></td></tr><tr><td class="code"><pre><span class="line">rpm -qa # 查看所有安装的软件包   </span></pre></td></tr><tr><td class="code"><pre><span class="line">cat &#x2F;proc&#x2F;cpuinfo ：查看CPU相关参数的linux系统命令  </span></pre></td></tr><tr><td class="code"><pre><span class="line">cat &#x2F;proc&#x2F;partitions ：查看linux硬盘和分区信息的系统信息命令   </span></pre></td></tr><tr><td class="code"><pre><span class="line">cat &#x2F;proc&#x2F;meminfo ：查看linux系统内存信息的linux系统命令  </span></pre></td></tr><tr><td class="code"><pre><span class="line">cat &#x2F;proc&#x2F;version ：查看版本，类似uname -r   </span></pre></td></tr><tr><td class="code"><pre><span class="line">cat &#x2F;proc&#x2F;ioports ：查看设备io端口  </span></pre></td></tr><tr><td class="code"><pre><span class="line">cat &#x2F;proc&#x2F;interrupts ：查看中断   </span></pre></td></tr><tr><td class="code"><pre><span class="line">cat &#x2F;proc&#x2F;pci ：查看pci设备的信息  </span></pre></td></tr><tr><td class="code"><pre><span class="line">cat &#x2F;proc&#x2F;swaps ：查看所有swap分区的信息</span></pre></td></tr></table></figure></p>
<h2 id="sudo找不到命令"><a href="#sudo找不到命令" class="headerlink" title="sudo找不到命令"></a>sudo找不到命令</h2><p>普通用户sudo的时候 找不到命令<br>centos用户程序目录一般在/usr/local/bin/<br>root用户的目录在/usr/bin<br>sudo 不检查/usr/local/bin<br>解决：  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">which command  # 找出用户的命令路径  假设为 pwd  </span></pre></td></tr><tr><td class="code"><pre><span class="line">sudo ln -s pwd &#x2F;usr&#x2F;bin&#x2F;command     # 修改pwd 和command</span></pre></td></tr></table></figure>

<hr>
<h2 id="centos安装python3"><a href="#centos安装python3" class="headerlink" title="centos安装python3"></a>centos安装python3</h2><p>方向键乱码：<br><code>yum install readline-devel</code><br>找不到ssl模块<br><code>yum install openssl-devel</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yilai bao  error:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ModuleNotFoundError: No module named &#39;_ctypes&#39;:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    yum install libffi-devel -y</span></pre></td></tr></table></figure>
<p>官网下载包后 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;configure  # 检测环境</span></pre></td></tr><tr><td class="code"><pre><span class="line">make </span></pre></td></tr><tr><td class="code"><pre><span class="line">make install</span></pre></td></tr></table></figure>
<p>安装完成</p>
<hr>
<h2 id="ssh-scp"><a href="#ssh-scp" class="headerlink" title="ssh scp"></a>ssh scp</h2><p>ssh scp出现 Permission denied (publickey,gssapi-with-mic,gssapi-keyex)<br>修改目标服务器中 /etc/ssh/sshd_config 中的参数：<br>一般在文件最后面<br>将PasswordAuthentication no中的“no”改为yes，如果有注释，将注释去掉<br>之后service sshd restart重启sshd服务就可以了。  </p>
<hr>
<h2 id="tcp转发"><a href="#tcp转发" class="headerlink" title="tcp转发"></a>tcp转发</h2><p>云主机网口是私网ip<br>外部只能访问公网<br>centos7 nginx :  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">编辑nginx配置文件 最后加上代码  </span></pre></td></tr><tr><td class="code"><pre><span class="line">$ vim &#x2F;etc&#x2F;nginx&#x2F;nginx.conf    </span></pre></td></tr><tr><td class="code"><pre><span class="line">stream&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    server&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        listen 233;                  # 公网监听端口 转发到下面的端口</span></pre></td></tr><tr><td class="code"><pre><span class="line">        proxy_pass：127.0.0.1：2333； # 公网233端口-&gt;内网2333端口</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ sudo nginx -t        # 检查nginx配置信息</span></pre></td></tr><tr><td class="code"><pre><span class="line">$ sudo nginx -s reload # 重启服务生效</span></pre></td></tr></table></figure>

<h2 id="静态网站的部署"><a href="#静态网站的部署" class="headerlink" title="静态网站的部署:"></a>静态网站的部署:</h2><p>在http{} 内部添加一个server<br><code>vim /etc/nginx/nginx.conf</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    listen 10086;     # 监听的端口号</span></pre></td></tr><tr><td class="code"><pre><span class="line">    listen [::]:10086;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    server_name _;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    root    &#x2F;home&#x2F;... ; # 最后不用&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    location &#x2F; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    index   index.html;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line">    error_log &#x2F;var&#x2F;log&#x2F;filename; # 错误日志路径 不写也可以</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>基础</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>python</title>
    <url>/2019/12/04/python/</url>
    <content><![CDATA[<h2 id="进制转换："><a href="#进制转换：" class="headerlink" title="进制转换："></a>进制转换：</h2><ul>
<li>二进制  bin()  </li>
<li>八进制  oct()  </li>
<li>十进制  int()  </li>
<li>十六进制  hex()  </li>
<li>chr(x) # 返回十进制x对应的ASCII编码对应字符  </li>
<li>ord(s) # 返回s字符对应的ASCII十进制编号  </li>
<li>chr(97)   –&gt; a  </li>
<li>ord(“A”) –&gt; 65  </li>
</ul>
<hr>
<h2 id="根据文件创建时间排序指定目录下的文件名"><a href="#根据文件创建时间排序指定目录下的文件名" class="headerlink" title="根据文件创建时间排序指定目录下的文件名"></a>根据文件创建时间排序指定目录下的文件名</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">target &#x3D; os.getcwd()    # 获取当前目录</span></pre></td></tr><tr><td class="code"><pre><span class="line">l &#x3D; os.listdir(target)</span></pre></td></tr><tr><td class="code"><pre><span class="line">a &#x3D; l.sort(key &#x3D; lambda x: os.path.join(target, x))</span></pre></td></tr></table></figure>

<hr>
<h2 id="查找元素出现次数"><a href="#查找元素出现次数" class="headerlink" title="查找元素出现次数"></a>查找元素出现次数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span></pre></td></tr><tr><td class="code"><pre><span class="line">r = requests.get(<span class="string">"http://www.baidu.com"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">d = dict()</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> r.text:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> i <span class="keyword">in</span> d:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        d[i] += <span class="number">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">else</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        d[i] = <span class="number">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> key,value <span class="keyword">in</span> d.items():</span></pre></td></tr><tr><td class="code"><pre><span class="line">    print(<span class="string">"&#123;&#125;: &#123;&#125;"</span>.format(key, value))</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>基础</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言结构体封装</title>
    <url>/2019/12/04/c_Structure_package/</url>
    <content><![CDATA[<h3 id="main-c"><a href="#main-c" class="headerlink" title="main.c"></a>main.c</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">"student.h"</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Student</span> *<span class="title">cocoa</span> = <span class="title">Create_newstudent</span>("<span class="title">cocoa</span>", 12, 18);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">printf</span>(<span class="string">"age = %d\nname = %s\n"</span>,getAge(cocoa),getName(cocoa));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Free(cocoa);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    system(<span class="string">"pause"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line">true<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h3 id="student-h"><a href="#student-h" class="headerlink" title="student.h"></a>student.h</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">pragma</span> once  </span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span>;</span>  </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function">struct Student * <span class="title">Create_newstudent</span><span class="params">(<span class="keyword">char</span> *name, <span class="keyword">int</span> age, <span class="keyword">int</span> student_id)</span></span>;  </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Free</span><span class="params">(struct Student* student)</span></span>;  </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> * <span class="title">getName</span><span class="params">(struct Student * student)</span></span>;  </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getAge</span><span class="params">(struct Student * student)</span></span>;  </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getId</span><span class="params">(struct Student * student)</span></span>;</span></pre></td></tr></table></figure>

<h3 id="student-c"><a href="#student-c" class="headerlink" title="student.c"></a>student.c</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span> &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">char</span> *name;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> age;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> student_id;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function">struct Student *<span class="title">Create_newstudent</span><span class="params">(<span class="keyword">char</span> *name, <span class="keyword">int</span> age, <span class="keyword">int</span> student_id)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Student</span> * <span class="title">new</span> = (<span class="title">struct</span> <span class="title">Student</span> *)<span class="title">malloc</span>(<span class="title">sizeof</span>(<span class="title">struct</span> <span class="title">Student</span>));</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">new</span>-&gt;name = name;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">new</span>-&gt;age = age;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">new</span>-&gt;student_id = student_id;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> * <span class="title">getName</span><span class="params">(struct Student * student)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> student-&gt;name;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getAge</span><span class="params">(struct Student * student)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> student-&gt;age;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getId</span><span class="params">(struct Student * student)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> student-&gt;student_id;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Free</span><span class="params">(struct Student *student)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">free</span>(student);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>基础</category>
      </categories>
      <tags>
        <tag>c语言</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown基本语法</title>
    <url>/2019/12/04/markdown/</url>
    <content><![CDATA[<h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><h4 id="这是四级标题"><a href="#这是四级标题" class="headerlink" title="这是四级标题"></a>这是四级标题</h4><h5 id="这是五级标题"><a href="#这是五级标题" class="headerlink" title="这是五级标题"></a>这是五级标题</h5><h6 id="这是六级标题"><a href="#这是六级标题" class="headerlink" title="这是六级标题"></a>这是六级标题</h6><p><strong>这是加粗的文字</strong><br><em>这是倾斜的文字</em>`<br><strong><em>这是斜体加粗的文字</em></strong><br><del>这是加删除线的文字</del>  </p>
<blockquote>
<p>这是引用的内容    </p>
<blockquote>
<p>这是引用的内容    </p>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<p>这是引用的内容    </p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<h2 id="三个或者以上的符号会变成分割线"><a href="#三个或者以上的符号会变成分割线" class="headerlink" title="三个或者以上的符号会变成分割线"></a>三个或者以上的符号会变成分割线</h2><hr>
<hr>
<hr>
<hr>
<h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>![图片alt](图片地址 ‘’图片title’’)<br>示例：<br><img src="http://hotobun.gitee.io/hexo/img/5.png" alt="图片" title="cocoa"></p>
<h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><p><a href="超链接地址" title="超链接title">超链接名</a><br>title可加可不加<br>示例：<br><a href="http://www.baidu.com" target="_blank" rel="noopener">百度</a></p>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>无序列表：</p>
<ul>
<li>列表内容</li>
</ul>
<ul>
<li>列表内容</li>
</ul>
<ul>
<li>列表内容</li>
</ul>
<p>有序列表：<br>1.列表内容<br>2.列表内容<br>3.列表内容</p>
<p>列表嵌套<br>上一级和下一级之间敲三个空格即可</p>
<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><table>
<thead>
<tr>
<th>表头</th>
<th align="center">表头</th>
<th align="right">表头</th>
</tr>
</thead>
<tbody><tr>
<td>内容</td>
<td align="center">内容</td>
<td align="right">内容</td>
</tr>
<tr>
<td>内容</td>
<td align="center">内容</td>
<td align="right">内容</td>
</tr>
</tbody></table>
<p>第二行分割表头和内容。<br>有一个就行，为了对齐，多加了几个<br>文字默认居左<br>-两边加：表示文字居中<br>-右边加：表示文字居右<br>注：原生的语法两边都要用 | 包起来。此处省略</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>语法：<br>单行代码：代码之间分别用一个反引号包起来<br>代码块  ：代码之间分别用三个反引号包起来，且两边的反引号单独占一行<br><code>hello world!\n</code>   </p>
<pre><code>#include &lt;stdio.h&gt;
int main (void){
  printf(&quot;hello world!\n&quot;);
  return 0;
}</code></pre>]]></content>
      <categories>
        <category>基础</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>MySql</title>
    <url>/2019/12/04/sql/</url>
    <content><![CDATA[<h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><p>指定urf-8编码  </p>
<ul>
<li><code>CREATE DATABASE databasename DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;</code></li>
</ul>
<h2 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h2><ul>
<li><code>drop databases &lt;databasename&gt;;</code></li>
<li><code>&gt;&gt;&gt; drop databases pwd;</code></li>
</ul>
<h2 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h2><p>通用语法:</p>
<ul>
<li><code>CREATE TABLE table_name (column_name column_type);</code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE IF NOT EXISTS &#96;runoob_tbl&#96;(</span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#96;runoob_id&#96; INT UNSIGNED AUTO_INCREMENT,   &#x2F;&#x2F; int无符号自增</span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#96;runoob_title&#96; VARCHAR(100) NOT NULL,      </span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#96;runoob_author&#96; VARCHAR(40) NOT NULL,      </span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#96;submission_date&#96; DATE,</span></pre></td></tr><tr><td class="code"><pre><span class="line">   PRIMARY KEY ( &#96;runoob_id&#96; )</span></pre></td></tr><tr><td class="code"><pre><span class="line">)ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8;</span></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="删除数据表"><a href="#删除数据表" class="headerlink" title="删除数据表"></a>删除数据表</h2><ul>
<li><code>DROP TABLE tableanme ;</code>   </li>
</ul>
<h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INSERT INTO table_name ( field1, field2,...fieldN )</span></pre></td></tr><tr><td class="code"><pre><span class="line">                       VALUES</span></pre></td></tr><tr><td class="code"><pre><span class="line">                       ( value1, value2,...valueN );</span></pre></td></tr></table></figure>

<h2 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT column_name,column_name</span></pre></td></tr><tr><td class="code"><pre><span class="line">FROM table_name</span></pre></td></tr><tr><td class="code"><pre><span class="line">[WHERE Clause]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[LIMIT N][ OFFSET M]</span></pre></td></tr></table></figure>
<p>1.查询语句中你可以使用一个或者多个表，表之间使用逗号(,)分割，并使用WHERE语句来设定查询条件。<br>2.SELECT 命令可以读取一条或者多条记录。<br>3.你可以使用星号（*）来代替其他字段，SELECT语句会返回表的所有字段数据<br>4.你可以使用 WHERE 语句来包含任何条件。<br>5.你可以使用 LIMIT 属性来设定返回的记录数。<br>6.你可以通过OFFSET指定SELECT语句开始查询的数据偏移量。默认情况下偏移量为0。  </p>
<h2 id="查询去重"><a href="#查询去重" class="headerlink" title="查询去重"></a>查询去重</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select distinct 字段名 from table;</span></pre></td></tr></table></figure>

<h2 id="concat函数"><a href="#concat函数" class="headerlink" title="concat函数"></a>concat函数</h2><ul>
<li>功能：拼接字符 <code>&quot;1&quot;+&quot;23&quot; = &quot;123&quot;</code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select concat (字段1,字段2 ) from table;</span></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="ifnull函数："><a href="#ifnull函数：" class="headerlink" title="ifnull函数："></a>ifnull函数：</h2><ul>
<li>功能：判断某字段或表达式是否为null，如果为null 返回指定的值，否则返回原本的值<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 如果&#96;hello&#96;列为空则返回0</span></pre></td></tr><tr><td class="code"><pre><span class="line">select ifnull(hello, 0) from employees;</span></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="isnull函数"><a href="#isnull函数" class="headerlink" title="isnull函数"></a>isnull函数</h2><ul>
<li>功能：判断某字段或表达式是否为null，如果是，则返回1，否则返回0<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select id, isnull(root) from table;</span></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h2><ul>
<li>where字句<br>用于筛选符合条件的数据 将不满足条件的行过滤<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from table </span></pre></td></tr><tr><td class="code"><pre><span class="line">    where id &#x3D; 1 or data &#x3D; &#39;hello&#39; ;</span></pre></td></tr></table></figure>


</li>
</ul>
<table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">BETWEEN…AND…</td>
<td align="center">现在某一区间的值(包含头与结尾)</td>
</tr>
<tr>
<td align="center">IN(set)</td>
<td align="center">现在在in列表中的值 例：in(100,200)</td>
</tr>
<tr>
<td align="center">LIKE通配符</td>
<td align="center">模糊查询，Like语句中有两个通配符：% 用来匹配多个字符；例name like “%a”; “_”用来表示任意一个字符;</td>
</tr>
<tr>
<td align="center">IS NULL</td>
<td align="center">判断是否为空， is not null; 判断不为空</td>
</tr>
<tr>
<td align="center">AND(&amp;&amp;)</td>
<td align="center">多个条件同时成立</td>
</tr>
<tr>
<td align="center">OR(||)</td>
<td align="center">多个条件任意一个成立</td>
</tr>
<tr>
<td align="center">not(!)</td>
<td align="center">不成立，例：where not(salary&gt;100);</td>
</tr>
</tbody></table>
<h2 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h2><p>ORDER BY </p>
<ul>
<li>使用ORDER BY 子句排序<ul>
<li>ASC(ascend) 默认 升序</li>
<li>DESC(descend) 降序<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查询名字含有a的行 按mid进行降序排序 显示前20行</span></pre></td></tr><tr><td class="code"><pre><span class="line">select * from table</span></pre></td></tr><tr><td class="code"><pre><span class="line">    where name like &quot;%a%&quot; </span></pre></td></tr><tr><td class="code"><pre><span class="line">    order by mid desc </span></pre></td></tr><tr><td class="code"><pre><span class="line">    limit 20;</span></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h2 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select 分组函数，分组后的字段</span></pre></td></tr><tr><td class="code"><pre><span class="line">from 表</span></pre></td></tr><tr><td class="code"><pre><span class="line">where 筛选条件</span></pre></td></tr><tr><td class="code"><pre><span class="line">group by 分组的字段</span></pre></td></tr><tr><td class="code"><pre><span class="line">having 分组后的筛选</span></pre></td></tr><tr><td class="code"><pre><span class="line">order by 排序列表</span></pre></td></tr></table></figure>

<h2 id="简易备份与恢复"><a href="#简易备份与恢复" class="headerlink" title="简易备份与恢复"></a>简易备份与恢复</h2><p>本机可忽略主机名与端口<br>备份：<br><code>mysqldump -h主机名 -P端口 -u用户名 -p密码 --database 数据库名 &gt; 文件名.sql</code><br>恢复：<br><code>mysql -u用户名 -p密码 数据库名 &lt; 文件名.sql ;</code>  </p>
]]></content>
      <categories>
        <category>基础</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>First article</title>
    <url>/2019/12/04/First_article/</url>
    <content><![CDATA[<p>hello blog!  </p>
<blockquote>
<p>再次感谢原作者创作出这么精美的主题 <a href="https://github.com/Fechin/hexo-theme-diaspora" target="_blank" rel="noopener">@Fechin</a> <a href="https://github.com/LoeiFy/Diaspora" target="_blank" rel="noopener">@LoeiFy</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
</search>
